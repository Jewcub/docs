{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Textile provides encrypted, recoverable, schema-based, and cross-application data storage built on IPFS and libp2p . We like to think of it as an open and programmable iCloud . The network We believe that future technology can be built around a new model of data ownership where individuals have total agency over the information they create. Take the tour \u00b6 Whatever your use-case may be, the Tour of Textile is great place to start. Other Resources \u00b6 Join our public Slack , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Welcome!"},{"location":"#take-the-tour","text":"Whatever your use-case may be, the Tour of Textile is great place to start.","title":"Take the tour"},{"location":"#other-resources","text":"Join our public Slack , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Other Resources"},{"location":"a-tour-of-textile/","text":"Photo by Andrew Neel on Unsplash Welcome to Textile! This is a great place to start if you're a developer interested in using Textile's decentralized tooling in your mobile, desktop, or web applications. However, anyone interested in learning how to run and interact with a Textile peer will also find this tour useful. Threads v2 \u00b6 A scalable, secure, multi-user, database for developers In December 2019 we published, A protocol & event-sourced database for decentralized user-siloed data . The new protocol, called Threads, builds off of many things we learned about how to exchange and build on decentralized data. We believe Threads can offer a solution to developers who want to build secure, performant, decentralized applications on any platform. If you would like to start testing Threads v2, explore the projects below. Name Status Platforms Description Implementations go-threads Threads reference implementation. js-threads Work in Progress. JavaScript implementation. Clients js-threads-client A JavaScript client for the threads daemon. dart-threads-client A Dart client for the threads daemon. Examples go-foldersync An e2e demo to sync data between two golang clients. js-foldersync A demo of writing and reading models with the js-threads-client. Planned andoroid-threads-client An Android client for the threads daemon. ios-threads-client An iOS client for the threads daemon. Textile CLI \u00b6 We are close to releasing a developer toolkit to make launching, updating, and scaling your apps on IPFS & Filecoin simple. If you would like to receive updates about this work, please join our Slack channel . Filecoin \u00b6 We recently announced our initiative to build developer tools for Filecoin. Those tools will leverage and link into Threads v2 and the Textile CLI to give developers simple ways to leverage Filecoin.","title":"A Tour of Textile"},{"location":"a-tour-of-textile/#threads-v2","text":"A scalable, secure, multi-user, database for developers In December 2019 we published, A protocol & event-sourced database for decentralized user-siloed data . The new protocol, called Threads, builds off of many things we learned about how to exchange and build on decentralized data. We believe Threads can offer a solution to developers who want to build secure, performant, decentralized applications on any platform. If you would like to start testing Threads v2, explore the projects below. Name Status Platforms Description Implementations go-threads Threads reference implementation. js-threads Work in Progress. JavaScript implementation. Clients js-threads-client A JavaScript client for the threads daemon. dart-threads-client A Dart client for the threads daemon. Examples go-foldersync An e2e demo to sync data between two golang clients. js-foldersync A demo of writing and reading models with the js-threads-client. Planned andoroid-threads-client An Android client for the threads daemon. ios-threads-client An iOS client for the threads daemon.","title":"Threads v2"},{"location":"a-tour-of-textile/#textile-cli","text":"We are close to releasing a developer toolkit to make launching, updating, and scaling your apps on IPFS & Filecoin simple. If you would like to receive updates about this work, please join our Slack channel .","title":"Textile CLI"},{"location":"a-tour-of-textile/#filecoin","text":"We recently announced our initiative to build developer tools for Filecoin. Those tools will leverage and link into Threads v2 and the Textile CLI to give developers simple ways to leverage Filecoin.","title":"Filecoin"},{"location":"concepts/","text":"Textile is a set of tools and trust-less infrastructure for building censorship resistant and privacy preserving applications. While interoperable with the whole IPFS peer-to-peer network, Textile-flavored peers represent an additional layer or sub-network of users, applications, and services . With good encryption defaults and anonymous, disposable application services like cafes , Textile aims to bring the decentralized internet to real products that people love. The network How it works \u00b6 Textile peers use p2p messaging patterns to orchestrate shared datasets, or more specifically your chats, contacts, albums, and more. With iCloud or another major cloud provider, you expect these datasets to be synced across your iOS devices. Additionally, if you've shared a dataset like a playlist or photo album with other users, you would expect changes to be synced with their devices as well. You can expect the same with Textile, but without the centralized control of a single organization or government. A traditional cloud provider will store your datasets in one, maybe a few, central location(s). This means that you must trust the provider won't decide to drop your access, and in some cases, to not view or expose the contents of your datasets. In Textile, these types of datasets are called threads . At the core of every thread is a secret. Only peers that possess the secret are able to decrypt thread content or follow linkages. Hint Unlike a blockchain, threads are not based around the idea of consensus. Instead, they follow an agent-centric approach similar to holochain . Each peer has authority over thread access-control and storage. Because threads are simply a hash-chain of update messages, or blocks , they can represent any type of dataset. Some blocks point to off-chain data stored on IPFS. For example, a set of photos, a PDF, or even an entire website. Application developers are able to add structure to threads and make them interoperable with other applications by using schemas . Threads are auto-magically synced with other account peers. For example, you may have one peer on your phone, and another on your laptop, both with access to the same account seed (more about accounts here ). Threads can also be shared with other non-account peers (other users). In any case, each peer maintains a copy of its threads. A p2p messaging protocol keeps all the copies in sync. The special hash-chain or graph structure of a thread allows them to be easily shared with other peers and backed-up to cafes . Given one message, you can find all the others. Let's look a little closer at the different actors on the network. Account Peers \u00b6 User account peers share access to a single account from a data wallet . You can think of the wallet as a collection of thread secrets. Account peers typically run on desktops, laptops, and mobile devices and expose APIs for encrypting, storing, and sharing files/data/messages, among other functions. Account peers will automatically stay in sync. Read more about account sync here . Cafe Peers \u00b6 Cafe peers (or just cafes) are anonymous and disposable infrastructure. They provide services on behalf of users and applications without requiring trust . For example, once an account peer is registered with a cafe,\u001f all of its local (default encrypted) data is automatically synced (pinned). encrypted thread snapshots (HEAD) are automatically synced for new device sign-in and recovery. it will have an always-online message inbox for receiving thread updates from other peers when offline. its contact info will be indexed and made available for search on the network. Unlike account peers, cafes need to be online at all times in order to function properly. For this reason, they typically run in a server environment. They are easy to deploy & manage (single executable, Docker). Tip An account peer may be registered with more than one cafe, and account peers do not need to be registered to the same cafe(s). Additionally, peers can easily migrate from one cafe to another, simply be deregistering from one and registering with another. Applications \u00b6 Finally, applications run alongside or include an account peer and can create and/or access their data. Textile maintains a few reference apps like Textile Photos for desktop and mobile. Check out the client SDKs for information on how to leverage an account peer in your application. Why IPFS? \u00b6 IPFS is the perfect file system for Textile for a few reasons: IPFS uses content-addressed data , meaning that content can be requested from the network as a whole by an immutable address , rather than from a single host with an arbitrary URL. This stands in the way of censorship and opens the door to Textile's decentralized, recoverable, and cross-application data storage. IPFS ships with a libp2p host, which is the best-in-class peer-to-peer networking library. Textile believes that IPFS is the distributed web of the future. Core to our mission is the idea that Textile accounts, applications, and data are interoperable with the larger IPFS network .","title":"Introduction"},{"location":"concepts/#how-it-works","text":"Textile peers use p2p messaging patterns to orchestrate shared datasets, or more specifically your chats, contacts, albums, and more. With iCloud or another major cloud provider, you expect these datasets to be synced across your iOS devices. Additionally, if you've shared a dataset like a playlist or photo album with other users, you would expect changes to be synced with their devices as well. You can expect the same with Textile, but without the centralized control of a single organization or government. A traditional cloud provider will store your datasets in one, maybe a few, central location(s). This means that you must trust the provider won't decide to drop your access, and in some cases, to not view or expose the contents of your datasets. In Textile, these types of datasets are called threads . At the core of every thread is a secret. Only peers that possess the secret are able to decrypt thread content or follow linkages. Hint Unlike a blockchain, threads are not based around the idea of consensus. Instead, they follow an agent-centric approach similar to holochain . Each peer has authority over thread access-control and storage. Because threads are simply a hash-chain of update messages, or blocks , they can represent any type of dataset. Some blocks point to off-chain data stored on IPFS. For example, a set of photos, a PDF, or even an entire website. Application developers are able to add structure to threads and make them interoperable with other applications by using schemas . Threads are auto-magically synced with other account peers. For example, you may have one peer on your phone, and another on your laptop, both with access to the same account seed (more about accounts here ). Threads can also be shared with other non-account peers (other users). In any case, each peer maintains a copy of its threads. A p2p messaging protocol keeps all the copies in sync. The special hash-chain or graph structure of a thread allows them to be easily shared with other peers and backed-up to cafes . Given one message, you can find all the others. Let's look a little closer at the different actors on the network.","title":"How it works"},{"location":"concepts/#account-peers","text":"User account peers share access to a single account from a data wallet . You can think of the wallet as a collection of thread secrets. Account peers typically run on desktops, laptops, and mobile devices and expose APIs for encrypting, storing, and sharing files/data/messages, among other functions. Account peers will automatically stay in sync. Read more about account sync here .","title":"Account Peers"},{"location":"concepts/#cafe-peers","text":"Cafe peers (or just cafes) are anonymous and disposable infrastructure. They provide services on behalf of users and applications without requiring trust . For example, once an account peer is registered with a cafe,\u001f all of its local (default encrypted) data is automatically synced (pinned). encrypted thread snapshots (HEAD) are automatically synced for new device sign-in and recovery. it will have an always-online message inbox for receiving thread updates from other peers when offline. its contact info will be indexed and made available for search on the network. Unlike account peers, cafes need to be online at all times in order to function properly. For this reason, they typically run in a server environment. They are easy to deploy & manage (single executable, Docker). Tip An account peer may be registered with more than one cafe, and account peers do not need to be registered to the same cafe(s). Additionally, peers can easily migrate from one cafe to another, simply be deregistering from one and registering with another.","title":"Cafe Peers"},{"location":"concepts/#applications","text":"Finally, applications run alongside or include an account peer and can create and/or access their data. Textile maintains a few reference apps like Textile Photos for desktop and mobile. Check out the client SDKs for information on how to leverage an account peer in your application.","title":"Applications"},{"location":"concepts/#why-ipfs","text":"IPFS is the perfect file system for Textile for a few reasons: IPFS uses content-addressed data , meaning that content can be requested from the network as a whole by an immutable address , rather than from a single host with an arbitrary URL. This stands in the way of censorship and opens the door to Textile's decentralized, recoverable, and cross-application data storage. IPFS ships with a libp2p host, which is the best-in-class peer-to-peer networking library. Textile believes that IPFS is the distributed web of the future. Core to our mission is the idea that Textile accounts, applications, and data are interoperable with the larger IPFS network .","title":"Why IPFS?"},{"location":"concepts/cafes/","text":"Cafe peers (or just cafes) are anonymous and disposable infrastructure. They provide services on behalf of users and applications. Danger Threads v1 are being deprecated. Please follow our ongoing work on v2 on both the go-textile-threads repo and the early preview . Until Threads v2 release, Cafe APIs should be used for experimental purposes only. Access to cafe services is granted via JWT-based sessions, and initial registration with a cafe requires an access token. Any peer can operate as a cafe, though they work best for always-on peers. Cafes run an 'extra' network API that handles client and host requests over libp2p or HTTP. Tip An account peer may be registered with more than one cafe, and account peers do not need to be registered to the same cafe(s). Additionally, peers can easily migrate from one cafe to another, simply be deregistering from one and registering with another. Services \u00b6 Backup \u00b6 One of the primary functions of a cafe is to provide a recovery and new device sign-in mechanism to its clients . Once registered with a cafe, clients' data (which is, by default, encrypted) is automatically synced. This involves a combination of authenticated IPFS pinning and thread snapshots. A thread snapshot contains only the metadata and latest known update hash (HEAD) needed to reconstruct the entire thread from scratch, and is encrypted with the client's account key. This means that cafes only issue encrypted backups and are not able to read their clients' threads. This also means that the snapshots are useless if a client loses their account key. Message inbox-ing \u00b6 Very often, a peer is not online or is otherwise unreachable and therefore unable to receive a message (usually a thread update message, or block ). In this failed state, the sender can send the message to the recipient's always-online cafe(s), ensuring the message is delivered when the recipient returns online. In practice, this means that, when available, cafe \"inbox\" addresses are attached to contacts , which get published to the network. This is sort of like your phone's voicemail service, but here you're in control of where the message is actually delivered. Most importantly, because the update messages are encrypted, you do not need to trust the cafe hosting the inbox. User account indexing \u00b6 Textile provides tooling for certain types of network-wide queries , like user account search. Changes to a peer's public-facing contact are indexed and made query-able by its cafes. So, while you do not need to be registered with a cafe in order to leverage these queries, doing so may increase your chances of being discovered by others, assuming you local peer is periodically offline. Web endpoints \u00b6 IPFS gateway \u00b6 All desktop and server peers host an IPFS gateway. However, the gateway is most useful on a cafe peer where clients' content is stored. See the IPFS Gateway section for more, including details about a decryption service unique to Textile gateways. Latest thread share \u00b6 Status Pending. We plan to support the ability to publish threads over Textile that can be tracked and exposed over cafes without needing full Textile clients. Follow on GitHub . Cafe functions \u00b6 Status Exploring. We are looking into the concept of offering server-less function support directly inside a cafe. Examples of server-less function uses include: Publishing a web-hook, updating an RSS feed, or triggering a push notification. Deploying \u00b6 Cafes are easy to deploy and manage (single executable, Docker). Start here to run your own. Try one \u00b6 Textile hosts a development cafe that you are free to use for non-production purposes. Danger Use the dev cafe at your own risk. Your data may be deleted without notice. Connection details: Peer ID API Gateway Token 12D3KooWGN8VAsPHsHeJtoTbbzsGjs2LTmQZ6wFKvuPich1TYmYY https://us-west-dev.textile.cafe/ https://us-west-dev.textile.cafe/ipfs uggU4NcVGFSPchULpa2zG2NRjw2bFzaiJo3BYAgaFyzCUPRLuAgToE3HXPyo Community Hosted Cafes \u00b6 RTrade hosts several cafes for companies and individuals to use as part of their developer platform, Temporal . You can try one of RTrade's development cafes freely for non-production purposes. Danger Use the RTrade cafe at your own risk. Your data may be deleted without notice. Connection details: Peer ID API Gateway Token 12D3KooWGN8VAsPHsHeJtoTbbzsGjs2LTmQZ6wFKvuPich1TYmYY https://cafe1.temporal.cloud/ https://cafe2.temporal.cloud/ https://textile.gateway.temporal.cloud/ipfs/ 2MHxDxNaJot3aP7Q1V2emJA5D5iKwEnSKRdh3gM1wPBz1jwhDearLCRJfhopR","title":"Cafes"},{"location":"concepts/cafes/#services","text":"","title":"Services"},{"location":"concepts/cafes/#backup","text":"One of the primary functions of a cafe is to provide a recovery and new device sign-in mechanism to its clients . Once registered with a cafe, clients' data (which is, by default, encrypted) is automatically synced. This involves a combination of authenticated IPFS pinning and thread snapshots. A thread snapshot contains only the metadata and latest known update hash (HEAD) needed to reconstruct the entire thread from scratch, and is encrypted with the client's account key. This means that cafes only issue encrypted backups and are not able to read their clients' threads. This also means that the snapshots are useless if a client loses their account key.","title":"Backup"},{"location":"concepts/cafes/#message-inbox-ing","text":"Very often, a peer is not online or is otherwise unreachable and therefore unable to receive a message (usually a thread update message, or block ). In this failed state, the sender can send the message to the recipient's always-online cafe(s), ensuring the message is delivered when the recipient returns online. In practice, this means that, when available, cafe \"inbox\" addresses are attached to contacts , which get published to the network. This is sort of like your phone's voicemail service, but here you're in control of where the message is actually delivered. Most importantly, because the update messages are encrypted, you do not need to trust the cafe hosting the inbox.","title":"Message inbox-ing"},{"location":"concepts/cafes/#user-account-indexing","text":"Textile provides tooling for certain types of network-wide queries , like user account search. Changes to a peer's public-facing contact are indexed and made query-able by its cafes. So, while you do not need to be registered with a cafe in order to leverage these queries, doing so may increase your chances of being discovered by others, assuming you local peer is periodically offline.","title":"User account indexing"},{"location":"concepts/cafes/#web-endpoints","text":"","title":"Web endpoints"},{"location":"concepts/cafes/#ipfs-gateway","text":"All desktop and server peers host an IPFS gateway. However, the gateway is most useful on a cafe peer where clients' content is stored. See the IPFS Gateway section for more, including details about a decryption service unique to Textile gateways.","title":"IPFS gateway"},{"location":"concepts/cafes/#latest-thread-share","text":"Status Pending. We plan to support the ability to publish threads over Textile that can be tracked and exposed over cafes without needing full Textile clients. Follow on GitHub .","title":"Latest thread share"},{"location":"concepts/cafes/#cafe-functions","text":"Status Exploring. We are looking into the concept of offering server-less function support directly inside a cafe. Examples of server-less function uses include: Publishing a web-hook, updating an RSS feed, or triggering a push notification.","title":"Cafe functions"},{"location":"concepts/cafes/#deploying","text":"Cafes are easy to deploy and manage (single executable, Docker). Start here to run your own.","title":"Deploying"},{"location":"concepts/cafes/#try-one","text":"Textile hosts a development cafe that you are free to use for non-production purposes. Danger Use the dev cafe at your own risk. Your data may be deleted without notice. Connection details: Peer ID API Gateway Token 12D3KooWGN8VAsPHsHeJtoTbbzsGjs2LTmQZ6wFKvuPich1TYmYY https://us-west-dev.textile.cafe/ https://us-west-dev.textile.cafe/ipfs uggU4NcVGFSPchULpa2zG2NRjw2bFzaiJo3BYAgaFyzCUPRLuAgToE3HXPyo","title":"Try one"},{"location":"concepts/cafes/#community-hosted-cafes","text":"RTrade hosts several cafes for companies and individuals to use as part of their developer platform, Temporal . You can try one of RTrade's development cafes freely for non-production purposes. Danger Use the RTrade cafe at your own risk. Your data may be deleted without notice. Connection details: Peer ID API Gateway Token 12D3KooWGN8VAsPHsHeJtoTbbzsGjs2LTmQZ6wFKvuPich1TYmYY https://cafe1.temporal.cloud/ https://cafe2.temporal.cloud/ https://textile.gateway.temporal.cloud/ipfs/ 2MHxDxNaJot3aP7Q1V2emJA5D5iKwEnSKRdh3gM1wPBz1jwhDearLCRJfhopR","title":"Community Hosted Cafes"},{"location":"concepts/contacts/","text":"A contact can be thought of as a set of ephemeral agents (peers) owned by a single account. Danger Threads v1 are being deprecated. Please follow our ongoing work on v2 on both the go-textile-threads repo and the early preview . Until Threads v2 release, Contacts should be considered experimental only. \"Contacts\" are derived from account peer profiles. Peers may be connected with different cafe inboxes. Each of these peers shares a special private account thread , which tracks account peers, profile information, and known contacts. When indexed, this thread provides: A \"self\" contact, much like iOS or other contact systems, which is advertised to the network and indexed for search by registered cafes . A contact \"address book\" for interacting with other users. As shown in the diagram above, a contact will display profile information (name and avatar) from the most recently updated peer. Tip See textile contacts --help or check out the tour section on contacts to learn more about contact management.","title":"Contacts"},{"location":"concepts/search/","text":"Textile peers have a built in mechanism for certain types of network-wide queries. In order to support both cafe and cafe -less search, this mechanism uses a combination of direct peer-to-peer and publish-subscribe messaging. Search responses will usually come from cafe peers. However, any peer on the network can respond to a query. Search with a cafe \u00b6 If they have any registered, peers will send queries to their cafes , which are usually connected to a larger portion of the network. Cafes publish search queries on behalf of their clients. Results are more easily sent to always-online cafes, which are then streamed back down to the client peer. Search without a cafe \u00b6 When not registered with a cafe , peers will publish queries directly to the network. Responding peers will publish results to the requesting peer's ID-based pubsub topic. Types \u00b6 Contacts \u00b6 See textile contacts search --help or check out the tour section on contact search . Threads \u00b6 Thread search is currently limited to account peers searching for each other's snapshots . This functionality is the backbone of account sync . Info Check out the threads v2 roadmap for some coming functionality around public-facing thread search.","title":"Search"},{"location":"concepts/search/#search-with-a-cafe","text":"If they have any registered, peers will send queries to their cafes , which are usually connected to a larger portion of the network. Cafes publish search queries on behalf of their clients. Results are more easily sent to always-online cafes, which are then streamed back down to the client peer.","title":"Search with a cafe"},{"location":"concepts/search/#search-without-a-cafe","text":"When not registered with a cafe , peers will publish queries directly to the network. Responding peers will publish results to the requesting peer's ID-based pubsub topic.","title":"Search without a cafe"},{"location":"concepts/search/#types","text":"","title":"Types"},{"location":"concepts/search/#contacts","text":"See textile contacts search --help or check out the tour section on contact search .","title":"Contacts"},{"location":"concepts/search/#threads","text":"Thread search is currently limited to account peers searching for each other's snapshots . This functionality is the backbone of account sync . Info Check out the threads v2 roadmap for some coming functionality around public-facing thread search.","title":"Threads"},{"location":"concepts/the-wallet/","text":"Textile uses a hierarchical deterministic (HD) wallet to derive account keys from a set of unique words, called a mnemonic phrase . Textile account key derivation from a BIP39 mnemonic. Every account seed \"inside\" the wallet can be derived from this mnemonic phrase. Meaning that the wallet effectively is the mnemonic phrase. Any given wallet may create an arbitrary number of accounts. For example, a single wallet can be used to provision multiple Textile Photos \"accounts\", each with a completely different persona. This provides a powerful partitioning framework. Textile account seeds (private keys) always starts with an \"S\" for \"secret\" and account addresses (public keys) always start with a \"P\" for \"public\". Hint Peer initialization does not (by design) use the whole wallet, just one account seed. Users and applications are free to use any seed from their wallet, but most use cases will just make use of the seed from the default account, or account 0 . This BIP39 mnemonic explorer can be helpful when learning about HD wallets: https://iancoleman.io/bip39/ . The current implementation is a BIP32 Hierarchical Deterministic Wallet based on Stellar's implementation of SLIP-0010 . See the daemon installation section for a guide to generating a wallet with the command-line client. Clients \u00b6 Generating and interacting with a wallet are capabilities separate from the core peer API. Below is a list of clients that are currently able to generate and interact with wallets. The command-line client via the wallet subcommand js-wallet ios-textile android-textile Accounts \u00b6 Account seeds and their public addresses are generated via the wallet pass-phrase. Textile uses ed25519 keys because they provide fast key generation, signing, and verification. These properties become important on less powerful devices like phones. Sync \u00b6 Peers that are backed by the same account are called account peers . Account peers will automatically stay in sync. They are able to instruct one another to create and delete threads. Additionally, they will continuously search the network for each other's encrypted thread snapshots (metadata and the latest update hash, usually stored by cafes ). Learn how search works here . Info Thread snapshots also enable logins from new devices, as the new peer just needs to search for snapshots created by its account. Every peer has in internal account thread , which is used to track account peers, profile information, and known contacts. Read more about account threads here .","title":"The Wallet"},{"location":"concepts/the-wallet/#clients","text":"Generating and interacting with a wallet are capabilities separate from the core peer API. Below is a list of clients that are currently able to generate and interact with wallets. The command-line client via the wallet subcommand js-wallet ios-textile android-textile","title":"Clients"},{"location":"concepts/the-wallet/#accounts","text":"Account seeds and their public addresses are generated via the wallet pass-phrase. Textile uses ed25519 keys because they provide fast key generation, signing, and verification. These properties become important on less powerful devices like phones.","title":"Accounts"},{"location":"concepts/the-wallet/#sync","text":"Peers that are backed by the same account are called account peers . Account peers will automatically stay in sync. They are able to instruct one another to create and delete threads. Additionally, they will continuously search the network for each other's encrypted thread snapshots (metadata and the latest update hash, usually stored by cafes ). Learn how search works here . Info Thread snapshots also enable logins from new devices, as the new peer just needs to search for snapshots created by its account. Every peer has in internal account thread , which is used to track account peers, profile information, and known contacts. Read more about account threads here .","title":"Sync"},{"location":"concepts/threads/","text":"Threads are the backbone of Textile's encrypted, recoverable, schema-based, and cross-application data storage . Think of a thread as a decentralized database of encrypted files and messages, shared between specific participants. Danger Threads v1 are being deprecated. Please follow our ongoing work on v2 on both the go-textile-threads repo and the early preview . Until Threads v2 release, Threads should be used for experimental purposes only. At the core of every thread is a secret. Only peers that possess the secret can decrypt thread content or follow linkages. Hint Unlike a blockchain, threads are not based around the idea of consensus. Instead, they follow an agent-centric approach similar to holochain . Each peer has authority over thread access-control and storage. Because threads are simply a hash-chain of update messages, or blocks , they can represent any type of dataset. Some blocks point to off-chain data stored on IPFS. For example, a set of photos, a PDF, or even an entire website. Application developers are able to add structure to threads and make them interoperable with other applications by using schemas . Threads are auto-magically synced with other account peers. For example, you may have one peer on your phone, and another on your laptop, both with access to the same account seed (more about accounts here ). Threads can also be shared with other non-account peers (other users). In any case, each peer maintains a copy of its threads. A p2p messaging protocol keeps all the copies in sync. The special hash-chain or graph structure of a thread allows them to be easily shared with other peers and backed-up to cafes . Given one message, you can find all the others. Requirements \u00b6 Threads are supposed to serve a decentralized cloud-like function for safely storing and retrieving data generated by applications for users, i.e., photos, messages, contacts, health data, etc. They were designed with the following requirements in mind: Conflict resistant: Similar to ipfs-log , a thread should facilitate a resilient, distributed state, shared among multiple members (and/or devices). Mud puddle resistant: There should be a way to safely backup a thread's state such that the owner can recover it. Offline-first: Because most people access the internet primarily from mobile devices, threads must enable a UX that works well in scenarios where connectivity is spotty, and peers are continually coming and going from the network. Secure: Peers must sign updates and encrypted with the shared key. Ideally, linkages should also be obscured by encryption. Implementation \u00b6 On the one hand, threads is a data model for representing a dataset as a hash-chain of updates. On the other hand, it's a protocol for orchestrating that state between peers. Info Threads aim to be language and platform agnostic. For this reason, Textile uses protocol buffers extensively because they are a \"language-neutral, platform-neutral, extensible mechanism for serializing structured data\". Model \u00b6 message Thread { string id = 1 ; string key = 2 ; bytes sk = 3 ; string name = 4 ; string schema = 5 ; string initiator = 6 ; Type type = 7 ; Sharing sharing = 8 ; repeated string whitelist = 9 ; State state = 10 ; string head = 11 ; // Type controls read (R), annotate (A), and write (W) access enum Type { PRIVATE = 0 ; // initiator: RAW, whitelist: READ_ONLY = 1 ; // initiator: RAW, whitelist: R PUBLIC = 2 ; // initiator: RAW, whitelist: RA OPEN = 3 ; // initiator: RAW, whitelist: RAW } // Sharing controls if (Y/N) a thread can be shared enum Sharing { NOT_SHARED = 0 ; // initiator: N, whitelist: N INVITE_ONLY = 1 ; // initiator: Y, whitelist: N SHARED = 2 ; // initiator: Y, whitelist: Y } // State indicates the loading state enum State { LOADING_TAIL = 0 ; // tail blocks are being loaded LOADED = 1 ; // blocks are all loaded / paused LOADING_HEAD = 2 ; // head block is being loaded } // view info Block head_block = 101 ; Node schema_node = 102 ; int32 block_count = 103 ; int32 peer_count = 104 ; } Orchestration \u00b6 The orchestration of thread state between peers can be thought of as syncing a graph of blocks and files , which involves sending outbound updates and reading inbound updates. In practice, this is handled by a libp2p service. Info The thread service's protocol ID is /textile/threads/<version> . Outbound updates \u00b6 A block describing an update to a thread is signed with the author's private key and encrypted with the thread secret. The resulting message is then sent over directly to known participants. If a peer is offline, the message is again encrypted with their public key and delivered to their cafe inbox(es) . Inbound updates \u00b6 Upon receiving an update, either directly or from a cafe inbox , a peer will decrypt, verify, and locally index the inner block . Depending on thread behavior, the peer will follow the graph, downloading linked messages from the network until it no longer finds new blocks. Ideally, the update can be fast-forwarded merged, but a deterministic 3-way merge may be needed. Files DAG node referenced by the graph also need to be synced. Sync is handled by first downloading the thread's schema, which contains pinning (storage) instructions for the DAG's inner files. Finally, a peer may send back an acknowledgment to the author containing its latest graph tip (or HEAD in git terminology) if it believes they have diverged. Account Threads \u00b6 Account peers can instruct each other to create and delete threads by communicating over a special internal account thread. An additional signature is used to handle this on outbound updates, which differentiates account and non-account peer messages. The account thread is used to track account peers, profile information, and known contacts. Like normal threads, it is kept in sync between account peers. Read more about account sync here . Snapshots \u00b6 Thread snapshots enable account sync , recovery, and login from new devices. Snapshots are an encrypted representation of a thread. They contain metadata and the latest update hash, which is usually stored by cafes . Account peers will continuously search for, decrypt, and apply one another's snapshots to their local thread state. Access Control \u00b6 Control over thread access and sharing is handled by a combination of the type and sharing settings. An immutable member address \"whitelist\" gives the initiator fine-grained control. The table below outlines access patterns for the thread initiator and the whitelist members. An empty whitelist is taken to be \"everyone\", which is the default. Thread type controls read (R), annotate (A), and write (W) access: private --> initiator: RAW, whitelist: read_only --> initiator: RAW, whitelist: R public --> initiator: RAW, whitelist: RA open --> initiator: RAW, whitelist: RAW Thread sharing style controls if (Y/N) a thread can be shared: not_shared --> initiator: N, whitelist: N invite_only --> initiator: Y, whitelist: N shared --> initiator: Y, whitelist: Y` Info Access control will be moving to a more familiar, role-based design in a future release. See this GitHub issue for more. Blocks \u00b6 Blocks are the raw components of a thread. Think of them as an append-only log of thread updates where each one is hash-linked to its parent(s), forming a tree. New / recovering peers can sync history by merely traversing the hash tree. In practice, blocks are small (encrypted) protocol buffers , linked together by their IPFS CID (content id or hash). You can explore the protocol buffer definitions here . There are several block types: - MERGE: 3-way merge added. - IGNORE: A block was ignored. - FLAG: A block was flagged. - JOIN: Peer joined. - ANNOUNCE: Peer set username / avatar / inbox addresses - LEAVE: Peer left. - TEXT: Text message added. - FILES: File(s) added. - COMMENT: Comment added to another block. - LIKE: Like added to another block. Tip The Blocks API can serve Graphviz dot files which can be converted to an image as seen below. See textile blocks --help for more) A chat thread An account thread shared between eight peers Files \u00b6 The FILES block type points to off-thread data in the form of an IPLD merkle DAG. These DAGs are described by and validated against the thread's schema . Hint Any data added to a thread ends up as a file , regardless of whether or not the source data was an actual file. For example, echoing a string into a thread results in a \"file\" containing that string. Read more about files in the next section . V2 Roadmap \u00b6 Work on the next version of threads (v2) has started. The goals and individual issues for the next version can be seen here . The high-level goals have been copied below: Move to a standalone GitHub repository. Add the notion of \"intent\" to the data model so that other applications can understand a threads intended purpose. Replace the protocol buffer based linkages with IPLD so other programs can more easily traverse threads. Use a hybrid p2p and gossipsub orchestration pattern (details to come). Break HEAD into multiple categories (peers, content, annotations) Move to a role-based access model for accounts and applications. Encrypt thread snapshots with one-off keys that can be provisioned w/ rolls. Allow threads to be searchable and \"followed\" from a gateway. Support a more traditional \"feed\" mechanism (1->many vs. some->some). Use a single AES key as the thread secret, hash of key as ID. In addition to being governed by access role, peers should not be required to download thread history. Local thread interactions should use the more human-readable key and not id. Feedback welcome! Please let us know if you want to weigh in on the next version of threads.","title":"Introduction"},{"location":"concepts/threads/#requirements","text":"Threads are supposed to serve a decentralized cloud-like function for safely storing and retrieving data generated by applications for users, i.e., photos, messages, contacts, health data, etc. They were designed with the following requirements in mind: Conflict resistant: Similar to ipfs-log , a thread should facilitate a resilient, distributed state, shared among multiple members (and/or devices). Mud puddle resistant: There should be a way to safely backup a thread's state such that the owner can recover it. Offline-first: Because most people access the internet primarily from mobile devices, threads must enable a UX that works well in scenarios where connectivity is spotty, and peers are continually coming and going from the network. Secure: Peers must sign updates and encrypted with the shared key. Ideally, linkages should also be obscured by encryption.","title":"Requirements"},{"location":"concepts/threads/#implementation","text":"On the one hand, threads is a data model for representing a dataset as a hash-chain of updates. On the other hand, it's a protocol for orchestrating that state between peers. Info Threads aim to be language and platform agnostic. For this reason, Textile uses protocol buffers extensively because they are a \"language-neutral, platform-neutral, extensible mechanism for serializing structured data\".","title":"Implementation"},{"location":"concepts/threads/#model","text":"message Thread { string id = 1 ; string key = 2 ; bytes sk = 3 ; string name = 4 ; string schema = 5 ; string initiator = 6 ; Type type = 7 ; Sharing sharing = 8 ; repeated string whitelist = 9 ; State state = 10 ; string head = 11 ; // Type controls read (R), annotate (A), and write (W) access enum Type { PRIVATE = 0 ; // initiator: RAW, whitelist: READ_ONLY = 1 ; // initiator: RAW, whitelist: R PUBLIC = 2 ; // initiator: RAW, whitelist: RA OPEN = 3 ; // initiator: RAW, whitelist: RAW } // Sharing controls if (Y/N) a thread can be shared enum Sharing { NOT_SHARED = 0 ; // initiator: N, whitelist: N INVITE_ONLY = 1 ; // initiator: Y, whitelist: N SHARED = 2 ; // initiator: Y, whitelist: Y } // State indicates the loading state enum State { LOADING_TAIL = 0 ; // tail blocks are being loaded LOADED = 1 ; // blocks are all loaded / paused LOADING_HEAD = 2 ; // head block is being loaded } // view info Block head_block = 101 ; Node schema_node = 102 ; int32 block_count = 103 ; int32 peer_count = 104 ; }","title":"Model"},{"location":"concepts/threads/#orchestration","text":"The orchestration of thread state between peers can be thought of as syncing a graph of blocks and files , which involves sending outbound updates and reading inbound updates. In practice, this is handled by a libp2p service. Info The thread service's protocol ID is /textile/threads/<version> .","title":"Orchestration"},{"location":"concepts/threads/#outbound-updates","text":"A block describing an update to a thread is signed with the author's private key and encrypted with the thread secret. The resulting message is then sent over directly to known participants. If a peer is offline, the message is again encrypted with their public key and delivered to their cafe inbox(es) .","title":"Outbound updates"},{"location":"concepts/threads/#inbound-updates","text":"Upon receiving an update, either directly or from a cafe inbox , a peer will decrypt, verify, and locally index the inner block . Depending on thread behavior, the peer will follow the graph, downloading linked messages from the network until it no longer finds new blocks. Ideally, the update can be fast-forwarded merged, but a deterministic 3-way merge may be needed. Files DAG node referenced by the graph also need to be synced. Sync is handled by first downloading the thread's schema, which contains pinning (storage) instructions for the DAG's inner files. Finally, a peer may send back an acknowledgment to the author containing its latest graph tip (or HEAD in git terminology) if it believes they have diverged.","title":"Inbound updates"},{"location":"concepts/threads/#account-threads","text":"Account peers can instruct each other to create and delete threads by communicating over a special internal account thread. An additional signature is used to handle this on outbound updates, which differentiates account and non-account peer messages. The account thread is used to track account peers, profile information, and known contacts. Like normal threads, it is kept in sync between account peers. Read more about account sync here .","title":"Account Threads"},{"location":"concepts/threads/#snapshots","text":"Thread snapshots enable account sync , recovery, and login from new devices. Snapshots are an encrypted representation of a thread. They contain metadata and the latest update hash, which is usually stored by cafes . Account peers will continuously search for, decrypt, and apply one another's snapshots to their local thread state.","title":"Snapshots"},{"location":"concepts/threads/#access-control","text":"Control over thread access and sharing is handled by a combination of the type and sharing settings. An immutable member address \"whitelist\" gives the initiator fine-grained control. The table below outlines access patterns for the thread initiator and the whitelist members. An empty whitelist is taken to be \"everyone\", which is the default. Thread type controls read (R), annotate (A), and write (W) access: private --> initiator: RAW, whitelist: read_only --> initiator: RAW, whitelist: R public --> initiator: RAW, whitelist: RA open --> initiator: RAW, whitelist: RAW Thread sharing style controls if (Y/N) a thread can be shared: not_shared --> initiator: N, whitelist: N invite_only --> initiator: Y, whitelist: N shared --> initiator: Y, whitelist: Y` Info Access control will be moving to a more familiar, role-based design in a future release. See this GitHub issue for more.","title":"Access Control"},{"location":"concepts/threads/#blocks","text":"Blocks are the raw components of a thread. Think of them as an append-only log of thread updates where each one is hash-linked to its parent(s), forming a tree. New / recovering peers can sync history by merely traversing the hash tree. In practice, blocks are small (encrypted) protocol buffers , linked together by their IPFS CID (content id or hash). You can explore the protocol buffer definitions here . There are several block types: - MERGE: 3-way merge added. - IGNORE: A block was ignored. - FLAG: A block was flagged. - JOIN: Peer joined. - ANNOUNCE: Peer set username / avatar / inbox addresses - LEAVE: Peer left. - TEXT: Text message added. - FILES: File(s) added. - COMMENT: Comment added to another block. - LIKE: Like added to another block. Tip The Blocks API can serve Graphviz dot files which can be converted to an image as seen below. See textile blocks --help for more) A chat thread An account thread shared between eight peers","title":"Blocks"},{"location":"concepts/threads/#files","text":"The FILES block type points to off-thread data in the form of an IPLD merkle DAG. These DAGs are described by and validated against the thread's schema . Hint Any data added to a thread ends up as a file , regardless of whether or not the source data was an actual file. For example, echoing a string into a thread results in a \"file\" containing that string. Read more about files in the next section .","title":"Files"},{"location":"concepts/threads/#v2-roadmap","text":"Work on the next version of threads (v2) has started. The goals and individual issues for the next version can be seen here . The high-level goals have been copied below: Move to a standalone GitHub repository. Add the notion of \"intent\" to the data model so that other applications can understand a threads intended purpose. Replace the protocol buffer based linkages with IPLD so other programs can more easily traverse threads. Use a hybrid p2p and gossipsub orchestration pattern (details to come). Break HEAD into multiple categories (peers, content, annotations) Move to a role-based access model for accounts and applications. Encrypt thread snapshots with one-off keys that can be provisioned w/ rolls. Allow threads to be searchable and \"followed\" from a gateway. Support a more traditional \"feed\" mechanism (1->many vs. some->some). Use a single AES key as the thread secret, hash of key as ID. In addition to being governed by access role, peers should not be required to download thread history. Local thread interactions should use the more human-readable key and not id. Feedback welcome! Please let us know if you want to weigh in on the next version of threads.","title":"V2 Roadmap"},{"location":"concepts/threads/files/","text":"Any data added to a thread ends up as a file . Most of the time, a schema is used to define one or more types of data in a thread such that other users and applications can understand it. Currently, the following input types are available: Raw data blobs, images, EXIF data, and JSON documents. Structure \u00b6 Thread data is built into an IPLD merkle DAG structure (similar to a merkle tree ) and stored separately from update blocks on IPFS. A FILES block points to the top-level hash of a file's DAG node. The structure of files DAG nodes are determined by, and validated against, a schema . A thread can have only one schema . It has two main functions: Define a Thread's data DAG structure Define the order of mills (transforms) needed to produce this structure from the input To illustrate these functions, take a look at the builtin media schema. Each link ( large , small , thumb ) produces a resized and encrypted image by leveraging the image/resize mill. Notice that the thumb link uses the large as input. This means that large will need to milled before thumb . Once you understand how schemas and mills work, you can design complex workflows and structures for your applications. In addition to the transformed bytes, a mill will produce a file metadata object for every input: message FileMeta { string mill = 1 ; // Mill used to process the file (e.g., `/image/resize`, `/json`) string checksum = 2 ; // Pre-milled (md5) checksum of the input file string source = 3 ; // Source file CID string opts = 4 ; // md5 checksum of input mill options string hash = 5 ; // CID hash of milled file string key = 6 ; // AES encryption key string media = 7 ; // Media type (e.g., `'application/json'`, `'image/jpeg'`) string name = 8 ; // Name of the input file int64 size = 9 ; // Size of the milled file in bytes google . protobuf . Timestamp added = 10 ; // Date the file was added to the thread google . protobuf . Struct meta = 11 ; // Additional metadata repeated string targets = 12 ; // DAG targets the file belongs to (kept only by the local peer) } File metadata objects are what most applications will interact with. They are the objects listed by the Files and Feed APIs. These objects are also used internally for various functions. For example, because good encryption is not deterministic, an input's checksum is used to de-duplicate encrypted data. At this point, it should be clear that adding data to a thread results in a DAG defined by a schema. But how exactly is the data stored so as to be programmatically accessible to thread consumers? Let's take a closer look at the DAG produced by the builtin media schema... A DAG node created by the built-in \"media\" schema. Note that a files target is by default a directory of indexes ( 0 , 1 , etc.). This mean that you can add an entire folder of images (or whatever your data is) with a single update. Also, each link ( large , small , etc.) will always have the special meta and content sub-links, which correspond to the (usually encrypted) file metadata and content. Below is a JSON representation of file indexes from a single image corresponding to say, file 0 above. Example { \"links\" : { \"large\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\" , \"source\" : \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\" , \"opts\" : \"21uBAuSeQUdw5aDu5CYPxEfeiLVeuvku1T26nWtJC84C\" , \"hash\" : \"QmcvoHe333KRf3tfNKrtrM7aMUVnrB4b1JyzhSFybepvqQ\" , \"key\" : \"6cCnusZVHwp6udnKv3eYhurHK6ArJyFxCYRWTUFG8ZuMwSDwVbis9FUX3GRs\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"84222\" , \"added\" : \"2019-03-17T01:20:17.061749Z\" , \"meta\" : { \"height\" : 600 , \"width\" : 800 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"small\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"7Gu5s6sZkwU8UQWwJNnJSrVY75ZkQG4bpQSwQPwkk8aX\" , \"source\" : \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\" , \"opts\" : \"CassDcqf192MnceweJKGJvhZfrV9kB3GJRbvNPWm6raa\" , \"hash\" : \"QmZuD522rQiFE2GdbNXvzcQ3Ci6aLvvJtWz52a97iEDy9G\" , \"key\" : \"29ce4pg64Lj78GuTauQDxeqpfdNCF7fNsJauS552wfpkEjegq8kQgwiNAzJQZ\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"18145\" , \"added\" : \"2019-03-17T01:20:14.739531Z\" , \"meta\" : { \"height\" : 240 , \"width\" : 320 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"thumb\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"GzB1CWKkKQ5sWS8qQXDoBZxsfFgsgZwD9Z51qX5d7LGW\" , \"source\" : \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\" , \"opts\" : \"7aGVJ7nGgmHdqv8oiEKZ2ZbrNBv1zVP3ADSuT2sW3MwT\" , \"hash\" : \"QmUuXPhrtLJUzfuoJu7BkfiB2mGfKwq4ExTTF8gVUvAh2U\" , \"key\" : \"KfW8nTEZqh1NbAcmB51DMaooe34ujucx2DMqBwiz4xs9sDVhNDYNPratgtbf\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"2979\" , \"added\" : \"2019-03-17T01:20:17.133863Z\" , \"meta\" : { \"height\" : 75 , \"width\" : 100 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] } } } Schemas \u00b6 Schemas are used to create and validate the structure of thread files, defining their type and purpose for consumers (users and applications). For example, a photos application may create photo-based threads, a health application my create threads with medical records, etc. By treating schemas as first-class citizens, other applications are also able to understand and make use of these threads. In practice, schemas have three distinct roles: Provide instructions for how to transform or \"mill\" an input, e.g., given a photo, create three different sizes and discard the raw input (this is the media schema). Define whether or not the resulting DAG nodes should be stored (pinned) on account peers. Validate thread files from other participants, applying the same storage rules as in (2). The structure of a schema maps closely to the DAG nodes it creates (see below for examples). Highly complex nodes can be specified with dependencies between each link. A peer will automatically sort this 'graph' of dependencies (using topological sorting ) into a series of \"steps\". Each step is handled by a mill . For example, consider a thread backed by the builtin camera roll schema. The following steps must be taken to add a photo: The raw photo is sent to the blob mill (passthrough) and encrypted. The next two steps can be done in parallel. The output of (1) is stripped of EXIF data, resampled to a thumb nail size, and encrypted. EXIF data is extracted and encrypted from the output of (1). All of these output files (and their metadata) are added to IPFS in a single \"folder\" or DAG structure. Encryption \u00b6 Threads blocks and their links are always encrypted. However, file encryption is defined by schema nodes using the \"plaintext\" param and is on by default, i.e, \"plaintext\": true means \"do not encrypt this node\". The decrypting gateway can be used to decrypt files outside of a peer's API. Presets \u00b6 There are several \"preset\" or builtin schemas, available for use from client libraries. Textile Photos uses the media and camera roll presets. Media \u00b6 Used for posting media intended for sharing Example { \"name\" : \"media\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"800\" , \"quality\" : \"80\" } }, \"small\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } }, \"thumb\" : { \"use\" : \"large\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"80\" } } } } Camera Roll \u00b6 Used for backing up a mobile phone camera roll Example { \"name\" : \"camera_roll\" , \"pin\" : true , \"links\" : { \"raw\" : { \"use\" : \":file\" , \"mill\" : \"/blob\" }, \"exif\" : { \"use\" : \"raw\" , \"mill\" : \"/image/exif\" }, \"thumb\" : { \"use\" : \"raw\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } } } } Avatars \u00b6 Used by the internal account thread for user avatar images Example { \"name\" : \"avatar\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"75\" } }, \"small\" : { \"use\" : \":file\" , \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"75\" } } } } JSON Schemas \u00b6 JSON-based schemas are defined using the json_schema property: Example { \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/json\" , \"json_schema\" : /* ... */ } Simply embed your JSON Schema within the thread schemas. Examples \u00b6 A \"Person\" \u00b6 The \"Person\" example from http://json-schema.org/learn/miscellaneous-examples.html Example { \"pin\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"$id\" : \"https://example.com/person.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 } } } } Logs \u00b6 BSD syslog protocol ( https://tools.ietf.org/html/rfc3164 ) Example { \"pin\" : true , \"plaintext\" : false , \"mill\" : \"/json\" , \"json_schema\" : { \"$ref\" : \"#/definitions/Log\" , \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"definitions\" : { \"Log\" : { \"additionalProperties\" : false , \"properties\" : { \"application\" : { \"type\" : \"string\" }, \"hostname\" : { \"type\" : \"string\" }, \"message\" : { \"type\" : \"string\" }, \"pid\" : { \"type\" : \"integer\" }, \"priority\" : { \"type\" : \"integer\" }, \"timestamp\" : { \"type\" : \"string\" } }, \"required\" : [ \"priority\" , \"timestamp\" , \"hostname\" , \"application\" , \"pid\" , \"message\" ], \"type\" : \"object\" } } } } JSON Patch \u00b6 RFC 6902 A schema for tracking JSON document modifications can be built with the JSON Patch specification : JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document... The JSON schema store provides one solution : Example { \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"JSON schema for JSONPatch files\" , \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/operation\" }, \"definitions\" : { \"operation\" : { \"type\" : \"object\" , \"required\" : [ \"op\" , \"path\" ], \"allOf\" : [ { \"$ref\" : \"#/definitions/path\" } ], \"oneOf\" : [ { \"required\" : [ \"value\" ], \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"add\" , \"replace\" , \"test\" ] }, \"value\" : { \"description\" : \"The value to add, replace or test.\" } } }, { \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"remove\" ] } } }, { \"required\" : [ \"from\" ], \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"move\" , \"copy\" ] }, \"from\" : { \"description\" : \"A JSON Pointer path pointing to the location to move/copy from.\" , \"type\" : \"string\" } } } ] }, \"path\" : { \"properties\" : { \"path\" : { \"description\" : \"A JSON Pointer path.\" , \"type\" : \"string\" } } } } } } Weather \u00b6 A stream of forecasts from Dark Sky weather data Example { \"pin\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Forecast\" , \"definitions\" : { \"Alert\" : { \"required\" : [ \"description\" , \"expires\" , \"time\" , \"title\" , \"uri\" ], \"properties\" : { \"description\" : { \"type\" : \"string\" }, \"expires\" : { \"type\" : \"integer\" }, \"time\" : { \"type\" : \"integer\" }, \"title\" : { \"type\" : \"string\" }, \"uri\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Flags\" : { \"required\" : [ \"units\" ], \"properties\" : { \"units\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Forecast\" : { \"required\" : [ \"currently\" , \"code\" , \"flags\" , \"latitude\" , \"longitude\" , \"offset\" , \"timezone\" ], \"properties\" : { \"alerts\" : { \"items\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Alert\" }, \"type\" : \"array\" }, \"code\" : { \"type\" : \"integer\" }, \"currently\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Weather\" }, \"error\" : { \"type\" : \"string\" }, \"flags\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Flags\" }, \"latitude\" : { \"type\" : \"number\" }, \"longitude\" : { \"type\" : \"number\" }, \"offset\" : { \"type\" : \"number\" }, \"timezone\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Weather\" : { \"required\" : [ \"apparentTemperature\" , \"apparentTemperatureMax\" , \"apparentTemperatureMaxTime\" , \"apparentTemperatureMin\" , \"apparentTemperatureMinTime\" , \"cloudCover\" , \"dewPoint\" , \"humidity\" , \"icon\" , \"nearestStormDistance\" , \"nearestStormBearing\" , \"ozone\" , \"precipIntensity\" , \"precipIntensityMax\" , \"precipIntensityMaxTime\" , \"precipProbability\" , \"precipType\" , \"pressure\" , \"summary\" , \"sunriseTime\" , \"sunsetTime\" , \"temperature\" , \"temperatureMax\" , \"temperatureMaxTime\" , \"temperatureMin\" , \"temperatureMinTime\" , \"time\" , \"visibility\" , \"windBearing\" , \"windSpeed\" ], \"properties\" : { \"apparentTemperature\" : { \"type\" : \"number\" }, \"apparentTemperatureMax\" : { \"type\" : \"number\" }, \"apparentTemperatureMaxTime\" : { \"type\" : \"integer\" }, \"apparentTemperatureMin\" : { \"type\" : \"number\" }, \"apparentTemperatureMinTime\" : { \"type\" : \"integer\" }, \"cloudCover\" : { \"type\" : \"number\" }, \"dewPoint\" : { \"type\" : \"number\" }, \"humidity\" : { \"type\" : \"number\" }, \"icon\" : { \"type\" : \"string\" }, \"nearestStormBearing\" : { \"type\" : \"number\" }, \"nearestStormDistance\" : { \"type\" : \"number\" }, \"ozone\" : { \"type\" : \"number\" }, \"precipIntensity\" : { \"type\" : \"number\" }, \"precipIntensityMax\" : { \"type\" : \"number\" }, \"precipIntensityMaxTime\" : { \"type\" : \"integer\" }, \"precipProbability\" : { \"type\" : \"number\" }, \"precipType\" : { \"type\" : \"string\" }, \"pressure\" : { \"type\" : \"number\" }, \"summary\" : { \"type\" : \"string\" }, \"sunriseTime\" : { \"type\" : \"integer\" }, \"sunsetTime\" : { \"type\" : \"integer\" }, \"temperature\" : { \"type\" : \"number\" }, \"temperatureMax\" : { \"type\" : \"number\" }, \"temperatureMaxTime\" : { \"type\" : \"integer\" }, \"temperatureMin\" : { \"type\" : \"number\" }, \"temperatureMinTime\" : { \"type\" : \"integer\" }, \"time\" : { \"type\" : \"integer\" }, \"visibility\" : { \"type\" : \"number\" }, \"windBearing\" : { \"type\" : \"number\" }, \"windSpeed\" : { \"type\" : \"number\" } }, \"additionalProperties\" : false , \"type\" : \"object\" } } } } Mills \u00b6 The meta and content node pairs in a files DAG are generated by file mills . Mills serve three distinct purposes: Validate the input against accepted media types. The JSON mill will also validate the input against a JSON Schema . Transform the input data, e.g., encode, resample, encrypt, etc. Index a metadata object (JSON) describing the transformed output. This allows thread content to be efficiently queried and provides a mechanism for de-duplicating encrypted data. Endpoints \u00b6 blob \u00b6 Passthrough (output equals input) schema \u00b6 Validate and returns a schema (JSON) json \u00b6 Validates a JSON document against a JSON Schema image/resize \u00b6 Resizes and/or resamples an input image image/exif \u00b6 Extracts EXIF data from an input image Applications are free to define new mills. Simply conform to the Mill interface: type Result struct { File [] byte Meta map [ string ] interface {} } type Mill interface { ID () string Encrypt () bool // encryption allowed Pin () bool // pin by default AcceptMedia ( media string ) error Options ( add map [ string ] interface {}) ( string , error ) Mill ( input [] byte , name string ) ( * Result , error ) } Hint We have planned support for audio and video mills. Let us know if there are other mill types you need, e.g., PDF, XML, etc.","title":"Files"},{"location":"concepts/threads/files/#structure","text":"Thread data is built into an IPLD merkle DAG structure (similar to a merkle tree ) and stored separately from update blocks on IPFS. A FILES block points to the top-level hash of a file's DAG node. The structure of files DAG nodes are determined by, and validated against, a schema . A thread can have only one schema . It has two main functions: Define a Thread's data DAG structure Define the order of mills (transforms) needed to produce this structure from the input To illustrate these functions, take a look at the builtin media schema. Each link ( large , small , thumb ) produces a resized and encrypted image by leveraging the image/resize mill. Notice that the thumb link uses the large as input. This means that large will need to milled before thumb . Once you understand how schemas and mills work, you can design complex workflows and structures for your applications. In addition to the transformed bytes, a mill will produce a file metadata object for every input: message FileMeta { string mill = 1 ; // Mill used to process the file (e.g., `/image/resize`, `/json`) string checksum = 2 ; // Pre-milled (md5) checksum of the input file string source = 3 ; // Source file CID string opts = 4 ; // md5 checksum of input mill options string hash = 5 ; // CID hash of milled file string key = 6 ; // AES encryption key string media = 7 ; // Media type (e.g., `'application/json'`, `'image/jpeg'`) string name = 8 ; // Name of the input file int64 size = 9 ; // Size of the milled file in bytes google . protobuf . Timestamp added = 10 ; // Date the file was added to the thread google . protobuf . Struct meta = 11 ; // Additional metadata repeated string targets = 12 ; // DAG targets the file belongs to (kept only by the local peer) } File metadata objects are what most applications will interact with. They are the objects listed by the Files and Feed APIs. These objects are also used internally for various functions. For example, because good encryption is not deterministic, an input's checksum is used to de-duplicate encrypted data. At this point, it should be clear that adding data to a thread results in a DAG defined by a schema. But how exactly is the data stored so as to be programmatically accessible to thread consumers? Let's take a closer look at the DAG produced by the builtin media schema... A DAG node created by the built-in \"media\" schema. Note that a files target is by default a directory of indexes ( 0 , 1 , etc.). This mean that you can add an entire folder of images (or whatever your data is) with a single update. Also, each link ( large , small , etc.) will always have the special meta and content sub-links, which correspond to the (usually encrypted) file metadata and content. Below is a JSON representation of file indexes from a single image corresponding to say, file 0 above. Example { \"links\" : { \"large\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\" , \"source\" : \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\" , \"opts\" : \"21uBAuSeQUdw5aDu5CYPxEfeiLVeuvku1T26nWtJC84C\" , \"hash\" : \"QmcvoHe333KRf3tfNKrtrM7aMUVnrB4b1JyzhSFybepvqQ\" , \"key\" : \"6cCnusZVHwp6udnKv3eYhurHK6ArJyFxCYRWTUFG8ZuMwSDwVbis9FUX3GRs\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"84222\" , \"added\" : \"2019-03-17T01:20:17.061749Z\" , \"meta\" : { \"height\" : 600 , \"width\" : 800 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"small\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"7Gu5s6sZkwU8UQWwJNnJSrVY75ZkQG4bpQSwQPwkk8aX\" , \"source\" : \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\" , \"opts\" : \"CassDcqf192MnceweJKGJvhZfrV9kB3GJRbvNPWm6raa\" , \"hash\" : \"QmZuD522rQiFE2GdbNXvzcQ3Ci6aLvvJtWz52a97iEDy9G\" , \"key\" : \"29ce4pg64Lj78GuTauQDxeqpfdNCF7fNsJauS552wfpkEjegq8kQgwiNAzJQZ\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"18145\" , \"added\" : \"2019-03-17T01:20:14.739531Z\" , \"meta\" : { \"height\" : 240 , \"width\" : 320 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"thumb\" : { \"mill\" : \"/image/resize\" , \"checksum\" : \"GzB1CWKkKQ5sWS8qQXDoBZxsfFgsgZwD9Z51qX5d7LGW\" , \"source\" : \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\" , \"opts\" : \"7aGVJ7nGgmHdqv8oiEKZ2ZbrNBv1zVP3ADSuT2sW3MwT\" , \"hash\" : \"QmUuXPhrtLJUzfuoJu7BkfiB2mGfKwq4ExTTF8gVUvAh2U\" , \"key\" : \"KfW8nTEZqh1NbAcmB51DMaooe34ujucx2DMqBwiz4xs9sDVhNDYNPratgtbf\" , \"media\" : \"image/jpeg\" , \"name\" : \"clyde.jpg\" , \"size\" : \"2979\" , \"added\" : \"2019-03-17T01:20:17.133863Z\" , \"meta\" : { \"height\" : 75 , \"width\" : 100 }, \"targets\" : [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] } } }","title":"Structure"},{"location":"concepts/threads/files/#schemas","text":"Schemas are used to create and validate the structure of thread files, defining their type and purpose for consumers (users and applications). For example, a photos application may create photo-based threads, a health application my create threads with medical records, etc. By treating schemas as first-class citizens, other applications are also able to understand and make use of these threads. In practice, schemas have three distinct roles: Provide instructions for how to transform or \"mill\" an input, e.g., given a photo, create three different sizes and discard the raw input (this is the media schema). Define whether or not the resulting DAG nodes should be stored (pinned) on account peers. Validate thread files from other participants, applying the same storage rules as in (2). The structure of a schema maps closely to the DAG nodes it creates (see below for examples). Highly complex nodes can be specified with dependencies between each link. A peer will automatically sort this 'graph' of dependencies (using topological sorting ) into a series of \"steps\". Each step is handled by a mill . For example, consider a thread backed by the builtin camera roll schema. The following steps must be taken to add a photo: The raw photo is sent to the blob mill (passthrough) and encrypted. The next two steps can be done in parallel. The output of (1) is stripped of EXIF data, resampled to a thumb nail size, and encrypted. EXIF data is extracted and encrypted from the output of (1). All of these output files (and their metadata) are added to IPFS in a single \"folder\" or DAG structure.","title":"Schemas"},{"location":"concepts/threads/files/#encryption","text":"Threads blocks and their links are always encrypted. However, file encryption is defined by schema nodes using the \"plaintext\" param and is on by default, i.e, \"plaintext\": true means \"do not encrypt this node\". The decrypting gateway can be used to decrypt files outside of a peer's API.","title":"Encryption"},{"location":"concepts/threads/files/#presets","text":"There are several \"preset\" or builtin schemas, available for use from client libraries. Textile Photos uses the media and camera roll presets.","title":"Presets"},{"location":"concepts/threads/files/#media","text":"Used for posting media intended for sharing Example { \"name\" : \"media\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"800\" , \"quality\" : \"80\" } }, \"small\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } }, \"thumb\" : { \"use\" : \"large\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"80\" } } } }","title":"Media"},{"location":"concepts/threads/files/#camera-roll","text":"Used for backing up a mobile phone camera roll Example { \"name\" : \"camera_roll\" , \"pin\" : true , \"links\" : { \"raw\" : { \"use\" : \":file\" , \"mill\" : \"/blob\" }, \"exif\" : { \"use\" : \"raw\" , \"mill\" : \"/image/exif\" }, \"thumb\" : { \"use\" : \"raw\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } } } }","title":"Camera Roll"},{"location":"concepts/threads/files/#avatars","text":"Used by the internal account thread for user avatar images Example { \"name\" : \"avatar\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"75\" } }, \"small\" : { \"use\" : \":file\" , \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"75\" } } } }","title":"Avatars"},{"location":"concepts/threads/files/#json-schemas","text":"JSON-based schemas are defined using the json_schema property: Example { \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/json\" , \"json_schema\" : /* ... */ } Simply embed your JSON Schema within the thread schemas.","title":"JSON Schemas"},{"location":"concepts/threads/files/#examples","text":"","title":"Examples"},{"location":"concepts/threads/files/#a-person","text":"The \"Person\" example from http://json-schema.org/learn/miscellaneous-examples.html Example { \"pin\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"$id\" : \"https://example.com/person.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 } } } }","title":"A \"Person\""},{"location":"concepts/threads/files/#logs","text":"BSD syslog protocol ( https://tools.ietf.org/html/rfc3164 ) Example { \"pin\" : true , \"plaintext\" : false , \"mill\" : \"/json\" , \"json_schema\" : { \"$ref\" : \"#/definitions/Log\" , \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"definitions\" : { \"Log\" : { \"additionalProperties\" : false , \"properties\" : { \"application\" : { \"type\" : \"string\" }, \"hostname\" : { \"type\" : \"string\" }, \"message\" : { \"type\" : \"string\" }, \"pid\" : { \"type\" : \"integer\" }, \"priority\" : { \"type\" : \"integer\" }, \"timestamp\" : { \"type\" : \"string\" } }, \"required\" : [ \"priority\" , \"timestamp\" , \"hostname\" , \"application\" , \"pid\" , \"message\" ], \"type\" : \"object\" } } } }","title":"Logs"},{"location":"concepts/threads/files/#json-patch","text":"RFC 6902 A schema for tracking JSON document modifications can be built with the JSON Patch specification : JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document... The JSON schema store provides one solution : Example { \"pin\" : true , \"plaintext\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"JSON schema for JSONPatch files\" , \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/definitions/operation\" }, \"definitions\" : { \"operation\" : { \"type\" : \"object\" , \"required\" : [ \"op\" , \"path\" ], \"allOf\" : [ { \"$ref\" : \"#/definitions/path\" } ], \"oneOf\" : [ { \"required\" : [ \"value\" ], \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"add\" , \"replace\" , \"test\" ] }, \"value\" : { \"description\" : \"The value to add, replace or test.\" } } }, { \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"remove\" ] } } }, { \"required\" : [ \"from\" ], \"properties\" : { \"op\" : { \"description\" : \"The operation to perform.\" , \"type\" : \"string\" , \"enum\" : [ \"move\" , \"copy\" ] }, \"from\" : { \"description\" : \"A JSON Pointer path pointing to the location to move/copy from.\" , \"type\" : \"string\" } } } ] }, \"path\" : { \"properties\" : { \"path\" : { \"description\" : \"A JSON Pointer path.\" , \"type\" : \"string\" } } } } } }","title":"JSON Patch"},{"location":"concepts/threads/files/#weather","text":"A stream of forecasts from Dark Sky weather data Example { \"pin\" : true , \"mill\" : \"/json\" , \"json_schema\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Forecast\" , \"definitions\" : { \"Alert\" : { \"required\" : [ \"description\" , \"expires\" , \"time\" , \"title\" , \"uri\" ], \"properties\" : { \"description\" : { \"type\" : \"string\" }, \"expires\" : { \"type\" : \"integer\" }, \"time\" : { \"type\" : \"integer\" }, \"title\" : { \"type\" : \"string\" }, \"uri\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Flags\" : { \"required\" : [ \"units\" ], \"properties\" : { \"units\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Forecast\" : { \"required\" : [ \"currently\" , \"code\" , \"flags\" , \"latitude\" , \"longitude\" , \"offset\" , \"timezone\" ], \"properties\" : { \"alerts\" : { \"items\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Alert\" }, \"type\" : \"array\" }, \"code\" : { \"type\" : \"integer\" }, \"currently\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Weather\" }, \"error\" : { \"type\" : \"string\" }, \"flags\" : { \"$schema\" : \"http://json-schema.org/draft-04/schema#\" , \"$ref\" : \"#/definitions/Flags\" }, \"latitude\" : { \"type\" : \"number\" }, \"longitude\" : { \"type\" : \"number\" }, \"offset\" : { \"type\" : \"number\" }, \"timezone\" : { \"type\" : \"string\" } }, \"additionalProperties\" : false , \"type\" : \"object\" }, \"Weather\" : { \"required\" : [ \"apparentTemperature\" , \"apparentTemperatureMax\" , \"apparentTemperatureMaxTime\" , \"apparentTemperatureMin\" , \"apparentTemperatureMinTime\" , \"cloudCover\" , \"dewPoint\" , \"humidity\" , \"icon\" , \"nearestStormDistance\" , \"nearestStormBearing\" , \"ozone\" , \"precipIntensity\" , \"precipIntensityMax\" , \"precipIntensityMaxTime\" , \"precipProbability\" , \"precipType\" , \"pressure\" , \"summary\" , \"sunriseTime\" , \"sunsetTime\" , \"temperature\" , \"temperatureMax\" , \"temperatureMaxTime\" , \"temperatureMin\" , \"temperatureMinTime\" , \"time\" , \"visibility\" , \"windBearing\" , \"windSpeed\" ], \"properties\" : { \"apparentTemperature\" : { \"type\" : \"number\" }, \"apparentTemperatureMax\" : { \"type\" : \"number\" }, \"apparentTemperatureMaxTime\" : { \"type\" : \"integer\" }, \"apparentTemperatureMin\" : { \"type\" : \"number\" }, \"apparentTemperatureMinTime\" : { \"type\" : \"integer\" }, \"cloudCover\" : { \"type\" : \"number\" }, \"dewPoint\" : { \"type\" : \"number\" }, \"humidity\" : { \"type\" : \"number\" }, \"icon\" : { \"type\" : \"string\" }, \"nearestStormBearing\" : { \"type\" : \"number\" }, \"nearestStormDistance\" : { \"type\" : \"number\" }, \"ozone\" : { \"type\" : \"number\" }, \"precipIntensity\" : { \"type\" : \"number\" }, \"precipIntensityMax\" : { \"type\" : \"number\" }, \"precipIntensityMaxTime\" : { \"type\" : \"integer\" }, \"precipProbability\" : { \"type\" : \"number\" }, \"precipType\" : { \"type\" : \"string\" }, \"pressure\" : { \"type\" : \"number\" }, \"summary\" : { \"type\" : \"string\" }, \"sunriseTime\" : { \"type\" : \"integer\" }, \"sunsetTime\" : { \"type\" : \"integer\" }, \"temperature\" : { \"type\" : \"number\" }, \"temperatureMax\" : { \"type\" : \"number\" }, \"temperatureMaxTime\" : { \"type\" : \"integer\" }, \"temperatureMin\" : { \"type\" : \"number\" }, \"temperatureMinTime\" : { \"type\" : \"integer\" }, \"time\" : { \"type\" : \"integer\" }, \"visibility\" : { \"type\" : \"number\" }, \"windBearing\" : { \"type\" : \"number\" }, \"windSpeed\" : { \"type\" : \"number\" } }, \"additionalProperties\" : false , \"type\" : \"object\" } } } }","title":"Weather"},{"location":"concepts/threads/files/#mills","text":"The meta and content node pairs in a files DAG are generated by file mills . Mills serve three distinct purposes: Validate the input against accepted media types. The JSON mill will also validate the input against a JSON Schema . Transform the input data, e.g., encode, resample, encrypt, etc. Index a metadata object (JSON) describing the transformed output. This allows thread content to be efficiently queried and provides a mechanism for de-duplicating encrypted data.","title":"Mills"},{"location":"concepts/threads/files/#endpoints","text":"","title":"Endpoints"},{"location":"concepts/threads/files/#blob","text":"Passthrough (output equals input)","title":"blob"},{"location":"concepts/threads/files/#schema","text":"Validate and returns a schema (JSON)","title":"schema"},{"location":"concepts/threads/files/#json","text":"Validates a JSON document against a JSON Schema","title":"json"},{"location":"concepts/threads/files/#imageresize","text":"Resizes and/or resamples an input image","title":"image/resize"},{"location":"concepts/threads/files/#imageexif","text":"Extracts EXIF data from an input image Applications are free to define new mills. Simply conform to the Mill interface: type Result struct { File [] byte Meta map [ string ] interface {} } type Mill interface { ID () string Encrypt () bool // encryption allowed Pin () bool // pin by default AcceptMedia ( media string ) error Options ( add map [ string ] interface {}) ( string , error ) Mill ( input [] byte , name string ) ( * Result , error ) } Hint We have planned support for audio and video mills. Let us know if there are other mill types you need, e.g., PDF, XML, etc.","title":"image/exif"},{"location":"connectors/","text":"Textile Connectors are use-case specific configurations that allow developers easy onboarding of their data structures into the Textile ecosystem. Deliver archiving, sync, sharing, collaboration and data interoperability for all your users. If you've already read the Tour of Textile , everything contained in Textile Connectors should already be familiar. Here are a few of the ingredients that make up connectors. Textile peers , for handling the grunt work of encryption, identity, and coordination. Cafes , for offloading storage and processing to trustless servers in the cloud. Apps , this is where you come in, for embedding peers and connecting to cafes. Threads , for sharing interoperable data structures across peers, cafes, and apps. In this section, we'll walk you through the instructions for how to use each type of connector in Textile, starting with photos. We have been actively developing the Images & Media connector and others (Documents & Notes, Tasks & Todos, Invoices, and Analytics) are close behind. You can reach out to us anytime on our Slack , grab an appointment with one of our engineers, or send us an email inquiry .","title":"Introduction"},{"location":"connectors/documents/","text":"Textile Notes Documents come in many different formats and rely on many different standards. Textile remains flexible enough for your application to write or read any document your user wants to store. Below, we walk through how to think about each of these cases generally. Then we show an example of building on the popular note storage schema used Slate and all the note-taking apps that use it. Get Started \u00b6 Document connectors are use-case specific. However, there are many cases where applications want to store PDFs or other formats for their users. These often fall into specific connectors (e.g., purchasing or receipts for PDFs). Let's look quickly at how you can leverage Textile to connect to one of the popular notes formats used by many apps. We are going to jump right in, so if any of the below does not sound familiar, be sure to read over the Tour of Textile . The Slate Notes Schema \u00b6 We are focusing on the note storage schema used by Slate. The schema is simply this, { \"document\" : Object , \"blocks\" : Object , \"inlines\" : Object , \"rules\" : Array , } And so may result in a document that looks more like this, { \"document\" : { \"nodes\" : [ { \"match\" : { \"type\" : \"paragraph\" } } ] }, \"blocks\" : { \"list\" : { \"nodes\" : [{ \"match\" : { \"type\" : \"item\" } }] }, \"item\" : { \"parent\" : { \"type\" : \"list\" } } }, \"inlines\" : { \"emoji\" : { \"isVoid\" : true , \"nodes\" : [{ \"match\" : { \"object\" : \"text\" } }] } } } Any application using the Slate library is already using a variant of the schema shown above and so can store a user's notes (or other documents) in a way that other apps can make use of them (new UI, collaborative interfaces, etc.). Slate thread schema \u00b6 The first thing we need to do is take the above Slate schema for documents and format it as a Textile JSON schema. Here is what that looks like, with each of the primary elements in the Slate document defined as properties of the JSON object. { \"name\" : \"slatejs\" , \"mill\" : \"/json\" , \"plaintext\" : true , \"pin\" : true , \"json_schema\" : { \"$id\" : \"https://example.com/slatejs.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Hash Optimized Slate.js Schema\" , \"description\" : \"Slate.js Schema Files.\" , \"required\" : [], \"type\" : \"object\" , \"properties\" : { \"document\" : { \"type\" : \"object\" }, \"blocks\" : { \"type\" : \"object\" }, \"inlines\" : { \"type\" : \"object\" }, \"rules\" : { \"type\" : \"array\" } } } } We can save that JSON file as slate.json to use for creating a thread below. Create a Slate thread \u00b6 You can now use the above schema to quickly create Textile threads that are interoperable with other apps using the Slate library for document editing. Here's how we create our app's new thread. cmd textile threads add \"app notes\" --schema-file=slate.json --type=\"public\" --sharing=\"invite_only\" JS HTTP const schema = require ( 'slate.json' ) await textile . threads . add ( \"app notes\" , JSON . stringify ( schema ), \"your.bundle.id.version.Notes\" , \"public\" , \"invite_only\" ) React Native const schema = require ( 'slate.json' ); const threadKey = 'your.bundle.id.version.Notes' const threadName = 'app notes' const schema = { id : '' , json : JSON . stringify ( schema ), preset : AddThreadConfig . Schema . Preset . NONE } const config = { key : threadKey , name : threadName , type : Thread . Type . PUBLIC , sharing : Thread . Sharing . INVITE_ONLY , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . json = slateStringJSON ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Notes\" ; config . name = @\"app notes\" ; config . type = Thread_Type_Public ; config . sharing = Thread_Sharing_InviteOnly ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . json = slateStringJSON let config = AddThreadConfig () config . key = \"your.bundle.id.version.Notes\" config . name = \"app notes\" config . type = Thread_Type . public config . sharing = Thread_Sharing . inviteOnly config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android @todo Public notes \u00b6 The schema above used the plaintext: true option, meaning that all each note shared to a thread will not be encrypted. This can be useful for interoperability, giving you ways to allow your user to open their documents in apps not connected to Textile. If your app requires fully private notes, remove this option, or set it to false Adding new notes \u00b6 Here, let's look at how a Slate document can be converted into JSON and stored in our thread. JS HTTP const title = \"Note Title\" const json = slateNote . toJSON () const block = await textile . files . add ( json , title , \"12D3KooWSYT0SUX7f415pwjHSVUsuymnixmRtPGySmFYtWE51z8\" ) ' Using Slate's built-in JSON converter, you can extract a JSON document from your users live notes and store them in a Textile thread. Connect to existing photo threads \u00b6 If your app can display Slate notes, you can now request access to other apps that are using the Slate schema and display a user's other notes in your app. Cafe Sync & Recovery \u00b6 A critical component of the image & media connector is the ability for your users to recover their data in the future. Threads can be easily backed up by registering your app with a live cafe or by encouraging your users to manage their cafe subscriptions. When a user joins your app, either new or by linking their existing Textile wallet, you can provide a cafe for app-specific thread storage. Read our instructions on Cafe setup or try out our developer instances immediately. Apps & demos \u00b6 There are a few apps that are using document connector already. The Textile Notes mobile and desktop apps are two. You can also browse the source code for both of those apps to understand how they connect to and create a user's photo streams. Another up and coming document supporting app to check out is the Epona app .","title":"Documents"},{"location":"connectors/documents/#get-started","text":"Document connectors are use-case specific. However, there are many cases where applications want to store PDFs or other formats for their users. These often fall into specific connectors (e.g., purchasing or receipts for PDFs). Let's look quickly at how you can leverage Textile to connect to one of the popular notes formats used by many apps. We are going to jump right in, so if any of the below does not sound familiar, be sure to read over the Tour of Textile .","title":"Get Started"},{"location":"connectors/documents/#the-slate-notes-schema","text":"We are focusing on the note storage schema used by Slate. The schema is simply this, { \"document\" : Object , \"blocks\" : Object , \"inlines\" : Object , \"rules\" : Array , } And so may result in a document that looks more like this, { \"document\" : { \"nodes\" : [ { \"match\" : { \"type\" : \"paragraph\" } } ] }, \"blocks\" : { \"list\" : { \"nodes\" : [{ \"match\" : { \"type\" : \"item\" } }] }, \"item\" : { \"parent\" : { \"type\" : \"list\" } } }, \"inlines\" : { \"emoji\" : { \"isVoid\" : true , \"nodes\" : [{ \"match\" : { \"object\" : \"text\" } }] } } } Any application using the Slate library is already using a variant of the schema shown above and so can store a user's notes (or other documents) in a way that other apps can make use of them (new UI, collaborative interfaces, etc.).","title":"The Slate Notes Schema"},{"location":"connectors/documents/#slate-thread-schema","text":"The first thing we need to do is take the above Slate schema for documents and format it as a Textile JSON schema. Here is what that looks like, with each of the primary elements in the Slate document defined as properties of the JSON object. { \"name\" : \"slatejs\" , \"mill\" : \"/json\" , \"plaintext\" : true , \"pin\" : true , \"json_schema\" : { \"$id\" : \"https://example.com/slatejs.schema.json\" , \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Hash Optimized Slate.js Schema\" , \"description\" : \"Slate.js Schema Files.\" , \"required\" : [], \"type\" : \"object\" , \"properties\" : { \"document\" : { \"type\" : \"object\" }, \"blocks\" : { \"type\" : \"object\" }, \"inlines\" : { \"type\" : \"object\" }, \"rules\" : { \"type\" : \"array\" } } } } We can save that JSON file as slate.json to use for creating a thread below.","title":"Slate thread schema"},{"location":"connectors/documents/#create-a-slate-thread","text":"You can now use the above schema to quickly create Textile threads that are interoperable with other apps using the Slate library for document editing. Here's how we create our app's new thread. cmd textile threads add \"app notes\" --schema-file=slate.json --type=\"public\" --sharing=\"invite_only\" JS HTTP const schema = require ( 'slate.json' ) await textile . threads . add ( \"app notes\" , JSON . stringify ( schema ), \"your.bundle.id.version.Notes\" , \"public\" , \"invite_only\" ) React Native const schema = require ( 'slate.json' ); const threadKey = 'your.bundle.id.version.Notes' const threadName = 'app notes' const schema = { id : '' , json : JSON . stringify ( schema ), preset : AddThreadConfig . Schema . Preset . NONE } const config = { key : threadKey , name : threadName , type : Thread . Type . PUBLIC , sharing : Thread . Sharing . INVITE_ONLY , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . json = slateStringJSON ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Notes\" ; config . name = @\"app notes\" ; config . type = Thread_Type_Public ; config . sharing = Thread_Sharing_InviteOnly ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . json = slateStringJSON let config = AddThreadConfig () config . key = \"your.bundle.id.version.Notes\" config . name = \"app notes\" config . type = Thread_Type . public config . sharing = Thread_Sharing . inviteOnly config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android @todo","title":"Create a Slate thread"},{"location":"connectors/documents/#public-notes","text":"The schema above used the plaintext: true option, meaning that all each note shared to a thread will not be encrypted. This can be useful for interoperability, giving you ways to allow your user to open their documents in apps not connected to Textile. If your app requires fully private notes, remove this option, or set it to false","title":"Public notes"},{"location":"connectors/documents/#adding-new-notes","text":"Here, let's look at how a Slate document can be converted into JSON and stored in our thread. JS HTTP const title = \"Note Title\" const json = slateNote . toJSON () const block = await textile . files . add ( json , title , \"12D3KooWSYT0SUX7f415pwjHSVUsuymnixmRtPGySmFYtWE51z8\" ) ' Using Slate's built-in JSON converter, you can extract a JSON document from your users live notes and store them in a Textile thread.","title":"Adding new notes"},{"location":"connectors/documents/#connect-to-existing-photo-threads","text":"If your app can display Slate notes, you can now request access to other apps that are using the Slate schema and display a user's other notes in your app.","title":"Connect to existing photo threads"},{"location":"connectors/documents/#cafe-sync-recovery","text":"A critical component of the image & media connector is the ability for your users to recover their data in the future. Threads can be easily backed up by registering your app with a live cafe or by encouraging your users to manage their cafe subscriptions. When a user joins your app, either new or by linking their existing Textile wallet, you can provide a cafe for app-specific thread storage. Read our instructions on Cafe setup or try out our developer instances immediately.","title":"Cafe Sync &amp; Recovery"},{"location":"connectors/documents/#apps-demos","text":"There are a few apps that are using document connector already. The Textile Notes mobile and desktop apps are two. You can also browse the source code for both of those apps to understand how they connect to and create a user's photo streams. Another up and coming document supporting app to check out is the Epona app .","title":"Apps &amp; demos"},{"location":"connectors/games/","text":"IPFS Tag Build the next decentralized game using any of Textile's SDKs. The Textile SDKs and game connectors allow developers to create new real-world and digital experiences using the IPFS network, Textile user profiles, shared databases, and secure communications. Get Started \u00b6 To demonstrate some of the capabilities of the Textile SDK for game development, we've provided a decentralized game example, IPFS Tag. IPFS Tag uses Textile to allow a group of in-person users to create and join a real-world game of tag. Textile allows each participant to create an identity, join the game, chat, see current game state, and play. IPFS Tag was implemented using Textile's React Native SDK, and we've also created a live workshop that uses only shell and the Textile Daemon (no mobile components needed). Here, we'll walk through each of the data connectors used to build the game, focusing on the mobile variant. In-game profiles \u00b6 IPFS Tag keeps profiles light-weight, only requiring a display name for each user. To create a profile, the game uses the Textile Account tools, just like Textile Photos and other apps, but skips selection, since the game won't be displaying those images. Textile Profile cmd textile profile set --name=\"Clyde\" JavaScript await textile . profile . setName ( \"Clyde\" ) React Native await textile . profile . setName ( \"Clyde\" ) Objective-C NSError * error ; [ Textile . instance . profile setName : @\"Clyde\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? Textile . instance (). profile . setName ( \"Clyde\" , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android Textile . instance (). profile . setName ( \"Clyde\" ); Success ok Textile profiles come configured with cryptographic identity and verification tools. This means that an app can quickly verify that a user is who they claim to be and that user genuinely created any transaction. This helps verify the source of new activities and ensuring all players are playing by the rules of your game! Avatars \u00b6 Avatars are a must in so many games. Using the Textile profile APIs, your app can easily help users change their usernames and avatars and update the rest of the gamers with that data. cmd textile profile set --avatar=\"path/to/an/image\" JavaScript const form = new FormData () form . append ( 'file' , file , file . name ) // file is File object or raw Buffer/Blob await textile . profile . setAvatar ( form ) React Native @ todo Objective-C @ todo Swift @ todo Android @todo Success ok Global contact index \u00b6 Help your users find one-another by leveraging Textile's decentralized search index of contacts. cmd textile contacts search --name=\"Andrew\" JavaScript // The js-http-client returns a `ReadableStream` to be accessed by the caller // See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream for details const stream = await textile . contacts . search ( \"Andrew\" ) React Native @ todo Objective-C NSError * error ; QueryOptions * options = [[ QueryOptions alloc ] init ]; options . wait = 10 ; options . limit = 1 ; ContactQuery * query = [[ ContactQuery alloc ] init ]; query . name = @\"Andrew\" ; MobileSearchHandle * handle = [ Textile . instance . contacts search : query options : options error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let options = QueryOptions () options . wait = 10 options . limit = 1 let query = ContactQuery () query . name = \"Andrew\" let handle = Textile . instance (). contacts . search ( query , options : options , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android QueryOptions options = QueryOptions . newBuilder () . setWait ( 10 ) . setLimit ( 1 ) . build (); ContactQuery query = ContactQuery . newBuilder () . setName ( \"Andrew\" ) . build (); SearchHandle handle = Textile . instance (). contacts . search ( query , options ); Success { \"id\" : \"P8FxdgZ1rWxaQ4DrmMBADuYTz4XGpQeThJYxfL2X4WN89hP8\" , \"date\" : \"2019-04-12T21:41:28.071460350Z\" , \"value\" : { \"@type\" : \"/Contact\" , \"address\" : \"P8FxdgZ1rWxaQ4DrmMBADuYTz4XGpQeThJYxfL2X4WN89hP8\" , \"name\" : \"devandrewwww\" , \"avatar\" : \"QmQwmPninpCRdkAhbPwKaf7hAUwkTb2wiwupcgnsMp5yW5\" , \"peers\" : [ /* ... */ ] } } { \"id\" : \"P8rW2RCMn75Dcb96Eiyg8mirb8nL4ruCumvJxKZRfAdpE5fG\" , \"date\" : \"2019-02-08T02:59:35.082729740Z\" , \"value\" : { \"@type\" : \"/Contact\" , \"address\" : \"P8rW2RCMn75Dcb96Eiyg8mirb8nL4ruCumvJxKZRfAdpE5fG\" , \"name\" : \"andrew knees and toes, knees and toes\" , \"avatar\" : \"QmRLnTHdvg4rAh1AKJaHydAZ42sgygLNdvvA7aMwaRY5SK\" , \"peers\" : [ /* ... */ ] } } /* ... */ User authentication \u00b6 Textile doesn't force you to use any single authentication system, we encourage you to use what's best for your app. The Textile libraries and data wallet are meant to work well with any user-management system you need to use. The sky is the limit! Game state sync \u00b6 Next, a user will need to create a game, and the state of that game will need to be synchronized between all players. This is handled by a game thread that is generated just for this game. In the demo app, we kept thread configurations minimal, allowing any number of users to be added to the thread later. However, in your game, you may also want to take advantage of read-only permissions for cases where the game creator will be the only one sending game updates to users, or whitelists when all possible members of the thread are known at creation time. Globally shared app state in a game of tag Info Read our in-depth documentation on threads and how to create them. Also, follow along with our threads v2 roadmap to learn about what they will be able to do next. Create a new database \u00b6 A game can have any number of threads to be used by players. Each thread can customize properties such as who can read or write, any data that shouldn't be encrypted, who can join, and who can invite new members to the database (to read or write accordingly). For example, to create the game of tag, each new game becomes a new thread that is kept for the duration of the game and any subsequent rematches. In the game of tag, any user can invite new users at any time. cmd textile threads add \"app notes\" --schema-file=tag_game.json --type=\"public\" --sharing=\"invite_only\" JS HTTP const schema = require ( 'tag_game.json' ) await textile . threads . add ( \"app notes\" , JSON . stringify ( schema ), \"your.bundle.id.version.Tag\" , \"public\" , \"invite_only\" ) React Native const schema = require ( 'tag_game.json' ); const threadKey = 'your.bundle.id.version.Tag' const threadName = 'game-of-tag' const schema = { id : '' , json : JSON . stringify ( schema ), preset : AddThreadConfig . Schema . Preset . NONE } const config = { key : threadKey , name : threadName , type : Thread . Type . PUBLIC , sharing : Thread . Sharing . INVITE_ONLY , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . json = tagStringJSON ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Notes\" ; config . name = @\"app notes\" ; config . type = Thread_Type_Public ; config . sharing = Thread_Sharing_InviteOnly ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . json = tagStringJSON let config = AddThreadConfig () config . key = \"your.bundle.id.version.Notes\" config . name = \"app notes\" config . type = Thread_Type . public config . sharing = Thread_Sharing . inviteOnly config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android @todo The schema we use was designed to allow for basic game events needed in a game of tag. Those included Game Start with Duration, Tag Events, and Rematch Requests. Here's what that basic schema looks like, Schemas \u00b6 Schemas allow you to define the data model of each thread. By restricting what types or structure of data your app will write, you can ensure everyone is playing by the same set of rules! Here's what the schema looks like for a simple game of tag. const tagSchema = { \"name\" : \"cmd-line-tag\" , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"CMD Line Tag Mechanics\" , \"description\" : \"Possible events in cmd line tag.\" , \"type\" : \"object\" , \"required\" : [ \"event\" ], \"properties\" : { \"event\" : { \"type\" : \"string\" , \"description\" : \"event type identifier, either tag or start\" }, \"target\" : { \"type\" : \"string\" , \"description\" : \"peer-id of the person getting tagged\" }, \"source\" : { \"type\" : \"string\" , \"description\" : \"peer-id of the person doing the tagging\" }, \"duration\" : { \"type\" : \"number\" , \"description\" : \"game duration, required by start events\" } } } } App-based rules and validation \u00b6 The data schemas and rules about who can read or write data will only go so far for game development, but there is no limit to how you combine them with in-game rule systems. Additionally, you can combine your own rule systems with the cryptographic validation methods available through Textile. Let's take a look at how we've done this in our example game of tag. In our game of tag, the actual tagging event happens as a new entry in the database. The app itself ensures that the only person that can write a tag event is the person getting tagged. That can be validated by their cryptographic signature. Using the schema above, we can encode a rule in JavaScript as follows, where we easily ignore any falsified entries in our thread. if ( row . event === 'tag' && row . source === row . user . address && actor === row . target ) { const tagger : IContact = await Textile . contacts . get ( row . source ) const tagged : IContact = await Textile . contacts . get ( row . target ) console . log ({ tagger : tagger , tagged : tagged , timestamp : file . date . seconds }) } Thread limits \u00b6 Apps aren't limited to a set number of threads. Developers can easily create ephemeral threads, private app threads, and long-term threads for their users. Content distribution \u00b6 Levels & assets \u00b6 Threads also provide a tool to distribute new game content to users. This can be done by creating read-only Threads owned by the app developer and shared to every new game installation. Here is an example of a thread schema designed to allow the developer to distribute content to all the existing subscribers securely. const tagSchema = { \"name\" : \"app-thread\" , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"Levels\" , \"description\" : \"In-app content distribution for new levels.\" , \"type\" : \"object\" , \"required\" : [ \"event\" ], \"properties\" : { \"version\" : { \"type\" : \"string\" , \"description\" : \"A version ID.\" }, \"title\" : { \"type\" : \"string\" , \"description\" : \"Content title.\" }, \"address\" : { \"type\" : \"string\" , \"description\" : \"IPFS address of data.\" } } } } Leader boards \u00b6 Similarly, developers can embed global feeds such as leaderboards, where all members of the game can follow (but not modify) information such as leaders, scores, or achievements. In-game chat \u00b6 Many games rely on good group-based chat directly available within the game environment. In Textile, every thread you create can host a light-weight, end-to-end encrypted chat among participants with write capabilities. This means you can create chat rooms for small subsets of players or larger groups of players that can enter and leave a channel at any time. IPFS Tag includes a private chat in every game Once a user has been added to a thread, transmitting a chat based message to other members is simple. cmd textile messages add <thread-id> \"hello?\" JavaScript await textile . messages . add ( \"<thread-id>\" , \"hello?\" ) React Native await textile . messages . add ( \"<thread-id>\" , \"hello?\" ) Objective-C NSError * error ; [ Textile . instance . messages add : @\"<thread-id>\" body : @\"hello?\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? Textile . instance (). messages . add ( \"<thread-id>\" , body : \"hello?\" , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android Textile . instance (). messages . add ( \"<thread-id>\" , \"hello?\" ); Success { \"block\" : \"QmZPWbydtcuZLtbd6cqrLuGSEzSs2C9P1f5nH3Ycu41UfS\" , \"body\" : \"hello?\" , \"comments\" : [], \"date\" : \"2019-04-20T20:55:05.278995Z\" , \"likes\" : [], \"user\" : { \"address\" : \"P8wW5FYs2ANDan2DV8D45XWKtFFYNTMY8RgLCRcQHjyPZe5j\" , \"avatar\" : \"Qmea7R7cCSSkRZ5Jammj8xvkE44YvjDWz3aBuWm4PNcyf5\" , \"name\" : \"Clyde\" } } Build your game today \u00b6 Have an idea or project you want to build on Textile? Drop us a line on the Textile Developer Slack channel. We'd be happy to help or to highlight your project to the community.","title":"Games"},{"location":"connectors/games/#get-started","text":"To demonstrate some of the capabilities of the Textile SDK for game development, we've provided a decentralized game example, IPFS Tag. IPFS Tag uses Textile to allow a group of in-person users to create and join a real-world game of tag. Textile allows each participant to create an identity, join the game, chat, see current game state, and play. IPFS Tag was implemented using Textile's React Native SDK, and we've also created a live workshop that uses only shell and the Textile Daemon (no mobile components needed). Here, we'll walk through each of the data connectors used to build the game, focusing on the mobile variant.","title":"Get Started"},{"location":"connectors/games/#in-game-profiles","text":"IPFS Tag keeps profiles light-weight, only requiring a display name for each user. To create a profile, the game uses the Textile Account tools, just like Textile Photos and other apps, but skips selection, since the game won't be displaying those images. Textile Profile cmd textile profile set --name=\"Clyde\" JavaScript await textile . profile . setName ( \"Clyde\" ) React Native await textile . profile . setName ( \"Clyde\" ) Objective-C NSError * error ; [ Textile . instance . profile setName : @\"Clyde\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? Textile . instance (). profile . setName ( \"Clyde\" , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android Textile . instance (). profile . setName ( \"Clyde\" ); Success ok Textile profiles come configured with cryptographic identity and verification tools. This means that an app can quickly verify that a user is who they claim to be and that user genuinely created any transaction. This helps verify the source of new activities and ensuring all players are playing by the rules of your game!","title":"In-game profiles"},{"location":"connectors/games/#avatars","text":"Avatars are a must in so many games. Using the Textile profile APIs, your app can easily help users change their usernames and avatars and update the rest of the gamers with that data. cmd textile profile set --avatar=\"path/to/an/image\" JavaScript const form = new FormData () form . append ( 'file' , file , file . name ) // file is File object or raw Buffer/Blob await textile . profile . setAvatar ( form ) React Native @ todo Objective-C @ todo Swift @ todo Android @todo Success ok","title":"Avatars"},{"location":"connectors/games/#global-contact-index","text":"Help your users find one-another by leveraging Textile's decentralized search index of contacts. cmd textile contacts search --name=\"Andrew\" JavaScript // The js-http-client returns a `ReadableStream` to be accessed by the caller // See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream for details const stream = await textile . contacts . search ( \"Andrew\" ) React Native @ todo Objective-C NSError * error ; QueryOptions * options = [[ QueryOptions alloc ] init ]; options . wait = 10 ; options . limit = 1 ; ContactQuery * query = [[ ContactQuery alloc ] init ]; query . name = @\"Andrew\" ; MobileSearchHandle * handle = [ Textile . instance . contacts search : query options : options error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let options = QueryOptions () options . wait = 10 options . limit = 1 let query = ContactQuery () query . name = \"Andrew\" let handle = Textile . instance (). contacts . search ( query , options : options , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android QueryOptions options = QueryOptions . newBuilder () . setWait ( 10 ) . setLimit ( 1 ) . build (); ContactQuery query = ContactQuery . newBuilder () . setName ( \"Andrew\" ) . build (); SearchHandle handle = Textile . instance (). contacts . search ( query , options ); Success { \"id\" : \"P8FxdgZ1rWxaQ4DrmMBADuYTz4XGpQeThJYxfL2X4WN89hP8\" , \"date\" : \"2019-04-12T21:41:28.071460350Z\" , \"value\" : { \"@type\" : \"/Contact\" , \"address\" : \"P8FxdgZ1rWxaQ4DrmMBADuYTz4XGpQeThJYxfL2X4WN89hP8\" , \"name\" : \"devandrewwww\" , \"avatar\" : \"QmQwmPninpCRdkAhbPwKaf7hAUwkTb2wiwupcgnsMp5yW5\" , \"peers\" : [ /* ... */ ] } } { \"id\" : \"P8rW2RCMn75Dcb96Eiyg8mirb8nL4ruCumvJxKZRfAdpE5fG\" , \"date\" : \"2019-02-08T02:59:35.082729740Z\" , \"value\" : { \"@type\" : \"/Contact\" , \"address\" : \"P8rW2RCMn75Dcb96Eiyg8mirb8nL4ruCumvJxKZRfAdpE5fG\" , \"name\" : \"andrew knees and toes, knees and toes\" , \"avatar\" : \"QmRLnTHdvg4rAh1AKJaHydAZ42sgygLNdvvA7aMwaRY5SK\" , \"peers\" : [ /* ... */ ] } } /* ... */","title":"Global contact index"},{"location":"connectors/games/#user-authentication","text":"Textile doesn't force you to use any single authentication system, we encourage you to use what's best for your app. The Textile libraries and data wallet are meant to work well with any user-management system you need to use. The sky is the limit!","title":"User authentication"},{"location":"connectors/games/#game-state-sync","text":"Next, a user will need to create a game, and the state of that game will need to be synchronized between all players. This is handled by a game thread that is generated just for this game. In the demo app, we kept thread configurations minimal, allowing any number of users to be added to the thread later. However, in your game, you may also want to take advantage of read-only permissions for cases where the game creator will be the only one sending game updates to users, or whitelists when all possible members of the thread are known at creation time. Globally shared app state in a game of tag Info Read our in-depth documentation on threads and how to create them. Also, follow along with our threads v2 roadmap to learn about what they will be able to do next.","title":"Game state sync"},{"location":"connectors/games/#create-a-new-database","text":"A game can have any number of threads to be used by players. Each thread can customize properties such as who can read or write, any data that shouldn't be encrypted, who can join, and who can invite new members to the database (to read or write accordingly). For example, to create the game of tag, each new game becomes a new thread that is kept for the duration of the game and any subsequent rematches. In the game of tag, any user can invite new users at any time. cmd textile threads add \"app notes\" --schema-file=tag_game.json --type=\"public\" --sharing=\"invite_only\" JS HTTP const schema = require ( 'tag_game.json' ) await textile . threads . add ( \"app notes\" , JSON . stringify ( schema ), \"your.bundle.id.version.Tag\" , \"public\" , \"invite_only\" ) React Native const schema = require ( 'tag_game.json' ); const threadKey = 'your.bundle.id.version.Tag' const threadName = 'game-of-tag' const schema = { id : '' , json : JSON . stringify ( schema ), preset : AddThreadConfig . Schema . Preset . NONE } const config = { key : threadKey , name : threadName , type : Thread . Type . PUBLIC , sharing : Thread . Sharing . INVITE_ONLY , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . json = tagStringJSON ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Notes\" ; config . name = @\"app notes\" ; config . type = Thread_Type_Public ; config . sharing = Thread_Sharing_InviteOnly ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . json = tagStringJSON let config = AddThreadConfig () config . key = \"your.bundle.id.version.Notes\" config . name = \"app notes\" config . type = Thread_Type . public config . sharing = Thread_Sharing . inviteOnly config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android @todo The schema we use was designed to allow for basic game events needed in a game of tag. Those included Game Start with Duration, Tag Events, and Rematch Requests. Here's what that basic schema looks like,","title":"Create a new database"},{"location":"connectors/games/#schemas","text":"Schemas allow you to define the data model of each thread. By restricting what types or structure of data your app will write, you can ensure everyone is playing by the same set of rules! Here's what the schema looks like for a simple game of tag. const tagSchema = { \"name\" : \"cmd-line-tag\" , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"CMD Line Tag Mechanics\" , \"description\" : \"Possible events in cmd line tag.\" , \"type\" : \"object\" , \"required\" : [ \"event\" ], \"properties\" : { \"event\" : { \"type\" : \"string\" , \"description\" : \"event type identifier, either tag or start\" }, \"target\" : { \"type\" : \"string\" , \"description\" : \"peer-id of the person getting tagged\" }, \"source\" : { \"type\" : \"string\" , \"description\" : \"peer-id of the person doing the tagging\" }, \"duration\" : { \"type\" : \"number\" , \"description\" : \"game duration, required by start events\" } } } }","title":"Schemas"},{"location":"connectors/games/#app-based-rules-and-validation","text":"The data schemas and rules about who can read or write data will only go so far for game development, but there is no limit to how you combine them with in-game rule systems. Additionally, you can combine your own rule systems with the cryptographic validation methods available through Textile. Let's take a look at how we've done this in our example game of tag. In our game of tag, the actual tagging event happens as a new entry in the database. The app itself ensures that the only person that can write a tag event is the person getting tagged. That can be validated by their cryptographic signature. Using the schema above, we can encode a rule in JavaScript as follows, where we easily ignore any falsified entries in our thread. if ( row . event === 'tag' && row . source === row . user . address && actor === row . target ) { const tagger : IContact = await Textile . contacts . get ( row . source ) const tagged : IContact = await Textile . contacts . get ( row . target ) console . log ({ tagger : tagger , tagged : tagged , timestamp : file . date . seconds }) }","title":"App-based rules and validation"},{"location":"connectors/games/#thread-limits","text":"Apps aren't limited to a set number of threads. Developers can easily create ephemeral threads, private app threads, and long-term threads for their users.","title":"Thread limits"},{"location":"connectors/games/#content-distribution","text":"","title":"Content distribution"},{"location":"connectors/games/#levels-assets","text":"Threads also provide a tool to distribute new game content to users. This can be done by creating read-only Threads owned by the app developer and shared to every new game installation. Here is an example of a thread schema designed to allow the developer to distribute content to all the existing subscribers securely. const tagSchema = { \"name\" : \"app-thread\" , \"mill\" : \"/json\" , \"json_schema\" : { \"title\" : \"Levels\" , \"description\" : \"In-app content distribution for new levels.\" , \"type\" : \"object\" , \"required\" : [ \"event\" ], \"properties\" : { \"version\" : { \"type\" : \"string\" , \"description\" : \"A version ID.\" }, \"title\" : { \"type\" : \"string\" , \"description\" : \"Content title.\" }, \"address\" : { \"type\" : \"string\" , \"description\" : \"IPFS address of data.\" } } } }","title":"Levels &amp; assets"},{"location":"connectors/games/#leader-boards","text":"Similarly, developers can embed global feeds such as leaderboards, where all members of the game can follow (but not modify) information such as leaders, scores, or achievements.","title":"Leader boards"},{"location":"connectors/games/#in-game-chat","text":"Many games rely on good group-based chat directly available within the game environment. In Textile, every thread you create can host a light-weight, end-to-end encrypted chat among participants with write capabilities. This means you can create chat rooms for small subsets of players or larger groups of players that can enter and leave a channel at any time. IPFS Tag includes a private chat in every game Once a user has been added to a thread, transmitting a chat based message to other members is simple. cmd textile messages add <thread-id> \"hello?\" JavaScript await textile . messages . add ( \"<thread-id>\" , \"hello?\" ) React Native await textile . messages . add ( \"<thread-id>\" , \"hello?\" ) Objective-C NSError * error ; [ Textile . instance . messages add : @\"<thread-id>\" body : @\"hello?\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? Textile . instance (). messages . add ( \"<thread-id>\" , body : \"hello?\" , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android Textile . instance (). messages . add ( \"<thread-id>\" , \"hello?\" ); Success { \"block\" : \"QmZPWbydtcuZLtbd6cqrLuGSEzSs2C9P1f5nH3Ycu41UfS\" , \"body\" : \"hello?\" , \"comments\" : [], \"date\" : \"2019-04-20T20:55:05.278995Z\" , \"likes\" : [], \"user\" : { \"address\" : \"P8wW5FYs2ANDan2DV8D45XWKtFFYNTMY8RgLCRcQHjyPZe5j\" , \"avatar\" : \"Qmea7R7cCSSkRZ5Jammj8xvkE44YvjDWz3aBuWm4PNcyf5\" , \"name\" : \"Clyde\" } }","title":"In-game chat"},{"location":"connectors/games/#build-your-game-today","text":"Have an idea or project you want to build on Textile? Drop us a line on the Textile Developer Slack channel. We'd be happy to help or to highlight your project to the community.","title":"Build your game today"},{"location":"connectors/images/","text":"Textile Photos If you are building a consumer app, it's highly likely you encounter the need to store and retrieve images for your user at some point. The Textile image & media connector is an excellent place for you to start. Textile has already designed a robust system for user photo storage and recovery, and all your app needs to do is plug into it. Get Started \u00b6 Handling images for your users falls generally into two use-cases. First, images need to be store in full-resolution form, typically useful for backup & recovery or editing apps. Second, images need to be formatted for efficient distribution to other users or on the web. Here, we'll walk through setting up each use-case in your app. Images & media threads \u00b6 Threads help a user grant access to their photos & media to new applications, share individual photos to new users, or sync all their data to trusted peers like their desktop or store it encrypted on the cafes. We covered threads in depth in the Tour of Textile and in the Threads Introduction pages. We recommend reviewing those two documents if you haven't already. Let's look apps can create new image-based threads in their app or connect to existing ones the user is already maintaining in other apps. Create new photo threads \u00b6 Full resolution images \u00b6 To handle full-res images, your app can connect to existing user threads (such as those created in Textile Photos) or create new ones. Every Textile peer already knows how to create and talk to Threads of this type. Here is how you would create one of these threads in your app. cmd textile threads add \"New Shots\" --key=\"your.bundle.id.version.CameraRoll\" --cameraRoll JS HTTP const thread = await textile . threads . add ( \"New Shots\" , 'cameraRoll' ) React Native const threadKey = 'your.bundle.id.version.CameraRoll' const threadName = 'Dogs' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . CAMERA_ROLL } const config = { key : threadKey , name : threadName , type : Thread . Type . OPEN , sharing : Thread . Sharing . SHARED , schema : schema , force : false , members : [] } Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_CameraRoll ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.CameraRoll\" ; config . name = @\"New Shots\" ; config . type = Thread_Type_Open ; config . sharing = Thread_Sharing_Shared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . cameraRoll let config = AddThreadConfig () config . key = \"your.bundle.id.version.CameraRoll\" config . name = \"New Shots\" config . type = Thread_Type . open config . sharing = Thread_Sharing . shared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . CAMERA_ROLL ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.CameraRoll\" ) . setName ( \"New Shots\" ) . setType ( Thread . Type . OPEN ) . setSharing ( Thread . Sharing . SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config ); The app posting new photos to this thread doesn't need to handle sampling raw images proactively, instead, the Textile peer has the file milling logic to transform any input image into the output schema. Here's what the schema looks like, { \"name\" : \"camera_roll\" , \"pin\" : true , \"links\" : { \"raw\" : { \"use\" : \":file\" , \"mill\" : \"/blob\" }, \"exif\" : { \"use\" : \"raw\" , \"mill\" : \"/image/exif\" }, \"thumb\" : { \"use\" : \"raw\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } } } } Here are the major ideas of the schema and how to think about them in your app. Input photos will be transformed into 3 files: Raw, EXIF metadata, and thumbnail. Thumbnails will be pinned locally for fast lookup. Raw files will keep the input resolution. Thumbnails will be max 320px wide and have JPEG quality reduction to save storage space. Sharable images \u00b6 Sharable image threads are optimized for p2p or group sharing of content. Every Textile peer contains a schema (and mill) for handling these kinds of threads, simply named, media . You can create a new media thread as follows. cmd textile threads add \"New Shares\" --media JS HTTP const thread = await textile . threads . add ( \"New Shares\" , 'media' ) React Native const threadKey = 'your.bundle.id.version.Media' const threadName = 'Dogs' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . MEDIA } const config = { key : threadKey , name : threadName , type : Thread . Type . OPEN , sharing : Thread . Sharing . SHARED , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_Media ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Media\" ; config . name = @\"New Shots\" ; config . type = Thread_Type_Open ; config . sharing = Thread_Sharing_Shared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . media let config = AddThreadConfig () config . key = \"your.bundle.id.version.Media\" config . name = \"New Shots\" config . type = Thread_Type . open config . sharing = Thread_Sharing . shared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . MEDIA ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.Media\" ) . setName ( \"New Shots\" ) . setType ( Thread . Type . OPEN ) . setSharing ( Thread . Sharing . SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config ); Like the CameraRoll thread types, Media thread types contain a local file mill that will resample any input image to make it share-ready. Here is what the thread's schema looks like. { \"name\" : \"media\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"800\" , \"quality\" : \"80\" } }, \"small\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } }, \"thumb\" : { \"use\" : \"large\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"80\" } } } } Unlike the CameraRoll schema, you can see that images are resampled into a few different variants but the original, full-resolution file is not maintained. You may also notice that the small format of a Media thread is the same format as the thumbnail in the CameraRoll thread. This can be helpful if you add a photo to multiple threads, as there is the opportunity to deduplicate this content. Connect to existing photo threads \u00b6 In many cases, it is just as easy for your app to connect to a user's existing photo threads. Connecting to an existing stream can give your app the ability to provide value across many more photos or simplify photo selection, editing, or sharing workflows. Requesting permission to a user's existing Media or CameraRoll threads is straightforward in your app and is expected to be released to production in the first half of July. Subscribe to this Issue to track our progress on the feature. Beyond improving the experience in your app, leveraging existing user threads can help reduce the overall data you or your users are required to store. IPFS based content addressing allows photos to be shared across all of a user's apps without the need to ever duplicate that content. Created unencrypted content \u00b6 There are some use-cases where media created by a user is best shared in a decrypted format. Every Textile thread supports encrypted raw file content by default, but apps have the ability to create encrypted threads that contain plaintext file content. Read more about thread encryption here . Cafe Sync & Recovery \u00b6 A critical component of the image & media connector is the ability for your users to recover their data in the future. Threads can be easily backed up by registering your app with a live cafe or by encouraging your users to manage their cafe subscriptions. When a user joins your app, either new or by linking their existing Textile wallet, you can provide a cafe for app-specific thread storage. Read our instructions on Cafe setup or try out our developer instances immediately. Apps & demos \u00b6 There are a couple of apps already using the images & media connector. We recommend downloading the Textile Photos mobile (iOS and Android) app or the desktop app. You can also browse the source code for both of those apps to understand how they connect to and create a user's photo streams.","title":"Images & Media"},{"location":"connectors/images/#get-started","text":"Handling images for your users falls generally into two use-cases. First, images need to be store in full-resolution form, typically useful for backup & recovery or editing apps. Second, images need to be formatted for efficient distribution to other users or on the web. Here, we'll walk through setting up each use-case in your app.","title":"Get Started"},{"location":"connectors/images/#images-media-threads","text":"Threads help a user grant access to their photos & media to new applications, share individual photos to new users, or sync all their data to trusted peers like their desktop or store it encrypted on the cafes. We covered threads in depth in the Tour of Textile and in the Threads Introduction pages. We recommend reviewing those two documents if you haven't already. Let's look apps can create new image-based threads in their app or connect to existing ones the user is already maintaining in other apps.","title":"Images &amp; media threads"},{"location":"connectors/images/#create-new-photo-threads","text":"","title":"Create new photo threads"},{"location":"connectors/images/#full-resolution-images","text":"To handle full-res images, your app can connect to existing user threads (such as those created in Textile Photos) or create new ones. Every Textile peer already knows how to create and talk to Threads of this type. Here is how you would create one of these threads in your app. cmd textile threads add \"New Shots\" --key=\"your.bundle.id.version.CameraRoll\" --cameraRoll JS HTTP const thread = await textile . threads . add ( \"New Shots\" , 'cameraRoll' ) React Native const threadKey = 'your.bundle.id.version.CameraRoll' const threadName = 'Dogs' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . CAMERA_ROLL } const config = { key : threadKey , name : threadName , type : Thread . Type . OPEN , sharing : Thread . Sharing . SHARED , schema : schema , force : false , members : [] } Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_CameraRoll ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.CameraRoll\" ; config . name = @\"New Shots\" ; config . type = Thread_Type_Open ; config . sharing = Thread_Sharing_Shared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . cameraRoll let config = AddThreadConfig () config . key = \"your.bundle.id.version.CameraRoll\" config . name = \"New Shots\" config . type = Thread_Type . open config . sharing = Thread_Sharing . shared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . CAMERA_ROLL ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.CameraRoll\" ) . setName ( \"New Shots\" ) . setType ( Thread . Type . OPEN ) . setSharing ( Thread . Sharing . SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config ); The app posting new photos to this thread doesn't need to handle sampling raw images proactively, instead, the Textile peer has the file milling logic to transform any input image into the output schema. Here's what the schema looks like, { \"name\" : \"camera_roll\" , \"pin\" : true , \"links\" : { \"raw\" : { \"use\" : \":file\" , \"mill\" : \"/blob\" }, \"exif\" : { \"use\" : \"raw\" , \"mill\" : \"/image/exif\" }, \"thumb\" : { \"use\" : \"raw\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } } } } Here are the major ideas of the schema and how to think about them in your app. Input photos will be transformed into 3 files: Raw, EXIF metadata, and thumbnail. Thumbnails will be pinned locally for fast lookup. Raw files will keep the input resolution. Thumbnails will be max 320px wide and have JPEG quality reduction to save storage space.","title":"Full resolution images"},{"location":"connectors/images/#sharable-images","text":"Sharable image threads are optimized for p2p or group sharing of content. Every Textile peer contains a schema (and mill) for handling these kinds of threads, simply named, media . You can create a new media thread as follows. cmd textile threads add \"New Shares\" --media JS HTTP const thread = await textile . threads . add ( \"New Shares\" , 'media' ) React Native const threadKey = 'your.bundle.id.version.Media' const threadName = 'Dogs' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . MEDIA } const config = { key : threadKey , name : threadName , type : Thread . Type . OPEN , sharing : Thread . Sharing . SHARED , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_Media ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Media\" ; config . name = @\"New Shots\" ; config . type = Thread_Type_Open ; config . sharing = Thread_Sharing_Shared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . media let config = AddThreadConfig () config . key = \"your.bundle.id.version.Media\" config . name = \"New Shots\" config . type = Thread_Type . open config . sharing = Thread_Sharing . shared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . MEDIA ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.Media\" ) . setName ( \"New Shots\" ) . setType ( Thread . Type . OPEN ) . setSharing ( Thread . Sharing . SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config ); Like the CameraRoll thread types, Media thread types contain a local file mill that will resample any input image to make it share-ready. Here is what the thread's schema looks like. { \"name\" : \"media\" , \"pin\" : true , \"links\" : { \"large\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"800\" , \"quality\" : \"80\" } }, \"small\" : { \"use\" : \":file\" , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"320\" , \"quality\" : \"80\" } }, \"thumb\" : { \"use\" : \"large\" , \"pin\" : true , \"mill\" : \"/image/resize\" , \"opts\" : { \"width\" : \"100\" , \"quality\" : \"80\" } } } } Unlike the CameraRoll schema, you can see that images are resampled into a few different variants but the original, full-resolution file is not maintained. You may also notice that the small format of a Media thread is the same format as the thumbnail in the CameraRoll thread. This can be helpful if you add a photo to multiple threads, as there is the opportunity to deduplicate this content.","title":"Sharable images"},{"location":"connectors/images/#connect-to-existing-photo-threads","text":"In many cases, it is just as easy for your app to connect to a user's existing photo threads. Connecting to an existing stream can give your app the ability to provide value across many more photos or simplify photo selection, editing, or sharing workflows. Requesting permission to a user's existing Media or CameraRoll threads is straightforward in your app and is expected to be released to production in the first half of July. Subscribe to this Issue to track our progress on the feature. Beyond improving the experience in your app, leveraging existing user threads can help reduce the overall data you or your users are required to store. IPFS based content addressing allows photos to be shared across all of a user's apps without the need to ever duplicate that content.","title":"Connect to existing photo threads"},{"location":"connectors/images/#created-unencrypted-content","text":"There are some use-cases where media created by a user is best shared in a decrypted format. Every Textile thread supports encrypted raw file content by default, but apps have the ability to create encrypted threads that contain plaintext file content. Read more about thread encryption here .","title":"Created unencrypted content"},{"location":"connectors/images/#cafe-sync-recovery","text":"A critical component of the image & media connector is the ability for your users to recover their data in the future. Threads can be easily backed up by registering your app with a live cafe or by encouraging your users to manage their cafe subscriptions. When a user joins your app, either new or by linking their existing Textile wallet, you can provide a cafe for app-specific thread storage. Read our instructions on Cafe setup or try out our developer instances immediately.","title":"Cafe Sync &amp; Recovery"},{"location":"connectors/images/#apps-demos","text":"There are a couple of apps already using the images & media connector. We recommend downloading the Textile Photos mobile (iOS and Android) app or the desktop app. You can also browse the source code for both of those apps to understand how they connect to and create a user's photo streams.","title":"Apps &amp; demos"},{"location":"develop/ipfs-gateway/","text":"All desktop and server peers host an IPFS gateway. A gateway is useful for light-clients which are unable to directly traverse the network, and/or want to request data from where they know it's stored. For the most part, the gateway functions exactly like an IPFS gateway: https://gateway.textile.cafe/ipfs|ipns/&lt;path&gt; This is an unencrypted file within a thread shared over a peer gateway. Tip Thread files are encrypted by default. Learn how to write schemas that generate unencrypted files here . Navigate thread files \u00b6 Threads store files in structured DAG nodes. Web applications or light-clients will often want to use a gateway to navigate these thread file \"directories\". You can explore a file DAG node by referencing its target hash: https://gateway.textile.cafe/ipfs/&lt;target&gt; target : Top-level hash of a file DAG node, referenced by a thread update block. Here is a DAG node served from one of Textile's federated gateways: https://gateway.textile.cafe/ipfs/QmarZwQEri4g2s8aw9CWKhxAzmg6rnLawGuSGYLSASEow6 . If your thread files are encrypted (the default), the meta and content data won't be viewable over a normal IPFS gateway. See next. Decrypt thread files \u00b6 Gateways are primarily useful for sharing unencrypted data or in cases where the client can efficiently decrypt data locally. However, in many cases, it may be acceptable to let a gateway decrypt a file before serving it to a client. We can ask this cafe's gateway to decrypt an image by appending the key as a query parameter: https://gateway.textile.cafe/ipfs/&lt;path&gt;?key=&lt;key&gt; path : A path in a file DAG node to either a meta or content link. key : An AES encryption key for the data at path . See files for more about keys. This is a dynamically decrypted image. Gateways will attempt to decrypt data with a key passed as a query parameter.","title":"IPFS Gateway"},{"location":"develop/ipfs-gateway/#navigate-thread-files","text":"Threads store files in structured DAG nodes. Web applications or light-clients will often want to use a gateway to navigate these thread file \"directories\". You can explore a file DAG node by referencing its target hash: https://gateway.textile.cafe/ipfs/&lt;target&gt; target : Top-level hash of a file DAG node, referenced by a thread update block. Here is a DAG node served from one of Textile's federated gateways: https://gateway.textile.cafe/ipfs/QmarZwQEri4g2s8aw9CWKhxAzmg6rnLawGuSGYLSASEow6 . If your thread files are encrypted (the default), the meta and content data won't be viewable over a normal IPFS gateway. See next.","title":"Navigate thread files"},{"location":"develop/ipfs-gateway/#decrypt-thread-files","text":"Gateways are primarily useful for sharing unencrypted data or in cases where the client can efficiently decrypt data locally. However, in many cases, it may be acceptable to let a gateway decrypt a file before serving it to a client. We can ask this cafe's gateway to decrypt an image by appending the key as a query parameter: https://gateway.textile.cafe/ipfs/&lt;path&gt;?key=&lt;key&gt; path : A path in a file DAG node to either a meta or content link. key : An AES encryption key for the data at path . See files for more about keys. This is a dynamically decrypted image. Gateways will attempt to decrypt data with a key passed as a query parameter.","title":"Decrypt thread files"},{"location":"develop/peer-config-file/","text":"A JSON config file ( <repo-dir>/textile ) is used to control various peer settings. This file lives alongside the IPFS config file (named config ) and has a similar structure and functionality. Both of these files are read once at node instantiation, either for an offline command, or when starting the daemon. Commands that execute on a running daemon do not read the config file at runtime. The JSON config is marshaled from the Go type definition : type Config struct { Account Account // local node's account (public info only) Addresses Addresses // local node's addresses API API // local node's API settings Logs Logs // local node's log settings Threads Threads // local node's thread settings IsMobile bool // local node is setup for mobile IsServer bool // local node is setup for a server w/ a public IP Cafe Cafe // local node cafe settings } These settings can be modified via the command-line config command. For example, to allow CORS from all origins: Example textile config API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' Account \u00b6 // Account store public account info type Account struct { Address string // public key (seed is stored in the _possibly_ encrypted datastore) Thread string // thread id of the default account thread used for sync between account peers } Account.Address \u00b6 Address is the account-wide public key derived from a wallet account seed. Default : Populated upon repository initialization Account.Thread \u00b6 Thread is currently a libp2p peer ID derived from the account seed. This will be changed to the hash of a symmetric key in the next version of threads. Default : Populated upon repository initialization Addresses \u00b6 // Addresses stores the (string) bind addresses for the node. type Addresses struct { API string // bind address of the local REST API CafeAPI string // bind address of the cafe REST API Gateway string // bind address of the IPFS object gateway Profiling string // bind address of the profiling API } Addresses.API \u00b6 This API is used to control the daemon through the command line (or via curl or some other client). Unlike the Gateway address, you should ensure that the API address is not dial-able from outside of your machine, or potentially malicious parties may be able to send commands to your daemon. Having said that, see the API config entry for details on further controlling the API HTTP server. Default : \"127.0.0.1:40600\" Addresses.CafeAPI \u00b6 Normally, only a designated cafe peer would enable this API, though any peer may operate as a cafe if desired. See the cafes overview for more. Default : \"127.0.0.1:40601\" Addresses.Gateway \u00b6 The gateway may be used to view and decrypt files. This port may or may not be dial-able from outside you machine, that's entirely up to you. The Gateway address is on by default, but if you leave it blank, the gateway server will not start. Default : \"127.0.0.1:5050\" Addresses.Profiling \u00b6 This API is used internally for obtaining memory and CPU profiles from a running peer. Default : \"127.0.0.1:6060\" API \u00b6 // API settings type API struct { HTTPHeaders map [ string ][] string // HTTP headers to return with the API. SizeLimit int64 // Maximum file size limit to accept for POST requests in bytes (a zero value means no limit) } API.HTTPHeaders \u00b6 A map of HTTP headers for responses from the API. You might want to edit these settings if you need to allow additional access control methods, or require authorization headers , etc. For example, you may want to enable CORS for your API; this can be done by modifying your \"Access-Control-Allow-Origin\" header. See this blog post for a discussion of similar IPFS gateway settings. Default : { \"Access-Control-Allow-Headers\" : [ \"Content-Type\" , \"Method\" , \"X-Textile-Args\" , \"X-Textile-Opts\" , \"X-Requested-With\" ], \"Access-Control-Allow-Methods\" : [ \"GET\" , \"POST\" , \"DELETE\" , \"OPTIONS\" ], \"Access-Control-Allow-Origin\" : [], \"Server\" : [ \"textile-go/<version>\" ] } API.SizeLimit \u00b6 Maximum file size limit to accept for POST requests in bytes. A zero value indicates no limit should be enforced. Default : 0 Logs \u00b6 // Logs settings type Logs struct { LogToDisk bool // when true, sends all logs to rolling files on disk } Logs.LogToDisk \u00b6 A boolean indicating whether to send all logs to rolling files on disk (true) or Stdout (false). Logs written to disk ( <repo-dir>/logs/textile.log ) can be monitored via tail -f <repo-dir>/logs/textile.log or similar. The verbosity of these logs can be controlled at run-time via the logs command (see textile logs --help for details). Default : true Threads \u00b6 // Thread settings type Threads struct { Defaults ThreadDefaults // default settings } Threads.Defaults \u00b6 // ThreadDefaults settings type ThreadDefaults struct { ID string // default thread ID for reads/writes } Threads.Defaults.ID \u00b6 Default thread ID for reads/writes ( textile threads default ). Default : \"\" IsMobile \u00b6 A boolean indicating whether or not to apply the IPFS low-power profile , among other optimizations. Default : false IsServer \u00b6 A boolean indicating whether or not to apply the IPFS server profile , among other optimizations. Default : false Cafe \u00b6 type Cafe struct { Host CafeHost Client CafeClient } For more information about configuring and running a cafe peer, see the daemon installation guide . The Cafe config entry is broken up into two sections, one for controlling how a cafe Host behaves, and one for controlling how a Client interacts with a host peer. Cafe.CafeHost \u00b6 type CafeHost struct { Open bool // When true, other peers can register with this node for cafe services. URL string // Override the resolved URL of this cafe, useful for load HTTPS and/or load balancers NeighborURL string // Specifies the URL of a secondary cafe. Must return cafe info. SizeLimit int64 // Maximum file size limit to accept for POST requests in bytes. } Cafe.CafeHost.Open \u00b6 A boolean indicating whether or not to open the Cafe API and accept client requests. Default : false Cafe.CafeHost.URL \u00b6 Override this value if a cafe peer is behind a DNS-based load balancer and/or requires HTTPS. For example, Textile's federated cafes run behind EC2 load balancers with HTTPS listeners, which route traffic to the cafe API bind address. If not specified during repository initialization, a peer will try to determine its \"most public\" IP address on start up: Use a LAN address if present in the peer host's advertised addresses If no LAN is present, poll the peer host for an address that passes a superficial test for being public (it may take a few seconds to to complete NAT discovery) Use the loopback address ( 127.0.0.1 ) Default : http://<SWARM_IP>:40601 Cafe.CafeHost.NeighborURL \u00b6 Deprecated . Default : \"\" Cafe.CafeHost.SizeLimit \u00b6 Maximum file size limit to accept for POST requests in bytes. A zero value indicates no limit should be enforced. Default : 0 Cafe.CafeClient \u00b6 // CafeClient settings type CafeClient struct { Mobile MobileCafeClient } Cafe.CafeClient.MobileCafeClient \u00b6 // MobileCafeClient settings type MobileCafeClient struct { // messages w/ size less than limit will be handled by the p2p cafe service, // messages w/ size greater than limit will be handled by the mobile OS's background // upload service and the cafe HTTP API P2PWireLimit int } Cafe.MobileCafeClient.P2PWireLimit \u00b6 Deprecated . Default : 0","title":"Peer Config File"},{"location":"develop/peer-config-file/#account","text":"// Account store public account info type Account struct { Address string // public key (seed is stored in the _possibly_ encrypted datastore) Thread string // thread id of the default account thread used for sync between account peers }","title":"Account"},{"location":"develop/peer-config-file/#accountaddress","text":"Address is the account-wide public key derived from a wallet account seed. Default : Populated upon repository initialization","title":"Account.Address"},{"location":"develop/peer-config-file/#accountthread","text":"Thread is currently a libp2p peer ID derived from the account seed. This will be changed to the hash of a symmetric key in the next version of threads. Default : Populated upon repository initialization","title":"Account.Thread"},{"location":"develop/peer-config-file/#addresses","text":"// Addresses stores the (string) bind addresses for the node. type Addresses struct { API string // bind address of the local REST API CafeAPI string // bind address of the cafe REST API Gateway string // bind address of the IPFS object gateway Profiling string // bind address of the profiling API }","title":"Addresses"},{"location":"develop/peer-config-file/#addressesapi","text":"This API is used to control the daemon through the command line (or via curl or some other client). Unlike the Gateway address, you should ensure that the API address is not dial-able from outside of your machine, or potentially malicious parties may be able to send commands to your daemon. Having said that, see the API config entry for details on further controlling the API HTTP server. Default : \"127.0.0.1:40600\"","title":"Addresses.API"},{"location":"develop/peer-config-file/#addressescafeapi","text":"Normally, only a designated cafe peer would enable this API, though any peer may operate as a cafe if desired. See the cafes overview for more. Default : \"127.0.0.1:40601\"","title":"Addresses.CafeAPI"},{"location":"develop/peer-config-file/#addressesgateway","text":"The gateway may be used to view and decrypt files. This port may or may not be dial-able from outside you machine, that's entirely up to you. The Gateway address is on by default, but if you leave it blank, the gateway server will not start. Default : \"127.0.0.1:5050\"","title":"Addresses.Gateway"},{"location":"develop/peer-config-file/#addressesprofiling","text":"This API is used internally for obtaining memory and CPU profiles from a running peer. Default : \"127.0.0.1:6060\"","title":"Addresses.Profiling"},{"location":"develop/peer-config-file/#api","text":"// API settings type API struct { HTTPHeaders map [ string ][] string // HTTP headers to return with the API. SizeLimit int64 // Maximum file size limit to accept for POST requests in bytes (a zero value means no limit) }","title":"API"},{"location":"develop/peer-config-file/#apihttpheaders","text":"A map of HTTP headers for responses from the API. You might want to edit these settings if you need to allow additional access control methods, or require authorization headers , etc. For example, you may want to enable CORS for your API; this can be done by modifying your \"Access-Control-Allow-Origin\" header. See this blog post for a discussion of similar IPFS gateway settings. Default : { \"Access-Control-Allow-Headers\" : [ \"Content-Type\" , \"Method\" , \"X-Textile-Args\" , \"X-Textile-Opts\" , \"X-Requested-With\" ], \"Access-Control-Allow-Methods\" : [ \"GET\" , \"POST\" , \"DELETE\" , \"OPTIONS\" ], \"Access-Control-Allow-Origin\" : [], \"Server\" : [ \"textile-go/<version>\" ] }","title":"API.HTTPHeaders"},{"location":"develop/peer-config-file/#apisizelimit","text":"Maximum file size limit to accept for POST requests in bytes. A zero value indicates no limit should be enforced. Default : 0","title":"API.SizeLimit"},{"location":"develop/peer-config-file/#logs","text":"// Logs settings type Logs struct { LogToDisk bool // when true, sends all logs to rolling files on disk }","title":"Logs"},{"location":"develop/peer-config-file/#logslogtodisk","text":"A boolean indicating whether to send all logs to rolling files on disk (true) or Stdout (false). Logs written to disk ( <repo-dir>/logs/textile.log ) can be monitored via tail -f <repo-dir>/logs/textile.log or similar. The verbosity of these logs can be controlled at run-time via the logs command (see textile logs --help for details). Default : true","title":"Logs.LogToDisk"},{"location":"develop/peer-config-file/#threads","text":"// Thread settings type Threads struct { Defaults ThreadDefaults // default settings }","title":"Threads"},{"location":"develop/peer-config-file/#threadsdefaults","text":"// ThreadDefaults settings type ThreadDefaults struct { ID string // default thread ID for reads/writes }","title":"Threads.Defaults"},{"location":"develop/peer-config-file/#threadsdefaultsid","text":"Default thread ID for reads/writes ( textile threads default ). Default : \"\"","title":"Threads.Defaults.ID"},{"location":"develop/peer-config-file/#ismobile","text":"A boolean indicating whether or not to apply the IPFS low-power profile , among other optimizations. Default : false","title":"IsMobile"},{"location":"develop/peer-config-file/#isserver","text":"A boolean indicating whether or not to apply the IPFS server profile , among other optimizations. Default : false","title":"IsServer"},{"location":"develop/peer-config-file/#cafe","text":"type Cafe struct { Host CafeHost Client CafeClient } For more information about configuring and running a cafe peer, see the daemon installation guide . The Cafe config entry is broken up into two sections, one for controlling how a cafe Host behaves, and one for controlling how a Client interacts with a host peer.","title":"Cafe"},{"location":"develop/peer-config-file/#cafecafehost","text":"type CafeHost struct { Open bool // When true, other peers can register with this node for cafe services. URL string // Override the resolved URL of this cafe, useful for load HTTPS and/or load balancers NeighborURL string // Specifies the URL of a secondary cafe. Must return cafe info. SizeLimit int64 // Maximum file size limit to accept for POST requests in bytes. }","title":"Cafe.CafeHost"},{"location":"develop/peer-config-file/#cafecafehostopen","text":"A boolean indicating whether or not to open the Cafe API and accept client requests. Default : false","title":"Cafe.CafeHost.Open"},{"location":"develop/peer-config-file/#cafecafehosturl","text":"Override this value if a cafe peer is behind a DNS-based load balancer and/or requires HTTPS. For example, Textile's federated cafes run behind EC2 load balancers with HTTPS listeners, which route traffic to the cafe API bind address. If not specified during repository initialization, a peer will try to determine its \"most public\" IP address on start up: Use a LAN address if present in the peer host's advertised addresses If no LAN is present, poll the peer host for an address that passes a superficial test for being public (it may take a few seconds to to complete NAT discovery) Use the loopback address ( 127.0.0.1 ) Default : http://<SWARM_IP>:40601","title":"Cafe.CafeHost.URL"},{"location":"develop/peer-config-file/#cafecafehostneighborurl","text":"Deprecated . Default : \"\"","title":"Cafe.CafeHost.NeighborURL"},{"location":"develop/peer-config-file/#cafecafehostsizelimit","text":"Maximum file size limit to accept for POST requests in bytes. A zero value indicates no limit should be enforced. Default : 0","title":"Cafe.CafeHost.SizeLimit"},{"location":"develop/peer-config-file/#cafecafeclient","text":"// CafeClient settings type CafeClient struct { Mobile MobileCafeClient }","title":"Cafe.CafeClient"},{"location":"develop/peer-config-file/#cafecafeclientmobilecafeclient","text":"// MobileCafeClient settings type MobileCafeClient struct { // messages w/ size less than limit will be handled by the p2p cafe service, // messages w/ size greater than limit will be handled by the mobile OS's background // upload service and the cafe HTTP API P2PWireLimit int }","title":"Cafe.CafeClient.MobileCafeClient"},{"location":"develop/peer-config-file/#cafemobilecafeclientp2pwirelimit","text":"Deprecated . Default : 0","title":"Cafe.MobileCafeClient.P2PWireLimit"},{"location":"develop/the-http-api/","text":"Peers that run as a daemon (desktop and server, including cafes) are accessible over a local HTTP REST API. In most cases, this API should not be exposed to the public internet. Textile currently maintains two client libraries: The Command-line client (similar to ipfs , useful for interacting with a local peer). The JS HTTP client: Useful for building NodeJS, frontend web, and electron apps. Below is the swagger-based documentation for the API. Note that endpoints must be prefixed with /api/v{version} (e.g., /api/v0 ). Version: 0 \u00b6 Terms of service \u00b6 https://github.com/textileio/go-textile/blob/master/TERMS Contact information: Textile https://textile.io/ contact@textile.io License: MIT License /account \u00b6 GET \u00b6 Summary: \u00b6 Show account contact Description: \u00b6 Shows the local peer's account info as a contact Responses \u00b6 Code Description Schema 200 contact pb.Contact 400 Bad Request string /account/address \u00b6 GET \u00b6 Summary: \u00b6 Show account address Description: \u00b6 Shows the local peer's account address Responses \u00b6 Code Description Schema 200 address string /account/seed \u00b6 GET \u00b6 Summary: \u00b6 Show account seed Description: \u00b6 Shows the local peer's account seed Responses \u00b6 Code Description Schema 200 seed string /blocks \u00b6 GET \u00b6 Summary: \u00b6 Paginates blocks in a thread Description: \u00b6 Paginates blocks in a thread. Blocks are the raw components in a thread. Think of them as an append-only log of thread updates where each update is hash-linked to its parent(s). New / recovering peers can sync history by simply traversing the hash tree. Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5) No string Responses \u00b6 Code Description Schema 200 blocks pb.BlockList 400 Bad Request string 404 Not Found string 500 Internal Server Error string /blocks/{id} \u00b6 DELETE \u00b6 Summary: \u00b6 Remove thread block Description: \u00b6 Removes a thread block by ID Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 201 block pb.Block 400 Bad Request string 404 Not Found string 500 Internal Server Error string /blocks/{id}/comment \u00b6 GET \u00b6 Summary: \u00b6 Get thread comment Description: \u00b6 Gets a thread comment by block ID Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 comment pb.Comment 400 Bad Request string /blocks/{id}/comments \u00b6 GET \u00b6 Summary: \u00b6 List comments Description: \u00b6 Lists comments on a thread block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 comments pb.CommentList 500 Internal Server Error string POST \u00b6 Summary: \u00b6 Add a comment Description: \u00b6 Adds a comment to a thread block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string X-Textile-Args header urlescaped comment body Yes string Responses \u00b6 Code Description Schema 201 comment pb.Comment 400 Bad Request string 404 Not Found string 500 Internal Server Error string /blocks/{id}/files \u00b6 GET \u00b6 Summary: \u00b6 Gets the metadata for a files block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 files pb.Files 404 Not Found string /blocks/{id}/files/{index}/{path}/content \u00b6 GET \u00b6 Summary: \u00b6 Gets the decrypted file content of a file within a files block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string index path file index Yes string path path file path Yes string Responses \u00b6 Code Description Schema 200 OK string 400 Bad Request string 404 Not Found string /blocks/{id}/files/{index}/{path}/meta \u00b6 GET \u00b6 Summary: \u00b6 Gets the metadata of a file within a files block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string index path file index Yes string path path file path Yes string Responses \u00b6 Code Description Schema 200 file pb.FileIndex 400 Bad Request string 404 Not Found string /blocks/{id}/like \u00b6 GET \u00b6 Summary: \u00b6 Get thread like Description: \u00b6 Gets a thread like by block ID Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 like pb.Like 400 Bad Request string /blocks/{id}/likes \u00b6 GET \u00b6 Summary: \u00b6 List likes Description: \u00b6 Lists likes on a thread block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 likes pb.LikeList 500 Internal Server Error string POST \u00b6 Summary: \u00b6 Add a like Description: \u00b6 Adds a like to a thread block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 201 like pb.Like 400 Bad Request string 404 Not Found string 500 Internal Server Error string /blocks/{id}/meta \u00b6 GET \u00b6 Summary: \u00b6 Gets the metadata for a block Parameters \u00b6 Name Located in Description Required Schema id path block id Yes string Responses \u00b6 Code Description Schema 200 block pb.Block 404 Not Found string /cafes \u00b6 GET \u00b6 Summary: \u00b6 List info about all active cafe sessions Description: \u00b6 List info about all active cafe sessions. Cafes are other peers on the network who offer pinning, backup, and inbox services Responses \u00b6 Code Description Schema 200 cafe sessions pb.CafeSessionList 500 Internal Server Error string POST \u00b6 Summary: \u00b6 Register with a Cafe Description: \u00b6 Registers with a cafe and saves an expiring service session token. An access token is required to register, and should be obtained separately from the target Cafe Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header cafe id Yes string X-Textile-Opts header token: An access token supplied by the Cafe No string Responses \u00b6 Code Description Schema 201 cafe session pb.CafeSession 400 Bad Request string 500 Internal Server Error string /cafes/{id} \u00b6 DELETE \u00b6 Summary: \u00b6 Deregisters a cafe Description: \u00b6 Deregisters with a cafe (content will expire based on the cafe's service rules) Parameters \u00b6 Name Located in Description Required Schema id path cafe id Yes string Responses \u00b6 Code Description Schema 204 ok string 500 Internal Server Error string GET \u00b6 Summary: \u00b6 Gets and displays info about a cafe session Description: \u00b6 Gets and displays info about a cafe session. Cafes are other peers on the network who offer pinning, backup, and inbox services Parameters \u00b6 Name Located in Description Required Schema id path cafe id Yes string Responses \u00b6 Code Description Schema 200 cafe session pb.CafeSession 404 Not Found string 500 Internal Server Error string /cafes/messages \u00b6 POST \u00b6 Summary: \u00b6 Check for messages at all cafes Description: \u00b6 Check for messages at all cafes. New messages are downloaded and processed opportunistically. Responses \u00b6 Code Description Schema 200 ok string 500 Internal Server Error string /config \u00b6 PATCH \u00b6 Summary: \u00b6 Set/update config settings Description: \u00b6 When patching config values, valid JSON types must be used. For example, a string should be escaped or wrapped in single quotes (e.g., \\\"127.0.0.1:40600\\\") and arrays and objects work fine (e.g. '{\"API\": \"127.0.0.1:40600\"}') but should be wrapped in single quotes. Be sure to restart the daemon for changes to take effect. See https://tools.ietf.org/html/rfc6902 for details on RFC6902 JSON patch format. Parameters \u00b6 Name Located in Description Required Schema patch body An RFC6902 JSON patch (array of ops) Yes mill.Json Responses \u00b6 Code Description Schema 204 No Content string 400 Bad Request string PUT \u00b6 Summary: \u00b6 Replace config settings. Description: \u00b6 Replace entire config file contents. The config command controls configuration variables. It works much like 'git config'. The configuration values are stored in a config file inside the Textile repository. Parameters \u00b6 Name Located in Description Required Schema config body JSON document Yes mill.Json Responses \u00b6 Code Description Schema 204 No Content string 400 Bad Request string /config/{path} \u00b6 GET \u00b6 Summary: \u00b6 Get active config settings Description: \u00b6 Report the currently active config settings, which may differ from the values specifed when setting/patching values. Parameters \u00b6 Name Located in Description Required Schema path path config path (e.g., Addresses/API) No string Responses \u00b6 Code Description Schema 200 new config value mill.Json 400 Bad Request string /contacts \u00b6 GET \u00b6 Summary: \u00b6 List known contacts Description: \u00b6 Lists known contacts. Responses \u00b6 Code Description Schema 200 contacts pb.ContactList 404 Not Found string 500 Internal Server Error string /contacts/{address} \u00b6 DELETE \u00b6 Summary: \u00b6 Remove a contact Description: \u00b6 Removes a known contact Parameters \u00b6 Name Located in Description Required Schema address path address Yes string Responses \u00b6 Code Description Schema 204 ok string 404 Not Found string 500 Internal Server Error string GET \u00b6 Summary: \u00b6 Get a known contact Description: \u00b6 Gets a known contact Parameters \u00b6 Name Located in Description Required Schema address path address Yes string Responses \u00b6 Code Description Schema 200 contact pb.Contact 404 Not Found string PUT \u00b6 Summary: \u00b6 Add to known contacts Description: \u00b6 Adds a contact by username or account address to known contacts. Parameters \u00b6 Name Located in Description Required Schema address path address Yes string contact body contact Yes pb.Contact Responses \u00b6 Code Description Schema 204 ok string 400 Bad Request string /contacts/search \u00b6 POST \u00b6 Summary: \u00b6 Search for contacts Description: \u00b6 Search for contacts known locally and on the network Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header local: Whether to only search local contacts, remote: Whether to only search remote contacts, limit: Stops searching after limit results are found, wait: Stops searching after 'wait' seconds have elapsed (max 30s), username: search by username string, address: search by account address string, events: Whether to emit Server-Sent Events (SSEvent) or plain JSON No string Responses \u00b6 Code Description Schema 200 results stream pb.QueryResult 404 Not Found string 500 Internal Server Error string /feed \u00b6 GET \u00b6 Summary: \u00b6 Paginates post and annotation block types Description: \u00b6 Paginates post (join|leave|files|message) and annotation (comment|like) block types The mode option dictates how the feed is displayed: \"chrono\": All feed block types are shown. Annotations always nest their target post, i.e., the post a comment is about. \"annotated\": Annotations are nested under post targets, but are not shown in the top-level feed. \"stacks\": Related blocks are chronologically grouped into \"stacks\". A new stack is started if an unrelated block breaks continuity. This mode is used by Textile Photos. Stacks may include: The initial post with some nested annotations. Newer annotations may have already been listed. One or more annotations about a post. The newest annotation assumes the \"top\" position in the stack. Additional annotations are nested under the target. Newer annotations may have already been listed in the case as well. Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5), mode: Feed mode (one of 'chrono', 'annotated', or 'stacks') No string Responses \u00b6 Code Description Schema 200 feed pb.FeedItemList 400 Bad Request string 404 Not Found string 500 Internal Server Error string /file/{hash}/content \u00b6 GET \u00b6 Summary: \u00b6 File content at hash Description: \u00b6 Returns decrypted raw content for file Parameters \u00b6 Name Located in Description Required Schema hash path file hash Yes string Responses \u00b6 Code Description Schema 200 OK string 404 Not Found string /file/{target}/meta \u00b6 GET \u00b6 Summary: \u00b6 File metadata at hash Description: \u00b6 Returns the metadata for file Parameters \u00b6 Name Located in Description Required Schema hash path file hash Yes string Responses \u00b6 Code Description Schema 200 file pb.FileIndex 404 Not Found string /files \u00b6 GET \u00b6 Summary: \u00b6 Paginates thread files Description: \u00b6 Paginates thread files. If thread id not provided, paginate all files. Specify \"default\" to use the default thread (if set). Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID. Omit for all, offset: Offset ID to start listing from. Omit for latest, limit: List page size. (default: 5) No string Responses \u00b6 Code Description Schema 200 files pb.FilesList 400 Bad Request string 404 Not Found string 500 Internal Server Error string /invites \u00b6 GET \u00b6 Summary: \u00b6 List invites Description: \u00b6 Lists all pending thread invites Responses \u00b6 Code Description Schema 200 invites pb.InviteViewList POST \u00b6 Summary: \u00b6 Create an invite to a thread Description: \u00b6 Creates a direct account-to-account or external invite to a thread Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), address: Account Address (omit to create an external invite) No string Responses \u00b6 Code Description Schema 201 invite pb.ExternalInvite 400 Bad Request string 404 Not Found string 500 Internal Server Error string /invites/{id}/accept \u00b6 POST \u00b6 Summary: \u00b6 Accept a thread invite Description: \u00b6 Accepts a direct peer-to-peer or external invite to a thread. Use the key option with an external invite Parameters \u00b6 Name Located in Description Required Schema id path invite id Yes string X-Textile-Opts header key: key for an external invite No string Responses \u00b6 Code Description Schema 201 join block pb.Block 400 Bad Request string 409 Conflict string 500 Internal Server Error string /invites/{id}/ignore \u00b6 POST \u00b6 Summary: \u00b6 Ignore a thread invite Description: \u00b6 Ignores a direct peer-to-peer invite to a thread Parameters \u00b6 Name Located in Description Required Schema id path invite id Yes string Responses \u00b6 Code Description Schema 200 ok string 400 Bad Request string /ipfs/cat/{path} \u00b6 GET \u00b6 Summary: \u00b6 Cat IPFS data Description: \u00b6 Displays the data behind an IPFS CID (hash) or Path Parameters \u00b6 Name Located in Description Required Schema path path ipfs/ipns cid Yes string X-Textile-Opts header key: Key to decrypt data on-the-fly No string Responses \u00b6 Code Description Schema 200 data [ integer ] 400 Bad Request string 401 Unauthorized string 404 Not Found string 500 Internal Server Error string /ipfs/id \u00b6 GET \u00b6 Summary: \u00b6 Get IPFS peer ID Description: \u00b6 Displays underlying IPFS peer ID Responses \u00b6 Code Description Schema 200 peer id string 500 Internal Server Error string /ipfs/swarm/connect \u00b6 POST \u00b6 Summary: \u00b6 Opens a new direct connection to a peer address Description: \u00b6 Opens a new direct connection to a peer using an IPFS multiaddr Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header peer address Yes string Responses \u00b6 Code Description Schema 200 ok [ string ] 400 Bad Request string 500 Internal Server Error string /ipfs/swarm/peers \u00b6 GET \u00b6 Summary: \u00b6 List swarm peers Description: \u00b6 Lists the set of peers this node is connected to Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header verbose: Display all extra information, latency: Also list information about latency to each peer, streams: Also list information about open streams for each peer, direction: Also list information about the direction of connection No string Responses \u00b6 Code Description Schema 200 connection ipfs.ConnInfos 400 Bad Request string 500 Internal Server Error string /keys/{target} \u00b6 GET \u00b6 Summary: \u00b6 Show file keys Description: \u00b6 Shows file keys under the given target from an add Parameters \u00b6 Name Located in Description Required Schema target path target id Yes string Responses \u00b6 Code Description Schema 200 keys pb.Keys 400 Bad Request string /logs/{subsystem} \u00b6 POST \u00b6 Summary: \u00b6 Access subsystem logs Description: \u00b6 List or change the verbosity of one or all subsystems log output. Textile logs piggyback on the IPFS event logs Parameters \u00b6 Name Located in Description Required Schema subsystem path subsystem logging identifier (omit for all) No string X-Textile-Opts header level: Log-level (one of: debug, info, warning, error, critical, or No string Responses \u00b6 Code Description Schema 200 subsystems core.SubsystemInfo 400 Bad Request string 500 Internal Server Error string /messages \u00b6 GET \u00b6 Summary: \u00b6 Paginates thread messages Description: \u00b6 Paginates thread messages Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default', omit for all), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5) No string Responses \u00b6 Code Description Schema 200 messages pb.TextList 400 Bad Request string 404 Not Found string 500 Internal Server Error string /messages/{block} \u00b6 GET \u00b6 Summary: \u00b6 Get thread message Description: \u00b6 Gets a thread message by block ID Parameters \u00b6 Name Located in Description Required Schema block path block id Yes string Responses \u00b6 Code Description Schema 200 message pb.Text 400 Bad Request string /mills/blob \u00b6 POST \u00b6 Summary: \u00b6 Process raw data blobs Description: \u00b6 Takes a binary data blob, and optionally encrypts it, before adding to IPFS, and returns a file object Parameters \u00b6 Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted), use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string Responses \u00b6 Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string /mills/image/exif \u00b6 POST \u00b6 Summary: \u00b6 Extract EXIF data from image Description: \u00b6 Takes an input image, and extracts its EXIF data (optionally encrypting output), before adding to IPFS, and returns a file object Parameters \u00b6 Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string Responses \u00b6 Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string /mills/image/resize \u00b6 POST \u00b6 Summary: \u00b6 Resize an image Description: \u00b6 Takes an input image, and resizes/resamples it (optionally encrypting output), before adding to IPFS, and returns a file object Parameters \u00b6 Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS, width: the requested image width (required), quality: the requested JPEG image quality Yes string Responses \u00b6 Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string /mills/json \u00b6 POST \u00b6 Summary: \u00b6 Process input JSON data Description: \u00b6 Takes an input JSON document, validates it according to its json-schema.org definition, optionally encrypts the output before adding to IPFS, and returns a file object Parameters \u00b6 Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string Responses \u00b6 Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string /mills/schema \u00b6 POST \u00b6 Summary: \u00b6 Validate, add, and pin a new Schema Description: \u00b6 Takes a JSON-based Schema, validates it, adds it to IPFS, and returns a file object Parameters \u00b6 Name Located in Description Required Schema schema body schema Yes pb.Node Responses \u00b6 Code Description Schema 201 file pb.FileIndex 400 Bad Request string /notifications \u00b6 GET \u00b6 Summary: \u00b6 List notifications Description: \u00b6 Lists all notifications generated by thread and account activity. Responses \u00b6 Code Description Schema 200 notifications pb.NotificationList /notifications/{id}/read \u00b6 POST \u00b6 Summary: \u00b6 Mark notifiction as read Description: \u00b6 Marks a notifiction as read by ID. Use 'all' to mark all as read. Parameters \u00b6 Name Located in Description Required Schema id path notification id Yes string Responses \u00b6 Code Description Schema 200 ok string 400 Bad Request string /ping \u00b6 GET \u00b6 Summary: \u00b6 Ping a network peer Description: \u00b6 Pings another peer on the network, returning online|offline. Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header peerid Yes string Responses \u00b6 Code Description Schema 200 One of online offline 400 Bad Request string 500 Internal Server Error string /profile \u00b6 GET \u00b6 Summary: \u00b6 Get public profile Description: \u00b6 Gets the local node's public profile Responses \u00b6 Code Description Schema 200 peer pb.Peer 400 Bad Request string /profile/avatar \u00b6 POST \u00b6 Summary: \u00b6 Set avatar Description: \u00b6 Forces local node to update avatar image to latest image added to 'account' thread Responses \u00b6 Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string /profile/name \u00b6 POST \u00b6 Summary: \u00b6 Set display name Description: \u00b6 Sets public profile display name to given string Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header name Yes string Responses \u00b6 Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string /snapshots \u00b6 POST \u00b6 Summary: \u00b6 Create thread snapshots Description: \u00b6 Snapshots all threads and pushes to registered cafes Responses \u00b6 Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string /snapshots/search \u00b6 POST \u00b6 Summary: \u00b6 Search for thread snapshots Description: \u00b6 Searches the network for thread snapshots Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header wait: Stops searching after 'wait' seconds have elapsed (max 30s), events: Whether to emit Server-Sent Events (SSEvent) or plain JSON No string Responses \u00b6 Code Description Schema 200 results stream pb.QueryResult 400 Bad Request string 500 Internal Server Error string /subscribe/{id} \u00b6 GET \u00b6 Summary: \u00b6 Subscribe to thread updates Description: \u00b6 Subscribes to updates in a thread or all threads. An update is generated when a new block is added to a thread. There are several update types: MERGE, IGNORE, FLAG, JOIN, ANNOUNCE, LEAVE, TEXT, FILES, COMMENT, LIKE Parameters \u00b6 Name Located in Description Required Schema id path thread id, omit to stream all events No string X-Textile-Opts header type: Or'd list of event types (e.g., FILES COMMENTS LIKES) or empty to include all types, events: Whether to emit Server-Sent Events (SSEvent) or plain JSON Responses \u00b6 Code Description Schema 200 stream of updates pb.FeedItem 500 Internal Server Error string /summary \u00b6 GET \u00b6 Summary: \u00b6 Get a summary of node data Responses \u00b6 Code Description Schema 200 summary pb.Summary /threads \u00b6 GET \u00b6 Summary: \u00b6 Lists info on all threads Description: \u00b6 Lists all local threads, returning a ThreadList object Responses \u00b6 Code Description Schema 200 threads pb.ThreadList 400 Bad Request string 500 Internal Server Error string POST \u00b6 Summary: \u00b6 Adds and joins a new thread Description: \u00b6 Adds a new Thread with given name, type, and sharing and whitelist options, returning a Thread object Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header name Yes string X-Textile-Opts header key: A locally unique key used by an app to identify this thread on recovery, schema: Existing Thread Schema IPFS CID, type: Set the thread type to one of 'private', 'read_only', 'public', or 'open', sharing: Set the thread sharing style to one of 'not_shared','invite_only', or 'shared', whitelist: An array of contact addresses. When supplied, the thread will not allow additional peers beyond those in array, useful for 1-1 chat/file sharing No string Responses \u00b6 Code Description Schema 201 thread pb.Thread 400 Bad Request string 500 Internal Server Error string /threads/{id} \u00b6 DELETE \u00b6 Summary: \u00b6 Leave and remove a thread Description: \u00b6 Leaves and removes a thread Parameters \u00b6 Name Located in Description Required Schema id path thread id Yes string Responses \u00b6 Code Description Schema 204 ok string 404 Not Found string 500 Internal Server Error string GET \u00b6 Summary: \u00b6 Gets a thread Description: \u00b6 Gets and displays info about a thread Parameters \u00b6 Name Located in Description Required Schema id path thread id Yes string Responses \u00b6 Code Description Schema 200 thread pb.Thread 400 Bad Request string 500 Internal Server Error string PUT \u00b6 Summary: \u00b6 Add or update a thread directly Description: \u00b6 Adds or updates a thread directly, usually from a backup Parameters \u00b6 Name Located in Description Required Schema id path id Yes string thread body thread Yes pb.Thread Responses \u00b6 Code Description Schema 204 ok string 400 Bad Request string /threads/{id}/files \u00b6 POST \u00b6 Summary: \u00b6 Adds a file or directory of files to a thread Description: \u00b6 Adds a file or directory of files to a thread. Files not supported by the thread schema are ignored. Nested directories are included. An existing file hash may also be used as input. Parameters \u00b6 Name Located in Description Required Schema dir body list of milled dirs (output from mill endpoint) Yes pb.DirectoryList X-Textile-Opts header caption: Caption to add to file(s) No string Responses \u00b6 Code Description Schema 201 file pb.Files 400 Bad Request string 404 Not Found string 500 Internal Server Error string /threads/{id}/messages \u00b6 POST \u00b6 Summary: \u00b6 Add a message Description: \u00b6 Adds a message to a thread Parameters \u00b6 Name Located in Description Required Schema X-Textile-Args header urlescaped message body Yes string Responses \u00b6 Code Description Schema 200 message pb.Text 400 Bad Request string 404 Not Found string 500 Internal Server Error string /threads/{id}/name \u00b6 PUT \u00b6 Summary: \u00b6 Rename a thread Description: \u00b6 Renames a thread. Only initiators can rename a thread. Parameters \u00b6 Name Located in Description Required Schema id path id Yes string X-Textile-Args header name Yes string Responses \u00b6 Code Description Schema 204 ok string 400 Bad Request string /threads/{id}/peers \u00b6 GET \u00b6 Summary: \u00b6 List all thread peers Description: \u00b6 Lists all peers in a thread, optionally listing peers in the default thread Parameters \u00b6 Name Located in Description Required Schema id path thread id Yes string Responses \u00b6 Code Description Schema 200 contacts pb.ContactList 404 Not Found string /tokens \u00b6 GET \u00b6 Summary: \u00b6 List local tokens Description: \u00b6 List info about all stored cafe tokens Responses \u00b6 Code Description Schema 200 tokens [ string ] 500 Internal Server Error string POST \u00b6 Summary: \u00b6 Create an access token Description: \u00b6 Generates an access token (44 random bytes) and saves a bcrypt hashed version for future lookup. The response contains a base58 encoded version of the random bytes token. If the 'store' option is set to false, the token is generated, but not stored in the local Cafe db. Alternatively, an existing token can be added using by specifying the 'token' option. Tokens allow other peers to register with a Cafe peer. Parameters \u00b6 Name Located in Description Required Schema X-Textile-Opts header token: Use existing token, rather than creating a new one, store: Whether to store the added/generated token to the local db No string Responses \u00b6 Code Description Schema 201 token string 400 Bad Request string 500 Internal Server Error string /tokens/{id} \u00b6 DELETE \u00b6 Summary: \u00b6 Removes a cafe token Description: \u00b6 Removes an existing cafe token Parameters \u00b6 Name Located in Description Required Schema token path token Yes string Responses \u00b6 Code Description Schema 204 ok string 500 Internal Server Error string GET \u00b6 Summary: \u00b6 Check token validity Description: \u00b6 Check validity of existing cafe access token Parameters \u00b6 Name Located in Description Required Schema token path invite id Yes string Responses \u00b6 Code Description Schema 200 ok string 401 Unauthorized string Models \u00b6 core.SubsystemInfo \u00b6 Name Type Description Required core.SubsystemInfo object ipfs.ConnInfos \u00b6 Name Type Description Required peers [ ipfs.connInfo ] No ipfs.connInfo \u00b6 Name Type Description Required addr string No direction string No latency string No muxer string No peer string No streams [ ipfs.streamInfo ] No ipfs.streamInfo \u00b6 Name Type Description Required protocol string No mill.Json \u00b6 Name Type Description Required mill.Json object pb.Block \u00b6 Name Type Description Required author string No body string No date string No id string No parents [ string ] No target string No thread string No type integer No user pb.User view info No pb.BlockList \u00b6 Name Type Description Required items [ pb.Block ] No pb.Cafe \u00b6 Name Type Description Required address string No api string No node string No peer string No protocol string No url string No pb.CafeSession \u00b6 Name Type Description Required access string No cafe pb.Cafe No exp string No id string No refresh string No rexp string No subject string No type string No pb.CafeSessionList \u00b6 Name Type Description Required items [ pb.CafeSession ] No pb.Comment \u00b6 Name Type Description Required body string No date string No id string No target pb.FeedItem No user pb.User No pb.CommentList \u00b6 Name Type Description Required items [ pb.Comment ] No pb.Contact \u00b6 Name Type Description Required address string No avatar string No name string No peers [ pb.Peer ] No threads [ string ] No pb.ContactList \u00b6 Name Type Description Required items [ pb.Contact ] No pb.Directory \u00b6 Name Type Description Required files object No pb.DirectoryList \u00b6 Name Type Description Required items [ pb.Directory ] No pb.ExternalInvite \u00b6 Name Type Description Required id string No inviter string No key string No pb.FeedItem \u00b6 Name Type Description Required block string No payload string No thread string No pb.FeedItemList \u00b6 Name Type Description Required count integer No items [ pb.FeedItem ] No next string No pb.File \u00b6 Name Type Description Required file pb.FileIndex No index integer No links object No pb.FileIndex \u00b6 Name Type Description Required added string No checksum string No hash string No key string No media string No meta string No mill string No name string No opts string No size integer No source string No targets [ string ] No pb.Files \u00b6 Name Type Description Required block string No caption string No comments [ pb.Comment ] No date string No files [ pb.File ] No likes [ pb.Like ] No target string No threads [ string ] No user pb.User No pb.FilesList \u00b6 Name Type Description Required items [ pb.Files ] No pb.InviteView \u00b6 Name Type Description Required date string No id string No inviter pb.User No name string No pb.InviteViewList \u00b6 Name Type Description Required items [ pb.InviteView ] No pb.Keys \u00b6 Name Type Description Required files object No pb.Like \u00b6 Name Type Description Required date string No id string No target pb.FeedItem No user pb.User No pb.LikeList \u00b6 Name Type Description Required items [ pb.Like ] No pb.Node \u00b6 Name Type Description Required json_schema string No links object No mill string No name string No opts object No pin boolean No plaintext boolean No pb.Notification \u00b6 Name Type Description Required actor string No block string No body string No date string No id string No read boolean No subject string No subject_desc string No target string No type integer No user pb.User view info No pb.NotificationList \u00b6 Name Type Description Required items [ pb.Notification ] No pb.Peer \u00b6 Name Type Description Required address string No avatar string No created string No id string No inboxes [ pb.Cafe ] No name string No updated string No pb.QueryResult \u00b6 Name Type Description Required date string No id string No local boolean No value string No pb.Summary \u00b6 Name Type Description Required account_peer_count integer No address string No contact_count integer No files_count integer No id string No thread_count integer No pb.Text \u00b6 Name Type Description Required block string No body string No comments [ pb.Comment ] No date string No likes [ pb.Like ] No user pb.User No pb.TextList \u00b6 Name Type Description Required items [ pb.Text ] No pb.Thread \u00b6 Name Type Description Required block_count integer No head string No head_blocks [ pb.Block ] view info No id string No initiator string No key string No name string No peer_count integer No schema string No schema_node pb.Node No sharing integer No sk [ integer ] No state integer No type integer No whitelist [ string ] No pb.ThreadList \u00b6 Name Type Description Required items [ pb.Thread ] No pb.User \u00b6 Name Type Description Required address string No avatar string No name string No","title":"The HTTP API"},{"location":"develop/the-http-api/#version-0","text":"","title":"Version: 0"},{"location":"develop/the-http-api/#terms-of-service","text":"https://github.com/textileio/go-textile/blob/master/TERMS Contact information: Textile https://textile.io/ contact@textile.io License: MIT License","title":"Terms of service"},{"location":"develop/the-http-api/#account","text":"","title":"/account"},{"location":"develop/the-http-api/#get","text":"","title":"GET"},{"location":"develop/the-http-api/#summary","text":"Show account contact","title":"Summary:"},{"location":"develop/the-http-api/#description","text":"Shows the local peer's account info as a contact","title":"Description:"},{"location":"develop/the-http-api/#responses","text":"Code Description Schema 200 contact pb.Contact 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#accountaddress","text":"","title":"/account/address"},{"location":"develop/the-http-api/#get_1","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_1","text":"Show account address","title":"Summary:"},{"location":"develop/the-http-api/#description_1","text":"Shows the local peer's account address","title":"Description:"},{"location":"develop/the-http-api/#responses_1","text":"Code Description Schema 200 address string","title":"Responses"},{"location":"develop/the-http-api/#accountseed","text":"","title":"/account/seed"},{"location":"develop/the-http-api/#get_2","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_2","text":"Show account seed","title":"Summary:"},{"location":"develop/the-http-api/#description_2","text":"Shows the local peer's account seed","title":"Description:"},{"location":"develop/the-http-api/#responses_2","text":"Code Description Schema 200 seed string","title":"Responses"},{"location":"develop/the-http-api/#blocks","text":"","title":"/blocks"},{"location":"develop/the-http-api/#get_3","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_3","text":"Paginates blocks in a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_3","text":"Paginates blocks in a thread. Blocks are the raw components in a thread. Think of them as an append-only log of thread updates where each update is hash-linked to its parent(s). New / recovering peers can sync history by simply traversing the hash tree.","title":"Description:"},{"location":"develop/the-http-api/#parameters","text":"Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_3","text":"Code Description Schema 200 blocks pb.BlockList 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#blocksid","text":"","title":"/blocks/{id}"},{"location":"develop/the-http-api/#delete","text":"","title":"DELETE"},{"location":"develop/the-http-api/#summary_4","text":"Remove thread block","title":"Summary:"},{"location":"develop/the-http-api/#description_4","text":"Removes a thread block by ID","title":"Description:"},{"location":"develop/the-http-api/#parameters_1","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_4","text":"Code Description Schema 201 block pb.Block 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#blocksidcomment","text":"","title":"/blocks/{id}/comment"},{"location":"develop/the-http-api/#get_4","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_5","text":"Get thread comment","title":"Summary:"},{"location":"develop/the-http-api/#description_5","text":"Gets a thread comment by block ID","title":"Description:"},{"location":"develop/the-http-api/#parameters_2","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_5","text":"Code Description Schema 200 comment pb.Comment 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#blocksidcomments","text":"","title":"/blocks/{id}/comments"},{"location":"develop/the-http-api/#get_5","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_6","text":"List comments","title":"Summary:"},{"location":"develop/the-http-api/#description_6","text":"Lists comments on a thread block","title":"Description:"},{"location":"develop/the-http-api/#parameters_3","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_6","text":"Code Description Schema 200 comments pb.CommentList 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#post","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_7","text":"Add a comment","title":"Summary:"},{"location":"develop/the-http-api/#description_7","text":"Adds a comment to a thread block","title":"Description:"},{"location":"develop/the-http-api/#parameters_4","text":"Name Located in Description Required Schema id path block id Yes string X-Textile-Args header urlescaped comment body Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_7","text":"Code Description Schema 201 comment pb.Comment 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#blocksidfiles","text":"","title":"/blocks/{id}/files"},{"location":"develop/the-http-api/#get_6","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_8","text":"Gets the metadata for a files block","title":"Summary:"},{"location":"develop/the-http-api/#parameters_5","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_8","text":"Code Description Schema 200 files pb.Files 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#blocksidfilesindexpathcontent","text":"","title":"/blocks/{id}/files/{index}/{path}/content"},{"location":"develop/the-http-api/#get_7","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_9","text":"Gets the decrypted file content of a file within a files block","title":"Summary:"},{"location":"develop/the-http-api/#parameters_6","text":"Name Located in Description Required Schema id path block id Yes string index path file index Yes string path path file path Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_9","text":"Code Description Schema 200 OK string 400 Bad Request string 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#blocksidfilesindexpathmeta","text":"","title":"/blocks/{id}/files/{index}/{path}/meta"},{"location":"develop/the-http-api/#get_8","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_10","text":"Gets the metadata of a file within a files block","title":"Summary:"},{"location":"develop/the-http-api/#parameters_7","text":"Name Located in Description Required Schema id path block id Yes string index path file index Yes string path path file path Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_10","text":"Code Description Schema 200 file pb.FileIndex 400 Bad Request string 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#blocksidlike","text":"","title":"/blocks/{id}/like"},{"location":"develop/the-http-api/#get_9","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_11","text":"Get thread like","title":"Summary:"},{"location":"develop/the-http-api/#description_8","text":"Gets a thread like by block ID","title":"Description:"},{"location":"develop/the-http-api/#parameters_8","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_11","text":"Code Description Schema 200 like pb.Like 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#blocksidlikes","text":"","title":"/blocks/{id}/likes"},{"location":"develop/the-http-api/#get_10","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_12","text":"List likes","title":"Summary:"},{"location":"develop/the-http-api/#description_9","text":"Lists likes on a thread block","title":"Description:"},{"location":"develop/the-http-api/#parameters_9","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_12","text":"Code Description Schema 200 likes pb.LikeList 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#post_1","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_13","text":"Add a like","title":"Summary:"},{"location":"develop/the-http-api/#description_10","text":"Adds a like to a thread block","title":"Description:"},{"location":"develop/the-http-api/#parameters_10","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_13","text":"Code Description Schema 201 like pb.Like 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#blocksidmeta","text":"","title":"/blocks/{id}/meta"},{"location":"develop/the-http-api/#get_11","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_14","text":"Gets the metadata for a block","title":"Summary:"},{"location":"develop/the-http-api/#parameters_11","text":"Name Located in Description Required Schema id path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_14","text":"Code Description Schema 200 block pb.Block 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#cafes","text":"","title":"/cafes"},{"location":"develop/the-http-api/#get_12","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_15","text":"List info about all active cafe sessions","title":"Summary:"},{"location":"develop/the-http-api/#description_11","text":"List info about all active cafe sessions. Cafes are other peers on the network who offer pinning, backup, and inbox services","title":"Description:"},{"location":"develop/the-http-api/#responses_15","text":"Code Description Schema 200 cafe sessions pb.CafeSessionList 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#post_2","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_16","text":"Register with a Cafe","title":"Summary:"},{"location":"develop/the-http-api/#description_12","text":"Registers with a cafe and saves an expiring service session token. An access token is required to register, and should be obtained separately from the target Cafe","title":"Description:"},{"location":"develop/the-http-api/#parameters_12","text":"Name Located in Description Required Schema X-Textile-Args header cafe id Yes string X-Textile-Opts header token: An access token supplied by the Cafe No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_16","text":"Code Description Schema 201 cafe session pb.CafeSession 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#cafesid","text":"","title":"/cafes/{id}"},{"location":"develop/the-http-api/#delete_1","text":"","title":"DELETE"},{"location":"develop/the-http-api/#summary_17","text":"Deregisters a cafe","title":"Summary:"},{"location":"develop/the-http-api/#description_13","text":"Deregisters with a cafe (content will expire based on the cafe's service rules)","title":"Description:"},{"location":"develop/the-http-api/#parameters_13","text":"Name Located in Description Required Schema id path cafe id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_17","text":"Code Description Schema 204 ok string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#get_13","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_18","text":"Gets and displays info about a cafe session","title":"Summary:"},{"location":"develop/the-http-api/#description_14","text":"Gets and displays info about a cafe session. Cafes are other peers on the network who offer pinning, backup, and inbox services","title":"Description:"},{"location":"develop/the-http-api/#parameters_14","text":"Name Located in Description Required Schema id path cafe id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_18","text":"Code Description Schema 200 cafe session pb.CafeSession 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#cafesmessages","text":"","title":"/cafes/messages"},{"location":"develop/the-http-api/#post_3","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_19","text":"Check for messages at all cafes","title":"Summary:"},{"location":"develop/the-http-api/#description_15","text":"Check for messages at all cafes. New messages are downloaded and processed opportunistically.","title":"Description:"},{"location":"develop/the-http-api/#responses_19","text":"Code Description Schema 200 ok string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#config","text":"","title":"/config"},{"location":"develop/the-http-api/#patch","text":"","title":"PATCH"},{"location":"develop/the-http-api/#summary_20","text":"Set/update config settings","title":"Summary:"},{"location":"develop/the-http-api/#description_16","text":"When patching config values, valid JSON types must be used. For example, a string should be escaped or wrapped in single quotes (e.g., \\\"127.0.0.1:40600\\\") and arrays and objects work fine (e.g. '{\"API\": \"127.0.0.1:40600\"}') but should be wrapped in single quotes. Be sure to restart the daemon for changes to take effect. See https://tools.ietf.org/html/rfc6902 for details on RFC6902 JSON patch format.","title":"Description:"},{"location":"develop/the-http-api/#parameters_15","text":"Name Located in Description Required Schema patch body An RFC6902 JSON patch (array of ops) Yes mill.Json","title":"Parameters"},{"location":"develop/the-http-api/#responses_20","text":"Code Description Schema 204 No Content string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#put","text":"","title":"PUT"},{"location":"develop/the-http-api/#summary_21","text":"Replace config settings.","title":"Summary:"},{"location":"develop/the-http-api/#description_17","text":"Replace entire config file contents. The config command controls configuration variables. It works much like 'git config'. The configuration values are stored in a config file inside the Textile repository.","title":"Description:"},{"location":"develop/the-http-api/#parameters_16","text":"Name Located in Description Required Schema config body JSON document Yes mill.Json","title":"Parameters"},{"location":"develop/the-http-api/#responses_21","text":"Code Description Schema 204 No Content string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#configpath","text":"","title":"/config/{path}"},{"location":"develop/the-http-api/#get_14","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_22","text":"Get active config settings","title":"Summary:"},{"location":"develop/the-http-api/#description_18","text":"Report the currently active config settings, which may differ from the values specifed when setting/patching values.","title":"Description:"},{"location":"develop/the-http-api/#parameters_17","text":"Name Located in Description Required Schema path path config path (e.g., Addresses/API) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_22","text":"Code Description Schema 200 new config value mill.Json 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#contacts","text":"","title":"/contacts"},{"location":"develop/the-http-api/#get_15","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_23","text":"List known contacts","title":"Summary:"},{"location":"develop/the-http-api/#description_19","text":"Lists known contacts.","title":"Description:"},{"location":"develop/the-http-api/#responses_23","text":"Code Description Schema 200 contacts pb.ContactList 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#contactsaddress","text":"","title":"/contacts/{address}"},{"location":"develop/the-http-api/#delete_2","text":"","title":"DELETE"},{"location":"develop/the-http-api/#summary_24","text":"Remove a contact","title":"Summary:"},{"location":"develop/the-http-api/#description_20","text":"Removes a known contact","title":"Description:"},{"location":"develop/the-http-api/#parameters_18","text":"Name Located in Description Required Schema address path address Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_24","text":"Code Description Schema 204 ok string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#get_16","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_25","text":"Get a known contact","title":"Summary:"},{"location":"develop/the-http-api/#description_21","text":"Gets a known contact","title":"Description:"},{"location":"develop/the-http-api/#parameters_19","text":"Name Located in Description Required Schema address path address Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_25","text":"Code Description Schema 200 contact pb.Contact 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#put_1","text":"","title":"PUT"},{"location":"develop/the-http-api/#summary_26","text":"Add to known contacts","title":"Summary:"},{"location":"develop/the-http-api/#description_22","text":"Adds a contact by username or account address to known contacts.","title":"Description:"},{"location":"develop/the-http-api/#parameters_20","text":"Name Located in Description Required Schema address path address Yes string contact body contact Yes pb.Contact","title":"Parameters"},{"location":"develop/the-http-api/#responses_26","text":"Code Description Schema 204 ok string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#contactssearch","text":"","title":"/contacts/search"},{"location":"develop/the-http-api/#post_4","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_27","text":"Search for contacts","title":"Summary:"},{"location":"develop/the-http-api/#description_23","text":"Search for contacts known locally and on the network","title":"Description:"},{"location":"develop/the-http-api/#parameters_21","text":"Name Located in Description Required Schema X-Textile-Opts header local: Whether to only search local contacts, remote: Whether to only search remote contacts, limit: Stops searching after limit results are found, wait: Stops searching after 'wait' seconds have elapsed (max 30s), username: search by username string, address: search by account address string, events: Whether to emit Server-Sent Events (SSEvent) or plain JSON No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_27","text":"Code Description Schema 200 results stream pb.QueryResult 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#feed","text":"","title":"/feed"},{"location":"develop/the-http-api/#get_17","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_28","text":"Paginates post and annotation block types","title":"Summary:"},{"location":"develop/the-http-api/#description_24","text":"Paginates post (join|leave|files|message) and annotation (comment|like) block types The mode option dictates how the feed is displayed: \"chrono\": All feed block types are shown. Annotations always nest their target post, i.e., the post a comment is about. \"annotated\": Annotations are nested under post targets, but are not shown in the top-level feed. \"stacks\": Related blocks are chronologically grouped into \"stacks\". A new stack is started if an unrelated block breaks continuity. This mode is used by Textile Photos. Stacks may include: The initial post with some nested annotations. Newer annotations may have already been listed. One or more annotations about a post. The newest annotation assumes the \"top\" position in the stack. Additional annotations are nested under the target. Newer annotations may have already been listed in the case as well.","title":"Description:"},{"location":"develop/the-http-api/#parameters_22","text":"Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5), mode: Feed mode (one of 'chrono', 'annotated', or 'stacks') No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_28","text":"Code Description Schema 200 feed pb.FeedItemList 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#filehashcontent","text":"","title":"/file/{hash}/content"},{"location":"develop/the-http-api/#get_18","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_29","text":"File content at hash","title":"Summary:"},{"location":"develop/the-http-api/#description_25","text":"Returns decrypted raw content for file","title":"Description:"},{"location":"develop/the-http-api/#parameters_23","text":"Name Located in Description Required Schema hash path file hash Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_29","text":"Code Description Schema 200 OK string 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#filetargetmeta","text":"","title":"/file/{target}/meta"},{"location":"develop/the-http-api/#get_19","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_30","text":"File metadata at hash","title":"Summary:"},{"location":"develop/the-http-api/#description_26","text":"Returns the metadata for file","title":"Description:"},{"location":"develop/the-http-api/#parameters_24","text":"Name Located in Description Required Schema hash path file hash Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_30","text":"Code Description Schema 200 file pb.FileIndex 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#files","text":"","title":"/files"},{"location":"develop/the-http-api/#get_20","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_31","text":"Paginates thread files","title":"Summary:"},{"location":"develop/the-http-api/#description_27","text":"Paginates thread files. If thread id not provided, paginate all files. Specify \"default\" to use the default thread (if set).","title":"Description:"},{"location":"develop/the-http-api/#parameters_25","text":"Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID. Omit for all, offset: Offset ID to start listing from. Omit for latest, limit: List page size. (default: 5) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_31","text":"Code Description Schema 200 files pb.FilesList 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#invites","text":"","title":"/invites"},{"location":"develop/the-http-api/#get_21","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_32","text":"List invites","title":"Summary:"},{"location":"develop/the-http-api/#description_28","text":"Lists all pending thread invites","title":"Description:"},{"location":"develop/the-http-api/#responses_32","text":"Code Description Schema 200 invites pb.InviteViewList","title":"Responses"},{"location":"develop/the-http-api/#post_5","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_33","text":"Create an invite to a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_29","text":"Creates a direct account-to-account or external invite to a thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_26","text":"Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default'), address: Account Address (omit to create an external invite) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_33","text":"Code Description Schema 201 invite pb.ExternalInvite 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#invitesidaccept","text":"","title":"/invites/{id}/accept"},{"location":"develop/the-http-api/#post_6","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_34","text":"Accept a thread invite","title":"Summary:"},{"location":"develop/the-http-api/#description_30","text":"Accepts a direct peer-to-peer or external invite to a thread. Use the key option with an external invite","title":"Description:"},{"location":"develop/the-http-api/#parameters_27","text":"Name Located in Description Required Schema id path invite id Yes string X-Textile-Opts header key: key for an external invite No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_34","text":"Code Description Schema 201 join block pb.Block 400 Bad Request string 409 Conflict string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#invitesidignore","text":"","title":"/invites/{id}/ignore"},{"location":"develop/the-http-api/#post_7","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_35","text":"Ignore a thread invite","title":"Summary:"},{"location":"develop/the-http-api/#description_31","text":"Ignores a direct peer-to-peer invite to a thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_28","text":"Name Located in Description Required Schema id path invite id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_35","text":"Code Description Schema 200 ok string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#ipfscatpath","text":"","title":"/ipfs/cat/{path}"},{"location":"develop/the-http-api/#get_22","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_36","text":"Cat IPFS data","title":"Summary:"},{"location":"develop/the-http-api/#description_32","text":"Displays the data behind an IPFS CID (hash) or Path","title":"Description:"},{"location":"develop/the-http-api/#parameters_29","text":"Name Located in Description Required Schema path path ipfs/ipns cid Yes string X-Textile-Opts header key: Key to decrypt data on-the-fly No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_36","text":"Code Description Schema 200 data [ integer ] 400 Bad Request string 401 Unauthorized string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#ipfsid","text":"","title":"/ipfs/id"},{"location":"develop/the-http-api/#get_23","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_37","text":"Get IPFS peer ID","title":"Summary:"},{"location":"develop/the-http-api/#description_33","text":"Displays underlying IPFS peer ID","title":"Description:"},{"location":"develop/the-http-api/#responses_37","text":"Code Description Schema 200 peer id string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#ipfsswarmconnect","text":"","title":"/ipfs/swarm/connect"},{"location":"develop/the-http-api/#post_8","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_38","text":"Opens a new direct connection to a peer address","title":"Summary:"},{"location":"develop/the-http-api/#description_34","text":"Opens a new direct connection to a peer using an IPFS multiaddr","title":"Description:"},{"location":"develop/the-http-api/#parameters_30","text":"Name Located in Description Required Schema X-Textile-Args header peer address Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_38","text":"Code Description Schema 200 ok [ string ] 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#ipfsswarmpeers","text":"","title":"/ipfs/swarm/peers"},{"location":"develop/the-http-api/#get_24","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_39","text":"List swarm peers","title":"Summary:"},{"location":"develop/the-http-api/#description_35","text":"Lists the set of peers this node is connected to","title":"Description:"},{"location":"develop/the-http-api/#parameters_31","text":"Name Located in Description Required Schema X-Textile-Opts header verbose: Display all extra information, latency: Also list information about latency to each peer, streams: Also list information about open streams for each peer, direction: Also list information about the direction of connection No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_39","text":"Code Description Schema 200 connection ipfs.ConnInfos 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#keystarget","text":"","title":"/keys/{target}"},{"location":"develop/the-http-api/#get_25","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_40","text":"Show file keys","title":"Summary:"},{"location":"develop/the-http-api/#description_36","text":"Shows file keys under the given target from an add","title":"Description:"},{"location":"develop/the-http-api/#parameters_32","text":"Name Located in Description Required Schema target path target id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_40","text":"Code Description Schema 200 keys pb.Keys 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#logssubsystem","text":"","title":"/logs/{subsystem}"},{"location":"develop/the-http-api/#post_9","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_41","text":"Access subsystem logs","title":"Summary:"},{"location":"develop/the-http-api/#description_37","text":"List or change the verbosity of one or all subsystems log output. Textile logs piggyback on the IPFS event logs","title":"Description:"},{"location":"develop/the-http-api/#parameters_33","text":"Name Located in Description Required Schema subsystem path subsystem logging identifier (omit for all) No string X-Textile-Opts header level: Log-level (one of: debug, info, warning, error, critical, or No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_41","text":"Code Description Schema 200 subsystems core.SubsystemInfo 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#messages","text":"","title":"/messages"},{"location":"develop/the-http-api/#get_26","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_42","text":"Paginates thread messages","title":"Summary:"},{"location":"develop/the-http-api/#description_38","text":"Paginates thread messages","title":"Description:"},{"location":"develop/the-http-api/#parameters_34","text":"Name Located in Description Required Schema X-Textile-Opts header thread: Thread ID (can also use 'default', omit for all), offset: Offset ID to start listing from (omit for latest), limit: List page size (default: 5) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_42","text":"Code Description Schema 200 messages pb.TextList 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#messagesblock","text":"","title":"/messages/{block}"},{"location":"develop/the-http-api/#get_27","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_43","text":"Get thread message","title":"Summary:"},{"location":"develop/the-http-api/#description_39","text":"Gets a thread message by block ID","title":"Description:"},{"location":"develop/the-http-api/#parameters_35","text":"Name Located in Description Required Schema block path block id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_43","text":"Code Description Schema 200 message pb.Text 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#millsblob","text":"","title":"/mills/blob"},{"location":"develop/the-http-api/#post_10","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_44","text":"Process raw data blobs","title":"Summary:"},{"location":"develop/the-http-api/#description_40","text":"Takes a binary data blob, and optionally encrypts it, before adding to IPFS, and returns a file object","title":"Description:"},{"location":"develop/the-http-api/#parameters_36","text":"Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted), use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_44","text":"Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#millsimageexif","text":"","title":"/mills/image/exif"},{"location":"develop/the-http-api/#post_11","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_45","text":"Extract EXIF data from image","title":"Summary:"},{"location":"develop/the-http-api/#description_41","text":"Takes an input image, and extracts its EXIF data (optionally encrypting output), before adding to IPFS, and returns a file object","title":"Description:"},{"location":"develop/the-http-api/#parameters_37","text":"Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_45","text":"Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#millsimageresize","text":"","title":"/mills/image/resize"},{"location":"develop/the-http-api/#post_12","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_46","text":"Resize an image","title":"Summary:"},{"location":"develop/the-http-api/#description_42","text":"Takes an input image, and resizes/resamples it (optionally encrypting output), before adding to IPFS, and returns a file object","title":"Description:"},{"location":"develop/the-http-api/#parameters_38","text":"Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS, width: the requested image width (required), quality: the requested JPEG image quality Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_46","text":"Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#millsjson","text":"","title":"/mills/json"},{"location":"develop/the-http-api/#post_13","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_47","text":"Process input JSON data","title":"Summary:"},{"location":"develop/the-http-api/#description_43","text":"Takes an input JSON document, validates it according to its json-schema.org definition, optionally encrypts the output before adding to IPFS, and returns a file object","title":"Description:"},{"location":"develop/the-http-api/#parameters_39","text":"Name Located in Description Required Schema file formData multipart/form-data file No file X-Textile-Opts header plaintext: whether to leave unencrypted, use: if empty, assumes body contains multipart form file data, otherwise, will attempt to fetch given CID from IPFS No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_47","text":"Code Description Schema 201 file pb.FileIndex 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#millsschema","text":"","title":"/mills/schema"},{"location":"develop/the-http-api/#post_14","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_48","text":"Validate, add, and pin a new Schema","title":"Summary:"},{"location":"develop/the-http-api/#description_44","text":"Takes a JSON-based Schema, validates it, adds it to IPFS, and returns a file object","title":"Description:"},{"location":"develop/the-http-api/#parameters_40","text":"Name Located in Description Required Schema schema body schema Yes pb.Node","title":"Parameters"},{"location":"develop/the-http-api/#responses_48","text":"Code Description Schema 201 file pb.FileIndex 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#notifications","text":"","title":"/notifications"},{"location":"develop/the-http-api/#get_28","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_49","text":"List notifications","title":"Summary:"},{"location":"develop/the-http-api/#description_45","text":"Lists all notifications generated by thread and account activity.","title":"Description:"},{"location":"develop/the-http-api/#responses_49","text":"Code Description Schema 200 notifications pb.NotificationList","title":"Responses"},{"location":"develop/the-http-api/#notificationsidread","text":"","title":"/notifications/{id}/read"},{"location":"develop/the-http-api/#post_15","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_50","text":"Mark notifiction as read","title":"Summary:"},{"location":"develop/the-http-api/#description_46","text":"Marks a notifiction as read by ID. Use 'all' to mark all as read.","title":"Description:"},{"location":"develop/the-http-api/#parameters_41","text":"Name Located in Description Required Schema id path notification id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_50","text":"Code Description Schema 200 ok string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#ping","text":"","title":"/ping"},{"location":"develop/the-http-api/#get_29","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_51","text":"Ping a network peer","title":"Summary:"},{"location":"develop/the-http-api/#description_47","text":"Pings another peer on the network, returning online|offline.","title":"Description:"},{"location":"develop/the-http-api/#parameters_42","text":"Name Located in Description Required Schema X-Textile-Args header peerid Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_51","text":"Code Description Schema 200 One of online offline 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#profile","text":"","title":"/profile"},{"location":"develop/the-http-api/#get_30","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_52","text":"Get public profile","title":"Summary:"},{"location":"develop/the-http-api/#description_48","text":"Gets the local node's public profile","title":"Description:"},{"location":"develop/the-http-api/#responses_52","text":"Code Description Schema 200 peer pb.Peer 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#profileavatar","text":"","title":"/profile/avatar"},{"location":"develop/the-http-api/#post_16","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_53","text":"Set avatar","title":"Summary:"},{"location":"develop/the-http-api/#description_49","text":"Forces local node to update avatar image to latest image added to 'account' thread","title":"Description:"},{"location":"develop/the-http-api/#responses_53","text":"Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#profilename","text":"","title":"/profile/name"},{"location":"develop/the-http-api/#post_17","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_54","text":"Set display name","title":"Summary:"},{"location":"develop/the-http-api/#description_50","text":"Sets public profile display name to given string","title":"Description:"},{"location":"develop/the-http-api/#parameters_43","text":"Name Located in Description Required Schema X-Textile-Args header name Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_54","text":"Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#snapshots","text":"","title":"/snapshots"},{"location":"develop/the-http-api/#post_18","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_55","text":"Create thread snapshots","title":"Summary:"},{"location":"develop/the-http-api/#description_51","text":"Snapshots all threads and pushes to registered cafes","title":"Description:"},{"location":"develop/the-http-api/#responses_55","text":"Code Description Schema 201 ok string 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#snapshotssearch","text":"","title":"/snapshots/search"},{"location":"develop/the-http-api/#post_19","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_56","text":"Search for thread snapshots","title":"Summary:"},{"location":"develop/the-http-api/#description_52","text":"Searches the network for thread snapshots","title":"Description:"},{"location":"develop/the-http-api/#parameters_44","text":"Name Located in Description Required Schema X-Textile-Opts header wait: Stops searching after 'wait' seconds have elapsed (max 30s), events: Whether to emit Server-Sent Events (SSEvent) or plain JSON No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_56","text":"Code Description Schema 200 results stream pb.QueryResult 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#subscribeid","text":"","title":"/subscribe/{id}"},{"location":"develop/the-http-api/#get_31","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_57","text":"Subscribe to thread updates","title":"Summary:"},{"location":"develop/the-http-api/#description_53","text":"Subscribes to updates in a thread or all threads. An update is generated when a new block is added to a thread. There are several update types: MERGE, IGNORE, FLAG, JOIN, ANNOUNCE, LEAVE, TEXT, FILES, COMMENT, LIKE","title":"Description:"},{"location":"develop/the-http-api/#parameters_45","text":"Name Located in Description Required Schema id path thread id, omit to stream all events No string X-Textile-Opts header type: Or'd list of event types (e.g., FILES COMMENTS LIKES) or empty to include all types, events: Whether to emit Server-Sent Events (SSEvent) or plain JSON","title":"Parameters"},{"location":"develop/the-http-api/#responses_57","text":"Code Description Schema 200 stream of updates pb.FeedItem 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#summary_58","text":"","title":"/summary"},{"location":"develop/the-http-api/#get_32","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_59","text":"Get a summary of node data","title":"Summary:"},{"location":"develop/the-http-api/#responses_58","text":"Code Description Schema 200 summary pb.Summary","title":"Responses"},{"location":"develop/the-http-api/#threads","text":"","title":"/threads"},{"location":"develop/the-http-api/#get_33","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_60","text":"Lists info on all threads","title":"Summary:"},{"location":"develop/the-http-api/#description_54","text":"Lists all local threads, returning a ThreadList object","title":"Description:"},{"location":"develop/the-http-api/#responses_59","text":"Code Description Schema 200 threads pb.ThreadList 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#post_20","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_61","text":"Adds and joins a new thread","title":"Summary:"},{"location":"develop/the-http-api/#description_55","text":"Adds a new Thread with given name, type, and sharing and whitelist options, returning a Thread object","title":"Description:"},{"location":"develop/the-http-api/#parameters_46","text":"Name Located in Description Required Schema X-Textile-Args header name Yes string X-Textile-Opts header key: A locally unique key used by an app to identify this thread on recovery, schema: Existing Thread Schema IPFS CID, type: Set the thread type to one of 'private', 'read_only', 'public', or 'open', sharing: Set the thread sharing style to one of 'not_shared','invite_only', or 'shared', whitelist: An array of contact addresses. When supplied, the thread will not allow additional peers beyond those in array, useful for 1-1 chat/file sharing No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_60","text":"Code Description Schema 201 thread pb.Thread 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#threadsid","text":"","title":"/threads/{id}"},{"location":"develop/the-http-api/#delete_3","text":"","title":"DELETE"},{"location":"develop/the-http-api/#summary_62","text":"Leave and remove a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_56","text":"Leaves and removes a thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_47","text":"Name Located in Description Required Schema id path thread id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_61","text":"Code Description Schema 204 ok string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#get_34","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_63","text":"Gets a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_57","text":"Gets and displays info about a thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_48","text":"Name Located in Description Required Schema id path thread id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_62","text":"Code Description Schema 200 thread pb.Thread 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#put_2","text":"","title":"PUT"},{"location":"develop/the-http-api/#summary_64","text":"Add or update a thread directly","title":"Summary:"},{"location":"develop/the-http-api/#description_58","text":"Adds or updates a thread directly, usually from a backup","title":"Description:"},{"location":"develop/the-http-api/#parameters_49","text":"Name Located in Description Required Schema id path id Yes string thread body thread Yes pb.Thread","title":"Parameters"},{"location":"develop/the-http-api/#responses_63","text":"Code Description Schema 204 ok string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#threadsidfiles","text":"","title":"/threads/{id}/files"},{"location":"develop/the-http-api/#post_21","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_65","text":"Adds a file or directory of files to a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_59","text":"Adds a file or directory of files to a thread. Files not supported by the thread schema are ignored. Nested directories are included. An existing file hash may also be used as input.","title":"Description:"},{"location":"develop/the-http-api/#parameters_50","text":"Name Located in Description Required Schema dir body list of milled dirs (output from mill endpoint) Yes pb.DirectoryList X-Textile-Opts header caption: Caption to add to file(s) No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_64","text":"Code Description Schema 201 file pb.Files 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#threadsidmessages","text":"","title":"/threads/{id}/messages"},{"location":"develop/the-http-api/#post_22","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_66","text":"Add a message","title":"Summary:"},{"location":"develop/the-http-api/#description_60","text":"Adds a message to a thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_51","text":"Name Located in Description Required Schema X-Textile-Args header urlescaped message body Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_65","text":"Code Description Schema 200 message pb.Text 400 Bad Request string 404 Not Found string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#threadsidname","text":"","title":"/threads/{id}/name"},{"location":"develop/the-http-api/#put_3","text":"","title":"PUT"},{"location":"develop/the-http-api/#summary_67","text":"Rename a thread","title":"Summary:"},{"location":"develop/the-http-api/#description_61","text":"Renames a thread. Only initiators can rename a thread.","title":"Description:"},{"location":"develop/the-http-api/#parameters_52","text":"Name Located in Description Required Schema id path id Yes string X-Textile-Args header name Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_66","text":"Code Description Schema 204 ok string 400 Bad Request string","title":"Responses"},{"location":"develop/the-http-api/#threadsidpeers","text":"","title":"/threads/{id}/peers"},{"location":"develop/the-http-api/#get_35","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_68","text":"List all thread peers","title":"Summary:"},{"location":"develop/the-http-api/#description_62","text":"Lists all peers in a thread, optionally listing peers in the default thread","title":"Description:"},{"location":"develop/the-http-api/#parameters_53","text":"Name Located in Description Required Schema id path thread id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_67","text":"Code Description Schema 200 contacts pb.ContactList 404 Not Found string","title":"Responses"},{"location":"develop/the-http-api/#tokens","text":"","title":"/tokens"},{"location":"develop/the-http-api/#get_36","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_69","text":"List local tokens","title":"Summary:"},{"location":"develop/the-http-api/#description_63","text":"List info about all stored cafe tokens","title":"Description:"},{"location":"develop/the-http-api/#responses_68","text":"Code Description Schema 200 tokens [ string ] 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#post_23","text":"","title":"POST"},{"location":"develop/the-http-api/#summary_70","text":"Create an access token","title":"Summary:"},{"location":"develop/the-http-api/#description_64","text":"Generates an access token (44 random bytes) and saves a bcrypt hashed version for future lookup. The response contains a base58 encoded version of the random bytes token. If the 'store' option is set to false, the token is generated, but not stored in the local Cafe db. Alternatively, an existing token can be added using by specifying the 'token' option. Tokens allow other peers to register with a Cafe peer.","title":"Description:"},{"location":"develop/the-http-api/#parameters_54","text":"Name Located in Description Required Schema X-Textile-Opts header token: Use existing token, rather than creating a new one, store: Whether to store the added/generated token to the local db No string","title":"Parameters"},{"location":"develop/the-http-api/#responses_69","text":"Code Description Schema 201 token string 400 Bad Request string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#tokensid","text":"","title":"/tokens/{id}"},{"location":"develop/the-http-api/#delete_4","text":"","title":"DELETE"},{"location":"develop/the-http-api/#summary_71","text":"Removes a cafe token","title":"Summary:"},{"location":"develop/the-http-api/#description_65","text":"Removes an existing cafe token","title":"Description:"},{"location":"develop/the-http-api/#parameters_55","text":"Name Located in Description Required Schema token path token Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_70","text":"Code Description Schema 204 ok string 500 Internal Server Error string","title":"Responses"},{"location":"develop/the-http-api/#get_37","text":"","title":"GET"},{"location":"develop/the-http-api/#summary_72","text":"Check token validity","title":"Summary:"},{"location":"develop/the-http-api/#description_66","text":"Check validity of existing cafe access token","title":"Description:"},{"location":"develop/the-http-api/#parameters_56","text":"Name Located in Description Required Schema token path invite id Yes string","title":"Parameters"},{"location":"develop/the-http-api/#responses_71","text":"Code Description Schema 200 ok string 401 Unauthorized string","title":"Responses"},{"location":"develop/the-http-api/#models","text":"","title":"Models"},{"location":"develop/the-http-api/#coresubsysteminfo","text":"Name Type Description Required core.SubsystemInfo object","title":"core.SubsystemInfo"},{"location":"develop/the-http-api/#ipfsconninfos","text":"Name Type Description Required peers [ ipfs.connInfo ] No","title":"ipfs.ConnInfos"},{"location":"develop/the-http-api/#ipfsconninfo","text":"Name Type Description Required addr string No direction string No latency string No muxer string No peer string No streams [ ipfs.streamInfo ] No","title":"ipfs.connInfo"},{"location":"develop/the-http-api/#ipfsstreaminfo","text":"Name Type Description Required protocol string No","title":"ipfs.streamInfo"},{"location":"develop/the-http-api/#milljson","text":"Name Type Description Required mill.Json object","title":"mill.Json"},{"location":"develop/the-http-api/#pbblock","text":"Name Type Description Required author string No body string No date string No id string No parents [ string ] No target string No thread string No type integer No user pb.User view info No","title":"pb.Block"},{"location":"develop/the-http-api/#pbblocklist","text":"Name Type Description Required items [ pb.Block ] No","title":"pb.BlockList"},{"location":"develop/the-http-api/#pbcafe","text":"Name Type Description Required address string No api string No node string No peer string No protocol string No url string No","title":"pb.Cafe"},{"location":"develop/the-http-api/#pbcafesession","text":"Name Type Description Required access string No cafe pb.Cafe No exp string No id string No refresh string No rexp string No subject string No type string No","title":"pb.CafeSession"},{"location":"develop/the-http-api/#pbcafesessionlist","text":"Name Type Description Required items [ pb.CafeSession ] No","title":"pb.CafeSessionList"},{"location":"develop/the-http-api/#pbcomment","text":"Name Type Description Required body string No date string No id string No target pb.FeedItem No user pb.User No","title":"pb.Comment"},{"location":"develop/the-http-api/#pbcommentlist","text":"Name Type Description Required items [ pb.Comment ] No","title":"pb.CommentList"},{"location":"develop/the-http-api/#pbcontact","text":"Name Type Description Required address string No avatar string No name string No peers [ pb.Peer ] No threads [ string ] No","title":"pb.Contact"},{"location":"develop/the-http-api/#pbcontactlist","text":"Name Type Description Required items [ pb.Contact ] No","title":"pb.ContactList"},{"location":"develop/the-http-api/#pbdirectory","text":"Name Type Description Required files object No","title":"pb.Directory"},{"location":"develop/the-http-api/#pbdirectorylist","text":"Name Type Description Required items [ pb.Directory ] No","title":"pb.DirectoryList"},{"location":"develop/the-http-api/#pbexternalinvite","text":"Name Type Description Required id string No inviter string No key string No","title":"pb.ExternalInvite"},{"location":"develop/the-http-api/#pbfeeditem","text":"Name Type Description Required block string No payload string No thread string No","title":"pb.FeedItem"},{"location":"develop/the-http-api/#pbfeeditemlist","text":"Name Type Description Required count integer No items [ pb.FeedItem ] No next string No","title":"pb.FeedItemList"},{"location":"develop/the-http-api/#pbfile","text":"Name Type Description Required file pb.FileIndex No index integer No links object No","title":"pb.File"},{"location":"develop/the-http-api/#pbfileindex","text":"Name Type Description Required added string No checksum string No hash string No key string No media string No meta string No mill string No name string No opts string No size integer No source string No targets [ string ] No","title":"pb.FileIndex"},{"location":"develop/the-http-api/#pbfiles","text":"Name Type Description Required block string No caption string No comments [ pb.Comment ] No date string No files [ pb.File ] No likes [ pb.Like ] No target string No threads [ string ] No user pb.User No","title":"pb.Files"},{"location":"develop/the-http-api/#pbfileslist","text":"Name Type Description Required items [ pb.Files ] No","title":"pb.FilesList"},{"location":"develop/the-http-api/#pbinviteview","text":"Name Type Description Required date string No id string No inviter pb.User No name string No","title":"pb.InviteView"},{"location":"develop/the-http-api/#pbinviteviewlist","text":"Name Type Description Required items [ pb.InviteView ] No","title":"pb.InviteViewList"},{"location":"develop/the-http-api/#pbkeys","text":"Name Type Description Required files object No","title":"pb.Keys"},{"location":"develop/the-http-api/#pblike","text":"Name Type Description Required date string No id string No target pb.FeedItem No user pb.User No","title":"pb.Like"},{"location":"develop/the-http-api/#pblikelist","text":"Name Type Description Required items [ pb.Like ] No","title":"pb.LikeList"},{"location":"develop/the-http-api/#pbnode","text":"Name Type Description Required json_schema string No links object No mill string No name string No opts object No pin boolean No plaintext boolean No","title":"pb.Node"},{"location":"develop/the-http-api/#pbnotification","text":"Name Type Description Required actor string No block string No body string No date string No id string No read boolean No subject string No subject_desc string No target string No type integer No user pb.User view info No","title":"pb.Notification"},{"location":"develop/the-http-api/#pbnotificationlist","text":"Name Type Description Required items [ pb.Notification ] No","title":"pb.NotificationList"},{"location":"develop/the-http-api/#pbpeer","text":"Name Type Description Required address string No avatar string No created string No id string No inboxes [ pb.Cafe ] No name string No updated string No","title":"pb.Peer"},{"location":"develop/the-http-api/#pbqueryresult","text":"Name Type Description Required date string No id string No local boolean No value string No","title":"pb.QueryResult"},{"location":"develop/the-http-api/#pbsummary","text":"Name Type Description Required account_peer_count integer No address string No contact_count integer No files_count integer No id string No thread_count integer No","title":"pb.Summary"},{"location":"develop/the-http-api/#pbtext","text":"Name Type Description Required block string No body string No comments [ pb.Comment ] No date string No likes [ pb.Like ] No user pb.User No","title":"pb.Text"},{"location":"develop/the-http-api/#pbtextlist","text":"Name Type Description Required items [ pb.Text ] No","title":"pb.TextList"},{"location":"develop/the-http-api/#pbthread","text":"Name Type Description Required block_count integer No head string No head_blocks [ pb.Block ] view info No id string No initiator string No key string No name string No peer_count integer No schema string No schema_node pb.Node No sharing integer No sk [ integer ] No state integer No type integer No whitelist [ string ] No","title":"pb.Thread"},{"location":"develop/the-http-api/#pbthreadlist","text":"Name Type Description Required items [ pb.Thread ] No","title":"pb.ThreadList"},{"location":"develop/the-http-api/#pbuser","text":"Name Type Description Required address string No avatar string No name string No","title":"pb.User"},{"location":"develop/clients/android/","text":"The Android SDK is designed to work in Android mobile apps written in Java or Kotlin. Apps running the Android SDK run an on device Textile peer (including a managed IPFS peer). The SDK provides you with a number of helpful APIs to manage sharing, contacts, file encryption & storage, and much more. Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using Java or jump to the full API documentation if you are ready. Installation \u00b6 The Textile Android library is published in Textile's Bintray Maven repository . The library source is published on GitHub . Gradle \u00b6 First, you'll need to add Textile's Bintray Maven repository to you project's top level build.gradle in the allProjects.repositories section: allprojects { repositories { ... maven { url \"https://dl.bintray.com/textile/maven\" } ... } } Next, add the Textile dependency to your app module's build.gradle dependencies section, specifying the latest version available : dependencies { ... implementation 'io.textile:textile:0.1.20' ... } Getting Started \u00b6 Initialize Textile \u00b6 Then, in your application\u2019s MainActivity.java , setup Textile as follows, try { Context ctx = getApplicationContext (); final File filesDir = ctx . getFilesDir (); final String path = new File ( filesDir , \"textile-repo\" ). getAbsolutePath (); if (! Textile . isInitialized ( path )) { String phrase = Textile . initializeCreatingNewWalletAndAccount ( path , true , false ); System . out . println ( phrase ); // Return phrase to the user for secure, out of app, storage } Textile . launch ( ctx , path , true ); class MyEventListener extends BaseTextileEventListener { // ... } Textile . instance (). addEventListener ( new MyEventListener ()); } catch ( Exception e ) { System . out . println ( e . getMessage ()); } By default, the Textile instance will manage itself during app life-cycle events as long as you initialize it correctly in your app, meaning your app will be connected to the IPFS network whenever your app requires it. Get the account display name \u00b6 Android String name = Textile . instance (). profile . name (); Subscribe to file updates \u00b6 Android // Add an event listener that conforms to TextileEventListener class MyEventListener extends BaseTextileEventListener { @Override public void threadUpdateReceived ( io . textile . pb . View . FeedItem feedItem ) { if ( feedItem . getPayload (). getTypeUrl () == \"/Files\" ) { // new file! } } } Textile . instance (). addEventListener ( new MyEventListener ()); Subscribe to raw ipfs pubsub topic \u00b6 Android String queryId = Textile . instance (). ipfs . pubsubSub ( \"SomeTopicEgThreadId\" ); // Add an event listener that conforms to TextileEventListener class MyEventListener extends BaseTextileEventListener { @Override public void pubsubQueryResult ( final String queryId , final String message , final String messageId ) { // new ipfs pubsub message! } } Textile . instance (). addEventListener ( new MyEventListener ()); Fetch chronological thread updates \u00b6 Android FeedRequest request = FeedRequest . newBuilder () . setThread ( \"<thread-id>\" ) . build (); FeedItemList feedItemList = Textile . instance (). feed . list ( request ); Create a thread \u00b6 Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . BLOB ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.Basic\" ) . setName ( \"Basic\" ) . setType ( Thread . Type . PRIVATE ) . setSharing ( Thread . Sharing . NOT_SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config ); Add a file \u00b6 Android final String threadId = \"<thread-id>\" ; byte [] jsonData = \"{ latitude: 48.858093, longitude: 2.294694 }\" . getBytes (); String dataString = Base64 . encodeToString ( jsonData , Base64 . DEFAULT ); Textile . instance (). files . prepare ( dataString , threadId , new PreparedFilesHandler () { @Override public void onFilesPrepared ( MobilePreparedFiles preparedFiles ) { try { Textile . instance (). files . add ( preparedFiles . getDir (), threadId , null ); } catch ( Exception e ) { // Do something with this error } } @Override public void onError ( Exception e ) { // Do something with this error } }); Files stored on disk \u00b6 You can add files stored on disk by passing the path information. Android final String threadId = \"<thread-id>\" ; String filePath = \"/path/to/mmm-bytes....\" ; Textile . instance (). files . prepareByPath ( filePath , threadId , new PreparedFilesHandler () { @Override public void onFilesPrepared ( MobilePreparedFiles preparedFiles ) { try { Textile . instance (). files . add ( preparedFiles . getDir (), threadId , null ); } catch ( Exception e ) { // Do something with this error } } @Override public void onError ( Exception e ) { // Do something with this error } }); Get a file \u00b6 Android String hash = \"some file hash\" ; String base64 = Textile . instance (). files . data ( hash ); Example application \u00b6 The android-textile repo contains a simple code example you may find useful in your exploration. API Documentation \u00b6 The full API documentation for Textile's Android SDK (android-textile) can be found at https://textileio.github.io/android-textile . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"Android"},{"location":"develop/clients/android/#installation","text":"The Textile Android library is published in Textile's Bintray Maven repository . The library source is published on GitHub .","title":"Installation"},{"location":"develop/clients/android/#gradle","text":"First, you'll need to add Textile's Bintray Maven repository to you project's top level build.gradle in the allProjects.repositories section: allprojects { repositories { ... maven { url \"https://dl.bintray.com/textile/maven\" } ... } } Next, add the Textile dependency to your app module's build.gradle dependencies section, specifying the latest version available : dependencies { ... implementation 'io.textile:textile:0.1.20' ... }","title":"Gradle"},{"location":"develop/clients/android/#getting-started","text":"","title":"Getting Started"},{"location":"develop/clients/android/#initialize-textile","text":"Then, in your application\u2019s MainActivity.java , setup Textile as follows, try { Context ctx = getApplicationContext (); final File filesDir = ctx . getFilesDir (); final String path = new File ( filesDir , \"textile-repo\" ). getAbsolutePath (); if (! Textile . isInitialized ( path )) { String phrase = Textile . initializeCreatingNewWalletAndAccount ( path , true , false ); System . out . println ( phrase ); // Return phrase to the user for secure, out of app, storage } Textile . launch ( ctx , path , true ); class MyEventListener extends BaseTextileEventListener { // ... } Textile . instance (). addEventListener ( new MyEventListener ()); } catch ( Exception e ) { System . out . println ( e . getMessage ()); } By default, the Textile instance will manage itself during app life-cycle events as long as you initialize it correctly in your app, meaning your app will be connected to the IPFS network whenever your app requires it.","title":"Initialize Textile"},{"location":"develop/clients/android/#get-the-account-display-name","text":"Android String name = Textile . instance (). profile . name ();","title":"Get the account display name"},{"location":"develop/clients/android/#subscribe-to-file-updates","text":"Android // Add an event listener that conforms to TextileEventListener class MyEventListener extends BaseTextileEventListener { @Override public void threadUpdateReceived ( io . textile . pb . View . FeedItem feedItem ) { if ( feedItem . getPayload (). getTypeUrl () == \"/Files\" ) { // new file! } } } Textile . instance (). addEventListener ( new MyEventListener ());","title":"Subscribe to file updates"},{"location":"develop/clients/android/#subscribe-to-raw-ipfs-pubsub-topic","text":"Android String queryId = Textile . instance (). ipfs . pubsubSub ( \"SomeTopicEgThreadId\" ); // Add an event listener that conforms to TextileEventListener class MyEventListener extends BaseTextileEventListener { @Override public void pubsubQueryResult ( final String queryId , final String message , final String messageId ) { // new ipfs pubsub message! } } Textile . instance (). addEventListener ( new MyEventListener ());","title":"Subscribe to raw ipfs pubsub topic"},{"location":"develop/clients/android/#fetch-chronological-thread-updates","text":"Android FeedRequest request = FeedRequest . newBuilder () . setThread ( \"<thread-id>\" ) . build (); FeedItemList feedItemList = Textile . instance (). feed . list ( request );","title":"Fetch chronological thread updates"},{"location":"develop/clients/android/#create-a-thread","text":"Android AddThreadConfig . Schema schema = AddThreadConfig . Schema . newBuilder () . setPreset ( AddThreadConfig . Schema . Preset . BLOB ) . build (); AddThreadConfig config = AddThreadConfig . newBuilder () . setKey ( \"your.bundle.id.version.Basic\" ) . setName ( \"Basic\" ) . setType ( Thread . Type . PRIVATE ) . setSharing ( Thread . Sharing . NOT_SHARED ) . setSchema ( schema ) . build (); Textile . instance (). threads . add ( config );","title":"Create a thread"},{"location":"develop/clients/android/#add-a-file","text":"Android final String threadId = \"<thread-id>\" ; byte [] jsonData = \"{ latitude: 48.858093, longitude: 2.294694 }\" . getBytes (); String dataString = Base64 . encodeToString ( jsonData , Base64 . DEFAULT ); Textile . instance (). files . prepare ( dataString , threadId , new PreparedFilesHandler () { @Override public void onFilesPrepared ( MobilePreparedFiles preparedFiles ) { try { Textile . instance (). files . add ( preparedFiles . getDir (), threadId , null ); } catch ( Exception e ) { // Do something with this error } } @Override public void onError ( Exception e ) { // Do something with this error } });","title":"Add a file"},{"location":"develop/clients/android/#files-stored-on-disk","text":"You can add files stored on disk by passing the path information. Android final String threadId = \"<thread-id>\" ; String filePath = \"/path/to/mmm-bytes....\" ; Textile . instance (). files . prepareByPath ( filePath , threadId , new PreparedFilesHandler () { @Override public void onFilesPrepared ( MobilePreparedFiles preparedFiles ) { try { Textile . instance (). files . add ( preparedFiles . getDir (), threadId , null ); } catch ( Exception e ) { // Do something with this error } } @Override public void onError ( Exception e ) { // Do something with this error } });","title":"Files stored on disk"},{"location":"develop/clients/android/#get-a-file","text":"Android String hash = \"some file hash\" ; String base64 = Textile . instance (). files . data ( hash );","title":"Get a file"},{"location":"develop/clients/android/#example-application","text":"The android-textile repo contains a simple code example you may find useful in your exploration.","title":"Example application"},{"location":"develop/clients/android/#api-documentation","text":"The full API documentation for Textile's Android SDK (android-textile) can be found at https://textileio.github.io/android-textile . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"API Documentation"},{"location":"develop/clients/command-line/","text":"Command-line \u00b6 The command-line client ships alongside the daemon. Usage information for all commands, including sub-commands, is available via the --help flag. pre { background: inherit !important; word-wrap: inherit !important; white-space: pre-wrap !important; }","title":"Command-line"},{"location":"develop/clients/command-line/#command-line","text":"The command-line client ships alongside the daemon. Usage information for all commands, including sub-commands, is available via the --help flag. pre { background: inherit !important; word-wrap: inherit !important; white-space: pre-wrap !important; }","title":"Command-line"},{"location":"develop/clients/ios/","text":"The iOS SDK is designed to work in iOS mobile apps written in Objective-C or Swift. Apps running the iOS SDK run an on device Textile peer (including a managed IPFS peer). The SDK provides you with a number of helpful APIs to manage sharing, contacts, file encryption & storage, and much more. Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using Swift or Objective-C or jump to the full API documentation if you are ready. Installation \u00b6 The iOS is published as a pod on CocoaPod.org . The library is also published on GitHub . CocoaPods \u00b6 If you haven't already, you'll need to setup CocoaPods in your project . Next, add Textile to your project. pod 'Textile' This will install the latest version of the SDK into your app. Carthage (experimental) \u00b6 Carthage support is minimally tested today, but if you are a Carthage user and would like to try, we'd love a PR here to update this process. github \"textileio/ios-textile\" There you'll need two dependencies that are the Protobuf library from Google and the Textile Core iOS library available on our releases page . You can see how those are handled in our CocoaPods setup . Getting Started \u00b6 Initialize Textile \u00b6 Objective-C \u00b6 Then in your application delegate\u2019s - application:didFinishLaunchingWithOptions: method, setup Textile as follows, // Early on in the app lifecycle, usually in AppDelegate // Initialize a new Textile wallet for the user. NSString * documents = [ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) objectAtIndex : 0 ]; NSString * repoPath = [ documents stringByAppendingPathComponent : @\"textile-repo\" ]; if ( ! [ Textile isInitialized : repoPath ]) { NSError * error ; NSString * recoveryPhrase = [ Textile initializeCreatingNewWalletAndAccount : repoPath debug : NO logToDisk : NO error : & error ]; if ( ! recoveryPhrase ) { NSLog ( @\"init error: %@\" , error . localizedDescription ); } // Return phrase to the user for secure, out of app, storage } NSError * error ; BOOL launched = [ Textile launch : repoPath debug : NO error : & error ]; if ( ! launched ) { NSLog ( @\"launch error: %@\" , error . localizedDescription ); } // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = self ; Swift \u00b6 let documentsPath = NSSearchPathForDirectoriesInDomains (. documentDirectory , . userDomainMask , true )[ 0 ] let repoPath = ( documentsPath as NSString ). appendingPathComponent ( \"textile-repo\" ) if ( ! Textile . isInitialized ( repoPath )) { var error : NSError ? let recoveryPhrase = Textile . initializeCreatingNewWalletAndAccount ( repoPath , debug : false , logToDisk : false , error : & error ) // Return phrase to the user for secure, out of app, storage } do { try Textile . launch ( repoPath , debug : false ) } catch { // handle launch error } // Set the Textile delegate to self so we can make use of events such nodeStarted Textile . instance (). delegate = self By default, the Textile instance will manage itself during app life-cycle events as long as you initialize it correctly in your app, meaning your app will be connected to the IPFS network whenever your app requires it. Get the account display name \u00b6 Objective-C NSError * error ; NSString * name = [ Textile . instance . profile name : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let name = Textile . instance (). profile . name (& error ) if ( error != nil ) { // Do something with this error } else { // Success! } Subscribe to file updates \u00b6 Objective-C // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = delegate ; // The delegate can receive callbacks for any event it is interested in, for example - ( void ) threadUpdateReceived: ( FeedItem * ) feedItem { if ([ feedItem . payload . typeURL isEqualToString : @\"/Files\" ]) { // new file! } } Swift // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance (). delegate = delegate // The delegate can receive callbacks for any event it is interested in, for example func threadUpdateReceived ( _ feedItem : FeedItem ) { if ( feedItem . payload . typeURL == \"/Files\" ) { // new file! } } Subscribe to raw ipfs pubsub topic \u00b6 Objective-C NSError * error ; NSString * queryId = [ Textile . instance . ipfs pubsubSub : @\"SomeTopicEgThreadId\" error : & error ]; // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = delegate ; // The delegate can receive callbacks for any event it is interested in, for example - ( void ) pubsubQueryResult: ( NSString * ) queryId message: ( NSString * ) message messageId: ( NSString * ) messageId { // new ipfs pubsub message! } Swift var queryId = Textile . instance (). ipfs . pubsubSub ( topic : \"SomeTopicEgThreadId\" , error : SomeUserDefinedNSError ); // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance (). delegate = delegate // The delegate can receive callbacks for any event it is interested in, for example func pubsubQueryResult ( _ queryId : String , _ message : String , _ messageId : String ) { // new ipfs pubsub message! } Fetch chronological thread updates \u00b6 Objective-C FeedRequest * request = [[ FeedRequest alloc ] init ]; request . thread = @\"<thread-id>\" ; NSError * error ; FeedItemList * feedItemList = [ Textile . instance . feed list : request error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift let request = FeedRequest () request . thread = \"\" var error : NSError ? let feedItemList = Textile . instance (). feed . list ( request , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Create a thread \u00b6 Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_Blob ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Basic\" ; config . name = @\"Basic\" ; config . type = Thread_Type_Private ; config . sharing = Thread_Sharing_NotShared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . blob let config = AddThreadConfig () config . key = \"your.bundle.id.version.Basic\" config . name = \"Basic\" config . type = Thread_Type . private config . sharing = Thread_Sharing . notShared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Add a file \u00b6 Objective-C NSString * threadId = @\"<thread-id>\" ; NSData * jsonData = [ @\"{ latitude: 48.858093, longitude: 2.294694 }\" dataUsingEncoding : NSUTF8StringEncoding ]; NSString * dataString = [ jsonData base64EncodedStringWithOptions : 0 ]; [ Textile . instance . files prepare : dataString threadId : threadId completion : ^ ( MobilePreparedFiles * preparedFiles , NSError * error ) { if ( error ) { // Do something with this error } else { NSError * error ; [ Textile . instance . files add : preparedFiles . dir threadId : threadId caption : @\"\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } } }]; Swift let threadId = \"<thread-id>\" let jsonData = \"{ latitude: 48.858093, longitude: 2.294694 }\" . data ( using : . utf8 ) if let data = jsonData { let dataString = data . base64EncodedString () Textile . instance (). files . prepare ( dataString , threadId : threadId ) { ( preparedFiles , error ) in if let files = preparedFiles { var filesAddError : NSError ? Textile . instance (). files . add ( files . dir , threadId : threadId , caption : nil , error : & filesAddError ) if ( filesAddError != nil ) { // Do something with this error } else { // Success! } } else { // Do something with error } } } Files stored on disk \u00b6 You can add files stored on disk by passing the path information. Objective-C NSString * threadId = @\"<thread-id>\" ; NSString * filePath = @\"/path/to/mmm-bytes....\" ; [ Textile . instance . files prepareByPath : filePath threadId : threadId completion : ^ ( MobilePreparedFiles * preparedFiles , NSError * error ) { if ( error ) { // Do something with this error } else { NSError * addFilesError ; [ Textile . instance . files add : preparedFiles . dir threadId : threadId caption : nil error : & addFilesError ]; if ( addFilesError ) { // Do something with this error } else { // Success! } } }]; Swift let threadId = \"<thread-id>\" let filePath = \"/path/to/mmm-bytes....\" Textile . instance (). files . prepare ( byPath : filePath , threadId : threadId ) { ( preparedFiles , error ) in if let files = preparedFiles { var addFilesError : NSError ? Textile . instance (). files . add ( files . dir , threadId : threadId , caption : nil , error : & addFilesError ) if ( addFilesError != nil ) { // Do something with this error } else { // Success! } } else { // Do something with error } } Get a file \u00b6 Objective-C NSString * hash = @\"some file hash\" ; NSError * error ; NSString * base64 = [ Textile . instance . files data : hash error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift let hash = \"<some file hash>\" var error : NSError ? let base64 = Textile . instance (). files . data ( hash , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! } Example application \u00b6 The ios-textile repo contains a simple code example you may find useful in your exploration. API Documentation \u00b6 The full API documentation for Textile's iOS SDK (ios-textile) can be found at https://textileio.github.io/ios-textile . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"iOS"},{"location":"develop/clients/ios/#installation","text":"The iOS is published as a pod on CocoaPod.org . The library is also published on GitHub .","title":"Installation"},{"location":"develop/clients/ios/#cocoapods","text":"If you haven't already, you'll need to setup CocoaPods in your project . Next, add Textile to your project. pod 'Textile' This will install the latest version of the SDK into your app.","title":"CocoaPods"},{"location":"develop/clients/ios/#carthage-experimental","text":"Carthage support is minimally tested today, but if you are a Carthage user and would like to try, we'd love a PR here to update this process. github \"textileio/ios-textile\" There you'll need two dependencies that are the Protobuf library from Google and the Textile Core iOS library available on our releases page . You can see how those are handled in our CocoaPods setup .","title":"Carthage (experimental)"},{"location":"develop/clients/ios/#getting-started","text":"","title":"Getting Started"},{"location":"develop/clients/ios/#initialize-textile","text":"","title":"Initialize Textile"},{"location":"develop/clients/ios/#objective-c","text":"Then in your application delegate\u2019s - application:didFinishLaunchingWithOptions: method, setup Textile as follows, // Early on in the app lifecycle, usually in AppDelegate // Initialize a new Textile wallet for the user. NSString * documents = [ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) objectAtIndex : 0 ]; NSString * repoPath = [ documents stringByAppendingPathComponent : @\"textile-repo\" ]; if ( ! [ Textile isInitialized : repoPath ]) { NSError * error ; NSString * recoveryPhrase = [ Textile initializeCreatingNewWalletAndAccount : repoPath debug : NO logToDisk : NO error : & error ]; if ( ! recoveryPhrase ) { NSLog ( @\"init error: %@\" , error . localizedDescription ); } // Return phrase to the user for secure, out of app, storage } NSError * error ; BOOL launched = [ Textile launch : repoPath debug : NO error : & error ]; if ( ! launched ) { NSLog ( @\"launch error: %@\" , error . localizedDescription ); } // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = self ;","title":"Objective-C"},{"location":"develop/clients/ios/#swift","text":"let documentsPath = NSSearchPathForDirectoriesInDomains (. documentDirectory , . userDomainMask , true )[ 0 ] let repoPath = ( documentsPath as NSString ). appendingPathComponent ( \"textile-repo\" ) if ( ! Textile . isInitialized ( repoPath )) { var error : NSError ? let recoveryPhrase = Textile . initializeCreatingNewWalletAndAccount ( repoPath , debug : false , logToDisk : false , error : & error ) // Return phrase to the user for secure, out of app, storage } do { try Textile . launch ( repoPath , debug : false ) } catch { // handle launch error } // Set the Textile delegate to self so we can make use of events such nodeStarted Textile . instance (). delegate = self By default, the Textile instance will manage itself during app life-cycle events as long as you initialize it correctly in your app, meaning your app will be connected to the IPFS network whenever your app requires it.","title":"Swift"},{"location":"develop/clients/ios/#get-the-account-display-name","text":"Objective-C NSError * error ; NSString * name = [ Textile . instance . profile name : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let name = Textile . instance (). profile . name (& error ) if ( error != nil ) { // Do something with this error } else { // Success! }","title":"Get the account display name"},{"location":"develop/clients/ios/#subscribe-to-file-updates","text":"Objective-C // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = delegate ; // The delegate can receive callbacks for any event it is interested in, for example - ( void ) threadUpdateReceived: ( FeedItem * ) feedItem { if ([ feedItem . payload . typeURL isEqualToString : @\"/Files\" ]) { // new file! } } Swift // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance (). delegate = delegate // The delegate can receive callbacks for any event it is interested in, for example func threadUpdateReceived ( _ feedItem : FeedItem ) { if ( feedItem . payload . typeURL == \"/Files\" ) { // new file! } }","title":"Subscribe to file updates"},{"location":"develop/clients/ios/#subscribe-to-raw-ipfs-pubsub-topic","text":"Objective-C NSError * error ; NSString * queryId = [ Textile . instance . ipfs pubsubSub : @\"SomeTopicEgThreadId\" error : & error ]; // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance . delegate = delegate ; // The delegate can receive callbacks for any event it is interested in, for example - ( void ) pubsubQueryResult: ( NSString * ) queryId message: ( NSString * ) message messageId: ( NSString * ) messageId { // new ipfs pubsub message! } Swift var queryId = Textile . instance (). ipfs . pubsubSub ( topic : \"SomeTopicEgThreadId\" , error : SomeUserDefinedNSError ); // Set the Textile delegate to any object that conforms to the TextileDelegate protocol Textile . instance (). delegate = delegate // The delegate can receive callbacks for any event it is interested in, for example func pubsubQueryResult ( _ queryId : String , _ message : String , _ messageId : String ) { // new ipfs pubsub message! }","title":"Subscribe to raw ipfs pubsub topic"},{"location":"develop/clients/ios/#fetch-chronological-thread-updates","text":"Objective-C FeedRequest * request = [[ FeedRequest alloc ] init ]; request . thread = @\"<thread-id>\" ; NSError * error ; FeedItemList * feedItemList = [ Textile . instance . feed list : request error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift let request = FeedRequest () request . thread = \"\" var error : NSError ? let feedItemList = Textile . instance (). feed . list ( request , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! }","title":"Fetch chronological thread updates"},{"location":"develop/clients/ios/#create-a-thread","text":"Objective-C NSError * error ; AddThreadConfig_Schema * schema = [[ AddThreadConfig_Schema alloc ] init ]; schema . preset = AddThreadConfig_Schema_Preset_Blob ; AddThreadConfig * config = [[ AddThreadConfig alloc ] init ]; config . key = @\"your.bundle.id.version.Basic\" ; config . name = @\"Basic\" ; config . type = Thread_Type_Private ; config . sharing = Thread_Sharing_NotShared ; config . schema = schema ; Thread * thread = [ Textile . instance . threads add : config error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift var error : NSError ? let schema = AddThreadConfig_Schema () schema . preset = AddThreadConfig_Schema_Preset . blob let config = AddThreadConfig () config . key = \"your.bundle.id.version.Basic\" config . name = \"Basic\" config . type = Thread_Type . private config . sharing = Thread_Sharing . notShared config . schema = schema let thread = Textile . instance (). threads . add ( config , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! }","title":"Create a thread"},{"location":"develop/clients/ios/#add-a-file","text":"Objective-C NSString * threadId = @\"<thread-id>\" ; NSData * jsonData = [ @\"{ latitude: 48.858093, longitude: 2.294694 }\" dataUsingEncoding : NSUTF8StringEncoding ]; NSString * dataString = [ jsonData base64EncodedStringWithOptions : 0 ]; [ Textile . instance . files prepare : dataString threadId : threadId completion : ^ ( MobilePreparedFiles * preparedFiles , NSError * error ) { if ( error ) { // Do something with this error } else { NSError * error ; [ Textile . instance . files add : preparedFiles . dir threadId : threadId caption : @\"\" error : & error ]; if ( error ) { // Do something with this error } else { // Success! } } }]; Swift let threadId = \"<thread-id>\" let jsonData = \"{ latitude: 48.858093, longitude: 2.294694 }\" . data ( using : . utf8 ) if let data = jsonData { let dataString = data . base64EncodedString () Textile . instance (). files . prepare ( dataString , threadId : threadId ) { ( preparedFiles , error ) in if let files = preparedFiles { var filesAddError : NSError ? Textile . instance (). files . add ( files . dir , threadId : threadId , caption : nil , error : & filesAddError ) if ( filesAddError != nil ) { // Do something with this error } else { // Success! } } else { // Do something with error } } }","title":"Add a file"},{"location":"develop/clients/ios/#files-stored-on-disk","text":"You can add files stored on disk by passing the path information. Objective-C NSString * threadId = @\"<thread-id>\" ; NSString * filePath = @\"/path/to/mmm-bytes....\" ; [ Textile . instance . files prepareByPath : filePath threadId : threadId completion : ^ ( MobilePreparedFiles * preparedFiles , NSError * error ) { if ( error ) { // Do something with this error } else { NSError * addFilesError ; [ Textile . instance . files add : preparedFiles . dir threadId : threadId caption : nil error : & addFilesError ]; if ( addFilesError ) { // Do something with this error } else { // Success! } } }]; Swift let threadId = \"<thread-id>\" let filePath = \"/path/to/mmm-bytes....\" Textile . instance (). files . prepare ( byPath : filePath , threadId : threadId ) { ( preparedFiles , error ) in if let files = preparedFiles { var addFilesError : NSError ? Textile . instance (). files . add ( files . dir , threadId : threadId , caption : nil , error : & addFilesError ) if ( addFilesError != nil ) { // Do something with this error } else { // Success! } } else { // Do something with error } }","title":"Files stored on disk"},{"location":"develop/clients/ios/#get-a-file","text":"Objective-C NSString * hash = @\"some file hash\" ; NSError * error ; NSString * base64 = [ Textile . instance . files data : hash error : & error ]; if ( error ) { // Do something with this error } else { // Success! } Swift let hash = \"<some file hash>\" var error : NSError ? let base64 = Textile . instance (). files . data ( hash , error : & error ) if ( error != nil ) { // Do something with this error } else { // Success! }","title":"Get a file"},{"location":"develop/clients/ios/#example-application","text":"The ios-textile repo contains a simple code example you may find useful in your exploration.","title":"Example application"},{"location":"develop/clients/ios/#api-documentation","text":"The full API documentation for Textile's iOS SDK (ios-textile) can be found at https://textileio.github.io/ios-textile . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"API Documentation"},{"location":"develop/clients/javascript/","text":"The JS HTTP Client was designed to work in the browser, using Node.js, or in Electron. To use the JS HTTP Client, you'll need either a locally running Daemon or a locally running Desktop Tray instance containing a Textile account and available on localhost with default ports for both the API and Gateway . Installation \u00b6 The JS HTTP Client is published as an NPM Package . You are free to use the source code directly or use a package manager to install the official release. NPM \u00b6 npm install @ textile / js - http - client Yarn \u00b6 yarn add @ textile / js - http - client TypeScript \u00b6 We strongly recommend using TypeScript if you plan to use the JS Client in your project. The JS Client's endpoints are all typed and those types are available to projects that support them. Because Textile libraries are rapidly developing, this will make your upgrade process much easier and faster. If you don't normally use TypeScript in your projects, never fear, it will be very familiar and only takes a few steps to setup. Tip We recommend TypeScript in 5 minutes as a good place to start if you are totally new to TypeScript. Getting Started \u00b6 Initialize the JS Client \u00b6 The JS HTTP Client does not maintain any state for your app, it simply provides easy to use APIs so your app can interact with your user's Textile account. You import the library in any library simply. // No initialization needed, only import import textile from \"@textile/js-http-client\" Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using the JS HTTP Client. Get the account display name \u00b6 const name = await textile . profile . name () Subscribe to file updates \u00b6 // The js-http-client returns a `ReadableStream` to be accessed by the caller // See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream for details const stream = await textile . subscribe . stream ( \"files\" ) const reader = stream . getReader () const read = ( result ) => { // ReadableStreamReadResult<FeedItem> if ( result . done ) { return } try { console . log ( result . value ) } catch ( err ) { reader . cancel ( undefined ) return } read ( await reader . read ()) } read ( await reader . read ()) Subscribe to raw ipfs pubsub topic \u00b6 let useEventSource = EventSource !== undefined ; let { queryId , queryHandle , } = await textile . ipfs . pubsubSub ( 'SomeTopicEgThreadId' , useEventSource ); // note: The second param of js_http_client pubsubSub() is optional, so all code here is also can be used in react_native let allEventsAndQueryHandle = textile . events . addPubsubQueryResultListener (( queryId , message , messageId ) => { console . warn ( queryId , message , messageId ); }, queryId , queryHandle ); // note: For easy to use, allEventsAndQueryHandle.cancel() will remove all events added in // addPubsubQueryResultListener() // addQueryDoneListener() // addQueryErrorListener() // and cancel queryHandle automatically doneEvent = textile . events . addQueryDoneListener (( queryId ) => { console . warn ( 'doneEvent' , queryId ); // For easy to use, it's no need to run allEventsAndQueryHandle.cancel() or doneEvent.cancel() // here, because they are already canceled automatically when this event happend and // finally call this callback function of QueryDoneListener }, queryId ); // note: User can use doneEvent.cancel() at any other place as wish to just cancel QueryDoneListener this . errorEvent = textile . events . addQueryErrorListener (( queryId , error ) => { console . warn ( 'errorEvent' , error ); // It's up to user to determin what to do (e.g. allEventsAndQueryHandle.cancel() or just continue?) // when error happend }, queryId ); // note: User can use errorEvent.cancel() at any other place as wish to just cancel QueryErrorListener Fetch chronological thread updates \u00b6 await textile . feed . list ( \"<thread-id>\" ) Create a thread \u00b6 const thread = await textile . threads . add ( \"Basic\" ) Add a file \u00b6 await textile . files . add ({ latitude : 48.858093 , longitude : 2.294694 }, \"\" , \"<thread-id>\" ) Files stored as blobs \u00b6 For threads you create that use the /blob schema, you need to add your files slightly differently if your code is running in Node.js or running in the browser. browser const data = new Blob ([ \"mmm, bytes...\" ]) await textile . files . add ( data , \"\" , \"<thread-id>\" ) node.js const block = await textile . files . add ( \"mmm, bytes...\" , \"\" , \"<thread-id>\" ) Get a file \u00b6 In this example, we get a file stored with a /json based schema. // fileHash is a string hash, commonly found in block.files[index].file.hash const jsonData = textile . file . content ( fileHash ) Files stored as blobs \u00b6 The same as when writing blob data to threads, you need to be aware of differences when reading blob data if you are in the browser versus if you are in Node.js. browser // fileHash is a string hash, commonly found in block.files[index].file.hash const content = textile . file . content ( fileHash ) const reader = new FileReader (); reader . onload = function () { console . log ( reader . result ); } reader . readAsText ( content ); node.js // fileHash is a string hash, commonly found in block.files[index].file.hash const content = textile . file . content ( fileHash ) Use with redux-saga \u00b6 Many clients are using libraries such as redux-sagas to manage app state combined with Textile. If you use the above examples, you might hit an issue where you need to declare the context of a function your are calling ( detailed in this ticket ). Here are a couple examples using Textile to get you started. Create a thread \u00b6 export function * createThread ( name , key ) { const thread = yield call ([ textile . threads , \"add\" ], name , key ) return thread } Get file content \u00b6 export function * getFile ( hash ) { const file = yield call ([ textile . file , \"content\" ], hash ) return file } Live playground \u00b6 You can start playing with some of the core functionality in our developer playground . The playground provides a number of examples that you can run directly against a local Textile node (deamon or desktop installation). API Documentation \u00b6 The full API documentation for Textile's JavaScript HTTP Client (js-http-client) can be found at https://textileio.github.io/js-http-client . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"JavaScript"},{"location":"develop/clients/javascript/#installation","text":"The JS HTTP Client is published as an NPM Package . You are free to use the source code directly or use a package manager to install the official release.","title":"Installation"},{"location":"develop/clients/javascript/#npm","text":"npm install @ textile / js - http - client","title":"NPM"},{"location":"develop/clients/javascript/#yarn","text":"yarn add @ textile / js - http - client","title":"Yarn"},{"location":"develop/clients/javascript/#typescript","text":"We strongly recommend using TypeScript if you plan to use the JS Client in your project. The JS Client's endpoints are all typed and those types are available to projects that support them. Because Textile libraries are rapidly developing, this will make your upgrade process much easier and faster. If you don't normally use TypeScript in your projects, never fear, it will be very familiar and only takes a few steps to setup. Tip We recommend TypeScript in 5 minutes as a good place to start if you are totally new to TypeScript.","title":"TypeScript"},{"location":"develop/clients/javascript/#getting-started","text":"","title":"Getting Started"},{"location":"develop/clients/javascript/#initialize-the-js-client","text":"The JS HTTP Client does not maintain any state for your app, it simply provides easy to use APIs so your app can interact with your user's Textile account. You import the library in any library simply. // No initialization needed, only import import textile from \"@textile/js-http-client\" Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using the JS HTTP Client.","title":"Initialize the JS Client"},{"location":"develop/clients/javascript/#get-the-account-display-name","text":"const name = await textile . profile . name ()","title":"Get the account display name"},{"location":"develop/clients/javascript/#subscribe-to-file-updates","text":"// The js-http-client returns a `ReadableStream` to be accessed by the caller // See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream for details const stream = await textile . subscribe . stream ( \"files\" ) const reader = stream . getReader () const read = ( result ) => { // ReadableStreamReadResult<FeedItem> if ( result . done ) { return } try { console . log ( result . value ) } catch ( err ) { reader . cancel ( undefined ) return } read ( await reader . read ()) } read ( await reader . read ())","title":"Subscribe to file updates"},{"location":"develop/clients/javascript/#subscribe-to-raw-ipfs-pubsub-topic","text":"let useEventSource = EventSource !== undefined ; let { queryId , queryHandle , } = await textile . ipfs . pubsubSub ( 'SomeTopicEgThreadId' , useEventSource ); // note: The second param of js_http_client pubsubSub() is optional, so all code here is also can be used in react_native let allEventsAndQueryHandle = textile . events . addPubsubQueryResultListener (( queryId , message , messageId ) => { console . warn ( queryId , message , messageId ); }, queryId , queryHandle ); // note: For easy to use, allEventsAndQueryHandle.cancel() will remove all events added in // addPubsubQueryResultListener() // addQueryDoneListener() // addQueryErrorListener() // and cancel queryHandle automatically doneEvent = textile . events . addQueryDoneListener (( queryId ) => { console . warn ( 'doneEvent' , queryId ); // For easy to use, it's no need to run allEventsAndQueryHandle.cancel() or doneEvent.cancel() // here, because they are already canceled automatically when this event happend and // finally call this callback function of QueryDoneListener }, queryId ); // note: User can use doneEvent.cancel() at any other place as wish to just cancel QueryDoneListener this . errorEvent = textile . events . addQueryErrorListener (( queryId , error ) => { console . warn ( 'errorEvent' , error ); // It's up to user to determin what to do (e.g. allEventsAndQueryHandle.cancel() or just continue?) // when error happend }, queryId ); // note: User can use errorEvent.cancel() at any other place as wish to just cancel QueryErrorListener","title":"Subscribe to raw ipfs pubsub topic"},{"location":"develop/clients/javascript/#fetch-chronological-thread-updates","text":"await textile . feed . list ( \"<thread-id>\" )","title":"Fetch chronological thread updates"},{"location":"develop/clients/javascript/#create-a-thread","text":"const thread = await textile . threads . add ( \"Basic\" )","title":"Create a thread"},{"location":"develop/clients/javascript/#add-a-file","text":"await textile . files . add ({ latitude : 48.858093 , longitude : 2.294694 }, \"\" , \"<thread-id>\" )","title":"Add a file"},{"location":"develop/clients/javascript/#files-stored-as-blobs","text":"For threads you create that use the /blob schema, you need to add your files slightly differently if your code is running in Node.js or running in the browser. browser const data = new Blob ([ \"mmm, bytes...\" ]) await textile . files . add ( data , \"\" , \"<thread-id>\" ) node.js const block = await textile . files . add ( \"mmm, bytes...\" , \"\" , \"<thread-id>\" )","title":"Files stored as blobs"},{"location":"develop/clients/javascript/#get-a-file","text":"In this example, we get a file stored with a /json based schema. // fileHash is a string hash, commonly found in block.files[index].file.hash const jsonData = textile . file . content ( fileHash )","title":"Get a file"},{"location":"develop/clients/javascript/#files-stored-as-blobs_1","text":"The same as when writing blob data to threads, you need to be aware of differences when reading blob data if you are in the browser versus if you are in Node.js. browser // fileHash is a string hash, commonly found in block.files[index].file.hash const content = textile . file . content ( fileHash ) const reader = new FileReader (); reader . onload = function () { console . log ( reader . result ); } reader . readAsText ( content ); node.js // fileHash is a string hash, commonly found in block.files[index].file.hash const content = textile . file . content ( fileHash )","title":"Files stored as blobs"},{"location":"develop/clients/javascript/#use-with-redux-saga","text":"Many clients are using libraries such as redux-sagas to manage app state combined with Textile. If you use the above examples, you might hit an issue where you need to declare the context of a function your are calling ( detailed in this ticket ). Here are a couple examples using Textile to get you started.","title":"Use with redux-saga"},{"location":"develop/clients/javascript/#create-a-thread_1","text":"export function * createThread ( name , key ) { const thread = yield call ([ textile . threads , \"add\" ], name , key ) return thread }","title":"Create a thread"},{"location":"develop/clients/javascript/#get-file-content","text":"export function * getFile ( hash ) { const file = yield call ([ textile . file , \"content\" ], hash ) return file }","title":"Get file content"},{"location":"develop/clients/javascript/#live-playground","text":"You can start playing with some of the core functionality in our developer playground . The playground provides a number of examples that you can run directly against a local Textile node (deamon or desktop installation).","title":"Live playground"},{"location":"develop/clients/javascript/#api-documentation","text":"The full API documentation for Textile's JavaScript HTTP Client (js-http-client) can be found at https://textileio.github.io/js-http-client . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"API Documentation"},{"location":"develop/clients/react-native/","text":"Textile's React Native SDK is designed to work on iOS and Android devices in app's built with React Native . Installation \u00b6 The React Native SDK is published as an NPM Package . You are free to use the source code directly or use a package manager to install the official release. NPM \u00b6 npm install @ textile / react - native - sdk Yarn \u00b6 yarn add @ textile / react - native - sdk Android Setup \u00b6 Including maven repo \u00b6 You'll need to include a new entry into your repositories found in android/build.gradle . The repository entry you need to include is (specifically the new maven entry): allprojects { repositories { ... maven { url \"https://dl.bintray.com/textile/maven\" } ... } } Next, you'll need to add the SDK to your android/settings.gradle and android/app/build.gradle . Add React Native SDk to build.gradle \u00b6 Inside of android/app/build.gradle add the following entry into the dependencies object, dependencies { ... implementation project ( ' : @textile_react - native - sdk ' ) ... } Add React Native SDK to settings.gradle \u00b6 Inside of android/settings.gradle include the SDK module, ... include ' : @textile_react - native - sdk ' project ( ' : @textile_react - native - sdk ' ). projectDir = new File ( rootProject . projectDir , ' ../ node_modules / @textile / react - native - sdk / android ' ) ... } iOS Setup \u00b6 The iOS half of the React Native SDK will rely on Cocoapods to manage the library in your code. For now, we use Cocoapods to help keep the dependency management clear in client apps, in the future we will work to make it easy to link without Cocoapods. Tip If your app isn't already setup for Cocoapods, we recommend this nice overview of using Cocoapods in React Native projects, Demystifying react-native modules linking . Edit your podfile by opening up ios/Podfile and adding the following line, target '<your-app-name>' do ... pod 'textile-react-native-sdk' , :path = > '../node_modules/@textile/react-native-sdk' ... end Save the file and run install. cd ios/ pod install TypeScript \u00b6 We strongly recommend using TypeScript if you plan to use the React Native SDK in your project. The React Native SDK's endpoints are all typed and those types are available to projects that support them. Because Textile libraries are rapidly developing, this will make your upgrade process much easier and faster. If you don't normally use TypeScript in your projects, never fear, it will be very familiar and only takes a few steps to setup. Tip We recommend TypeScript in 5 minutes as a good place to start if you are totally new to TypeScript. Getting Started \u00b6 Initializing the Textile Wallet \u00b6 To start using the mobile Textile peer your app needs to initialize the local wallet. A wallet can be generated from scratch or you can allow the user to pair your app with their existing Textile account. We recommend that you only support pairing, but we'll show you both methods so you can experiment with the right setup on your own. Creating wallet from scratch \u00b6 Warning Mobile apps that use the React Native SDK (or one of our native libraries) run on-device Textile peers for their users. On-device peers require that the users pair the app with their primary account (see the Tour of Textile ). We recomment encouraging your users to pair with an external account during onboarding, as migrating their primary wallet out of an app later will be challenging (and is not supported yet!). // This is the user's new Textile wallet seed. They must keep it secure and never share it. Your production app should not keep a copy long term and should never share it with any API. const seed = await textile . initialize ( false , false ) alert ( `WARNING - Never lose or share your seed: ${ seed } ` ) Initialize with a paired account \u00b6 @ todo Once a local account is paired, you don't need to pass the pairing key on every startup. Because the account data is now local, you can simply re-initialize. @ todo Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using the React Native SDK. Get the account display name \u00b6 const profile = await textile . profile . get () const name = profile . name Subscribe to file updates \u00b6 textile . events . addThreadUpdateReceivedListener (( update ) => { const { type_url } = update . payload if ( type_url === '/Files' ) { // new file! } }) Subscribe to raw ipfs pubsub topic \u00b6 let { queryId , queryHandle , } = await textile . ipfs . pubsubSub ( 'SomeTopicEgThreadId' ); // note: The second param of js_http_client pubsubSub() is optional, so all code here is also can be used in react_native let allEventsAndQueryHandle = textile . events . addPubsubQueryResultListener (( queryId , message , messageId ) => { console . warn ( queryId , message , messageId ); }, queryId , queryHandle ); // note: For easy to use, allEventsAndQueryHandle.cancel() will remove all events added in // addPubsubQueryResultListener() // addQueryDoneListener() // addQueryErrorListener() // and cancel queryHandle automatically doneEvent = textile . events . addQueryDoneListener (( queryId ) => { console . warn ( 'doneEvent' , queryId ); // For easy to use, it's no need to run allEventsAndQueryHandle.cancel() or doneEvent.cancel() // here, because they are already canceled automatically when this event happend and // finally call this callback function of QueryDoneListener }, queryId ); // note: User can use doneEvent.cancel() at any other place as wish to just cancel QueryDoneListener this . errorEvent = textile . events . addQueryErrorListener (( queryId , error ) => { console . warn ( 'errorEvent' , error ); // It's up to user to determin what to do (e.g. allEventsAndQueryHandle.cancel() or just continue?) // when error happend }, queryId ); // note: User can use errorEvent.cancel() at any other place as wish to just cancel QueryErrorListener Create a thread \u00b6 const threadKey = 'your.bundle.id.version.Basic' const threadName = 'Basic' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . BLOB } const config = { key : threadKey , name : threadName , type : Thread . Type . PRIVATE , sharing : Thread . Sharing . NOT_SHARED , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config ) Add a file \u00b6 const input = Buffer . from ( \"mmm, bytes...\" ). toString ( 'base64' ) const result = await textile . files . prepare ( input , \"<thread-id>\" ) const block = await textile . files . add ( result . dir , \"<thread-id>\" ) Boilerplate app \u00b6 You can clone the react-native boilerplate if you want to run a development app and start playing with the library right away. Be sure to check the Textile API in the boilerplate to know if it is currently up to date with the latest release of the SDK. API Documentation \u00b6 You can read the full API Documentation for Textile's React Native SDK (react-native-sdk) at https://textileio.github.io/react-native-sdk . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"React Native"},{"location":"develop/clients/react-native/#installation","text":"The React Native SDK is published as an NPM Package . You are free to use the source code directly or use a package manager to install the official release.","title":"Installation"},{"location":"develop/clients/react-native/#npm","text":"npm install @ textile / react - native - sdk","title":"NPM"},{"location":"develop/clients/react-native/#yarn","text":"yarn add @ textile / react - native - sdk","title":"Yarn"},{"location":"develop/clients/react-native/#android-setup","text":"","title":"Android Setup"},{"location":"develop/clients/react-native/#including-maven-repo","text":"You'll need to include a new entry into your repositories found in android/build.gradle . The repository entry you need to include is (specifically the new maven entry): allprojects { repositories { ... maven { url \"https://dl.bintray.com/textile/maven\" } ... } } Next, you'll need to add the SDK to your android/settings.gradle and android/app/build.gradle .","title":"Including maven repo"},{"location":"develop/clients/react-native/#add-react-native-sdk-to-buildgradle","text":"Inside of android/app/build.gradle add the following entry into the dependencies object, dependencies { ... implementation project ( ' : @textile_react - native - sdk ' ) ... }","title":"Add React Native SDk to build.gradle"},{"location":"develop/clients/react-native/#add-react-native-sdk-to-settingsgradle","text":"Inside of android/settings.gradle include the SDK module, ... include ' : @textile_react - native - sdk ' project ( ' : @textile_react - native - sdk ' ). projectDir = new File ( rootProject . projectDir , ' ../ node_modules / @textile / react - native - sdk / android ' ) ... }","title":"Add React Native SDK to settings.gradle"},{"location":"develop/clients/react-native/#ios-setup","text":"The iOS half of the React Native SDK will rely on Cocoapods to manage the library in your code. For now, we use Cocoapods to help keep the dependency management clear in client apps, in the future we will work to make it easy to link without Cocoapods. Tip If your app isn't already setup for Cocoapods, we recommend this nice overview of using Cocoapods in React Native projects, Demystifying react-native modules linking . Edit your podfile by opening up ios/Podfile and adding the following line, target '<your-app-name>' do ... pod 'textile-react-native-sdk' , :path = > '../node_modules/@textile/react-native-sdk' ... end Save the file and run install. cd ios/ pod install","title":"iOS Setup"},{"location":"develop/clients/react-native/#typescript","text":"We strongly recommend using TypeScript if you plan to use the React Native SDK in your project. The React Native SDK's endpoints are all typed and those types are available to projects that support them. Because Textile libraries are rapidly developing, this will make your upgrade process much easier and faster. If you don't normally use TypeScript in your projects, never fear, it will be very familiar and only takes a few steps to setup. Tip We recommend TypeScript in 5 minutes as a good place to start if you are totally new to TypeScript.","title":"TypeScript"},{"location":"develop/clients/react-native/#getting-started","text":"","title":"Getting Started"},{"location":"develop/clients/react-native/#initializing-the-textile-wallet","text":"To start using the mobile Textile peer your app needs to initialize the local wallet. A wallet can be generated from scratch or you can allow the user to pair your app with their existing Textile account. We recommend that you only support pairing, but we'll show you both methods so you can experiment with the right setup on your own.","title":"Initializing the Textile Wallet"},{"location":"develop/clients/react-native/#creating-wallet-from-scratch","text":"Warning Mobile apps that use the React Native SDK (or one of our native libraries) run on-device Textile peers for their users. On-device peers require that the users pair the app with their primary account (see the Tour of Textile ). We recomment encouraging your users to pair with an external account during onboarding, as migrating their primary wallet out of an app later will be challenging (and is not supported yet!). // This is the user's new Textile wallet seed. They must keep it secure and never share it. Your production app should not keep a copy long term and should never share it with any API. const seed = await textile . initialize ( false , false ) alert ( `WARNING - Never lose or share your seed: ${ seed } ` )","title":"Creating wallet from scratch"},{"location":"develop/clients/react-native/#initialize-with-a-paired-account","text":"@ todo Once a local account is paired, you don't need to pass the pairing key on every startup. Because the account data is now local, you can simply re-initialize. @ todo Below are some basic examples to get you started. If you are interested in a more thorough walk-through, check out the Tour of Textile's examples using the React Native SDK.","title":"Initialize with a paired account"},{"location":"develop/clients/react-native/#get-the-account-display-name","text":"const profile = await textile . profile . get () const name = profile . name","title":"Get the account display name"},{"location":"develop/clients/react-native/#subscribe-to-file-updates","text":"textile . events . addThreadUpdateReceivedListener (( update ) => { const { type_url } = update . payload if ( type_url === '/Files' ) { // new file! } })","title":"Subscribe to file updates"},{"location":"develop/clients/react-native/#subscribe-to-raw-ipfs-pubsub-topic","text":"let { queryId , queryHandle , } = await textile . ipfs . pubsubSub ( 'SomeTopicEgThreadId' ); // note: The second param of js_http_client pubsubSub() is optional, so all code here is also can be used in react_native let allEventsAndQueryHandle = textile . events . addPubsubQueryResultListener (( queryId , message , messageId ) => { console . warn ( queryId , message , messageId ); }, queryId , queryHandle ); // note: For easy to use, allEventsAndQueryHandle.cancel() will remove all events added in // addPubsubQueryResultListener() // addQueryDoneListener() // addQueryErrorListener() // and cancel queryHandle automatically doneEvent = textile . events . addQueryDoneListener (( queryId ) => { console . warn ( 'doneEvent' , queryId ); // For easy to use, it's no need to run allEventsAndQueryHandle.cancel() or doneEvent.cancel() // here, because they are already canceled automatically when this event happend and // finally call this callback function of QueryDoneListener }, queryId ); // note: User can use doneEvent.cancel() at any other place as wish to just cancel QueryDoneListener this . errorEvent = textile . events . addQueryErrorListener (( queryId , error ) => { console . warn ( 'errorEvent' , error ); // It's up to user to determin what to do (e.g. allEventsAndQueryHandle.cancel() or just continue?) // when error happend }, queryId ); // note: User can use errorEvent.cancel() at any other place as wish to just cancel QueryErrorListener","title":"Subscribe to raw ipfs pubsub topic"},{"location":"develop/clients/react-native/#create-a-thread","text":"const threadKey = 'your.bundle.id.version.Basic' const threadName = 'Basic' const schema = { id : '' , json : '' , preset : AddThreadConfig . Schema . Preset . BLOB } const config = { key : threadKey , name : threadName , type : Thread . Type . PRIVATE , sharing : Thread . Sharing . NOT_SHARED , schema : schema , force : false , members : [] } const newTarget = await textile . threads . add ( config )","title":"Create a thread"},{"location":"develop/clients/react-native/#add-a-file","text":"const input = Buffer . from ( \"mmm, bytes...\" ). toString ( 'base64' ) const result = await textile . files . prepare ( input , \"<thread-id>\" ) const block = await textile . files . add ( result . dir , \"<thread-id>\" )","title":"Add a file"},{"location":"develop/clients/react-native/#boilerplate-app","text":"You can clone the react-native boilerplate if you want to run a development app and start playing with the library right away. Be sure to check the Textile API in the boilerplate to know if it is currently up to date with the latest release of the SDK.","title":"Boilerplate app"},{"location":"develop/clients/react-native/#api-documentation","text":"You can read the full API Documentation for Textile's React Native SDK (react-native-sdk) at https://textileio.github.io/react-native-sdk . Feel free to join the Textile Developer Slack and let us know what you are building. People are always excited to share and learn about new ideas.","title":"API Documentation"},{"location":"install/apps/","text":"Here are a few of the apps that have been built on Textile. Textile Photos \u00b6 Textile Photos mobile app The original Textile-based app, Textile Photos comes as a mobile app for iOS and Android or as a Desktop app you can install on any computer. Textile Notes \u00b6 Textile Notes mobile app Textile Notes is a minimalistic notes taking app built for any mobile device using our React Native SDK . AirSecure \u00b6 AirSecure is an easy to use 2FA secret manager that can be used to help you secure accounts on Cloudflare , GitHub , and many other places. Add yours \u00b6 If you would like to get your app on the list, edit this page and submit a pull-request! Include a a brief 1-2 line description and a preview image, no more than 1000px wide and with roughly 5x3 width to height ratio.","title":"Apps"},{"location":"install/apps/#textile-photos","text":"Textile Photos mobile app The original Textile-based app, Textile Photos comes as a mobile app for iOS and Android or as a Desktop app you can install on any computer.","title":"Textile Photos"},{"location":"install/apps/#textile-notes","text":"Textile Notes mobile app Textile Notes is a minimalistic notes taking app built for any mobile device using our React Native SDK .","title":"Textile Notes"},{"location":"install/apps/#airsecure","text":"AirSecure is an easy to use 2FA secret manager that can be used to help you secure accounts on Cloudflare , GitHub , and many other places.","title":"AirSecure"},{"location":"install/apps/#add-yours","text":"If you would like to get your app on the list, edit this page and submit a pull-request! Include a a brief 1-2 line description and a preview image, no more than 1000px wide and with roughly 5x3 width to height ratio.","title":"Add yours"},{"location":"install/desktop/","text":"Warning The desktop tray is very new and should be considered unstable until further notice. Textile provides a \"tray\" (or taskbar) application, which can manage one or more account peers for your laptop or desktop. Using a client library , other desktop or web applications can be quickly built on top of the running peer's localhost HTTP API. The tray will soon ship with Photos Desktop pre-installed, as the first \"app\". Please contact us if you'd like to learn more about developing against Textile Desktop. Tip The tray can be paired with your other account peers running on your other devices. After the initial pairing, your threads will auto-magically stay in sync. Install \u00b6 Download and extract the latest release for your OS and architecture. macOS and Linux: \u00b6 tar xvfz Textile_$VERSION_$OS-$ARCH.tar.gz Move Textile into your application folder. Windows \u00b6 Extract the zip file and move Textile.exe into your applications folder. Run \u00b6 Double-click the application. After a few moments, you should see the Textile icon in your taskbar. Click it to reveal the tray's UI. Existing accounts will appear in the dropdown menu. Click \"New\" to initialize a new account. Textile uses a hierarchical deterministic (HD) wallet to derive account keys from a set of unique words, called a mnemonic phrase . Read more about the wallet here . Every key \"inside\" an HD wallet can be derived from this mnemonic phrase. Effectively, the wallet is the mnemonic phrase. So, by clicking \"Create\" on this screen, you are creating an entirely new and unique wallet. By default, the tray app will use the first account key in the wallet to initialize an account peer. However, a wallet can derive an infinite number of account keys. You can optionally add a password that will be required along with your mnemonic phrase when accessing the wallet's account keys. If supplied, this same password will be used to encrypt the account peer's datastore at rest . The datastore will not be encrypted if the password field is left blank. The \"Refresh\" button simply re-generates the wallet. You can do this as many times as you like. Once you're signed into an account, set a global avatar and display name for your peer. You can click \"Threads\" to preview the datasets accessible by your peer. The \"Sync\" button searches for and syncs with other peers that share your account key. Lastly, registering your peer with an always-online cafe is highly recommended. See this section of the tour for details. Click \"Messages\" to manually query your cafe(s) for new messages that may have been received from others when your peer was offline or otherwise unreachable. This is also automatically done on an interval. Success You're up and running with the desktop tray! Now you're ready to start the tour !","title":"Desktop"},{"location":"install/desktop/#install","text":"Download and extract the latest release for your OS and architecture.","title":"Install"},{"location":"install/desktop/#macos-and-linux","text":"tar xvfz Textile_$VERSION_$OS-$ARCH.tar.gz Move Textile into your application folder.","title":"macOS and Linux:"},{"location":"install/desktop/#windows","text":"Extract the zip file and move Textile.exe into your applications folder.","title":"Windows"},{"location":"install/desktop/#run","text":"Double-click the application. After a few moments, you should see the Textile icon in your taskbar. Click it to reveal the tray's UI. Existing accounts will appear in the dropdown menu. Click \"New\" to initialize a new account. Textile uses a hierarchical deterministic (HD) wallet to derive account keys from a set of unique words, called a mnemonic phrase . Read more about the wallet here . Every key \"inside\" an HD wallet can be derived from this mnemonic phrase. Effectively, the wallet is the mnemonic phrase. So, by clicking \"Create\" on this screen, you are creating an entirely new and unique wallet. By default, the tray app will use the first account key in the wallet to initialize an account peer. However, a wallet can derive an infinite number of account keys. You can optionally add a password that will be required along with your mnemonic phrase when accessing the wallet's account keys. If supplied, this same password will be used to encrypt the account peer's datastore at rest . The datastore will not be encrypted if the password field is left blank. The \"Refresh\" button simply re-generates the wallet. You can do this as many times as you like. Once you're signed into an account, set a global avatar and display name for your peer. You can click \"Threads\" to preview the datasets accessible by your peer. The \"Sync\" button searches for and syncs with other peers that share your account key. Lastly, registering your peer with an always-online cafe is highly recommended. See this section of the tour for details. Click \"Messages\" to manually query your cafe(s) for new messages that may have been received from others when your peer was offline or otherwise unreachable. This is also automatically done on an interval. Success You're up and running with the desktop tray! Now you're ready to start the tour !","title":"Run"},{"location":"install/the-daemon/","text":"All desktop and server peers run as a daemon, which contains an embedded IPFS node. Much like the IPFS daemon, the program ( textile ) ships with a command-line client. The daemon can be used to run an account peer or a cafe peer . Info A daemon is a program that operates as a long-running 'background' process (without a terminal or user interface). In most cases, the daemon exposes a network API (usually HTTP / TCP) that allows other programs to interact with it while it's running. Most daemons ship with a command-line client for this API. Install \u00b6 Download and extract the latest release for your OS and architecture or jump to Docker . macOS and Linux: \u00b6 tar xvfz go-textile_$VERSION_$OS-$ARCH.tar.gz Move textile anyplace in your PATH or run the install script, which puts it in /usr/local/bin : ./install Windows \u00b6 Extract the zip file and move textile.exe anyplace in your PATH . Docker \u00b6 See available tags here . Run \u00b6 Once you have textile available on your system, you can run your own peer. Create a new wallet \u00b6 The first step is to create a new wallet . Textile uses a hierarchical deterministic (HD) wallet to derive account keys from a set of unique words, called a mnemonic phrase . Initialize a wallet with the command-line client (this will not persist anything to your filesystem): textile wallet create This will output something like: -------------------------------------------------------------------------------- | field speak xxx xxxxxxx xxxxxxx xxxxxxx xxxxx xxxxxxx xxxx xxxx xxxxxx xxxxx | -------------------------------------------------------------------------------- WARNING! Store these words above in a safe place! WARNING! If you lose your words, you will lose access to data in all derived accounts! WARNING! Anyone who has access to these words can access your wallet accounts! Use: `wallet accounts` command to inspect more accounts. --- ACCOUNT 0 --- P8sRrQuvwTCisEg3jndAWtNTbkqnrisHbxEutSm1AvC5qJA1 SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx You may optionally specify a word count and password that will be required along with your mnemonic phrase when accessing the wallet's account keys (run with --help for usage). Info Every key \"inside\" an HD wallet can be derived from this mnemonic phrase. Effectively, the wallet is the mnemonic phrase. The output contains information about the wallet's first account, or the keys at index 0 . Account seeds (private keys) always starts with an \"S\" for \"secret\" and account addresses (public keys) always start with a \"P\" for \"public\". Access wallet accounts \u00b6 Most users will only be interested in the first account keys, but you can access deeper indexes with the accounts sub-command: textile wallet accounts \"field speak xxx xxxxxxx xxxxxxx xxxxxxx xxxxx xxxxxxx xxxx xxxx xxxxxx xxxxx\" --depth 3 --- ACCOUNT 0 --- P8sRrQuvwTCisEg3jndAWtNTbkqnrisHbxEutSm1AvC5qJA1 SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --- ACCOUNT 1 --- P5rVWTKLKQFq42Ht7mdab9P3fSmyZyh2zWGHzLE8aipgoyRU SXw4tZNxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --- ACCOUNT 2 --- P7d43jRarv7k5e5WHmpDWuLevambQVu1YhrJ5CoRRfExLEwc SYEv4DMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx See textile wallet accounts --help for more. Initialize an account peer \u00b6 Next, use an account seed from your wallet to initialize a new account peer. Here, we just grab the account seed from the first account above: textile init \"SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" Danger Use your own seed. Never share it or your wallet mnemonic phrase with anyone! There are a dozen or so additional options that are available when initializing, you can find them all via textile init --help . Anyone familiar with IPFS will recognize the similarities with these steps. Much like ipfs init , textile init creates an IPFS node repository on disk. Initialize a cafe peer \u00b6 Anyone can run a cafe peer and offer services to the network. You do not need to rely on Textile's cafe network, or anyone else's network for that matter! Cafe peers are initialized by adding some additional flags to textile init : textile init &lt;account-seed&gt; --server --cafe-open --server : This flag applies the IPFS server profile and is highly recommended for cafe peers. --cafe-open : This flag \"opens\" the cafe, meaning that it will expose an additional \"service\" API over libp2p and HTTP. --cafe-url : Optional, http://<SWARM_IP>:40601 by default. Set this value if your peer is behind a DNS-based load balancer and/or requires HTTPS. For example, Textile's federated cafes run behind EC2 load balancers with HTTPS listeners, which route traffic to the cafe API port ( --cafe-bind-addr ). See Cafe.CafeHost.URL for details on how the default value of SWARM_IP is determined. Info Cafe service clients are issued JWT sessions used for authentication. These sessions contain the public URL of the cafe peer's service API so that it can be leveraged over HTTP. Later, when the peer is started, it's service info will be visible at the cafe URL, e.g., https://us-west-1c.textile.cafe . { \"peer\": \"12D3KooWQue2dSRqnZTVvikoxorZQ5Qyyug3hV65rYnWYpYsNMRE\", \"address\": \"P6th8SM6V3uSVQWgQz8AkFos3rwYzky2K7Bt6vx4h1jZGZne\", \"api\": \"v0\", \"protocol\": \"/textile/cafe/1.0.0\", \"node\": \"0.1.11\", \"url\": \"https://us-west-1c.textile.cafe\", \"swarm\": [ \"/ip4/13.57.23.210/tcp/4001\", \"/ip6/2600:1f1c:522:b00:2725:b0b3:f39d:c401/tcp/4001\" ] } You can modify the init settings anytime but editing the config file and restarting the peer. Read more about the cafe host config settings here . Run the daemon \u00b6 Now that you have initialized as either an account peer or a cafe peer, you can finally start the daemon: textile daemon See textile daemon --help for more options. Run the daemon with Docker \u00b6 The docker images have internal logic that will fist initialize a peer if needed before starting the daemon, enabling a single run command: Run an account peer with docker \u00b6 docker run -it --name textile-peer \\ -p 4001:4001 -p 8081:8081 -p 5050:5050 -p 127.0.0.1:40600:40600 \\ -v /tmp/textile:/data/textile textile/go-textile:latest Run a cafe peer with docker \u00b6 docker run -it --name textile-cafe-peer \\ -p 4001:4001 -p 8081:8081 -p 5050:5050 -p 127.0.0.1:40600:40600 -p 40601:40601 \\ -v /tmp/textile:/data/textile textile/go-textile:latest-cafe You may need to include -e CAFE_HOST_URL=\"https://mycafe.com\" or similar if the cafe peer will behind a DNS-based load balancer or required HTTPS. See the init section above for more. Success At last, your Textile peer is online. Now you're ready to start the tour !","title":"The Daemon"},{"location":"install/the-daemon/#install","text":"Download and extract the latest release for your OS and architecture or jump to Docker .","title":"Install"},{"location":"install/the-daemon/#macos-and-linux","text":"tar xvfz go-textile_$VERSION_$OS-$ARCH.tar.gz Move textile anyplace in your PATH or run the install script, which puts it in /usr/local/bin : ./install","title":"macOS and Linux:"},{"location":"install/the-daemon/#windows","text":"Extract the zip file and move textile.exe anyplace in your PATH .","title":"Windows"},{"location":"install/the-daemon/#docker","text":"See available tags here .","title":"Docker"},{"location":"install/the-daemon/#run","text":"Once you have textile available on your system, you can run your own peer.","title":"Run"},{"location":"install/the-daemon/#create-a-new-wallet","text":"The first step is to create a new wallet . Textile uses a hierarchical deterministic (HD) wallet to derive account keys from a set of unique words, called a mnemonic phrase . Initialize a wallet with the command-line client (this will not persist anything to your filesystem): textile wallet create This will output something like: -------------------------------------------------------------------------------- | field speak xxx xxxxxxx xxxxxxx xxxxxxx xxxxx xxxxxxx xxxx xxxx xxxxxx xxxxx | -------------------------------------------------------------------------------- WARNING! Store these words above in a safe place! WARNING! If you lose your words, you will lose access to data in all derived accounts! WARNING! Anyone who has access to these words can access your wallet accounts! Use: `wallet accounts` command to inspect more accounts. --- ACCOUNT 0 --- P8sRrQuvwTCisEg3jndAWtNTbkqnrisHbxEutSm1AvC5qJA1 SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx You may optionally specify a word count and password that will be required along with your mnemonic phrase when accessing the wallet's account keys (run with --help for usage). Info Every key \"inside\" an HD wallet can be derived from this mnemonic phrase. Effectively, the wallet is the mnemonic phrase. The output contains information about the wallet's first account, or the keys at index 0 . Account seeds (private keys) always starts with an \"S\" for \"secret\" and account addresses (public keys) always start with a \"P\" for \"public\".","title":"Create a new wallet"},{"location":"install/the-daemon/#access-wallet-accounts","text":"Most users will only be interested in the first account keys, but you can access deeper indexes with the accounts sub-command: textile wallet accounts \"field speak xxx xxxxxxx xxxxxxx xxxxxxx xxxxx xxxxxxx xxxx xxxx xxxxxx xxxxx\" --depth 3 --- ACCOUNT 0 --- P8sRrQuvwTCisEg3jndAWtNTbkqnrisHbxEutSm1AvC5qJA1 SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --- ACCOUNT 1 --- P5rVWTKLKQFq42Ht7mdab9P3fSmyZyh2zWGHzLE8aipgoyRU SXw4tZNxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --- ACCOUNT 2 --- P7d43jRarv7k5e5WHmpDWuLevambQVu1YhrJ5CoRRfExLEwc SYEv4DMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx See textile wallet accounts --help for more.","title":"Access wallet accounts"},{"location":"install/the-daemon/#initialize-an-account-peer","text":"Next, use an account seed from your wallet to initialize a new account peer. Here, we just grab the account seed from the first account above: textile init \"SSkyezjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" Danger Use your own seed. Never share it or your wallet mnemonic phrase with anyone! There are a dozen or so additional options that are available when initializing, you can find them all via textile init --help . Anyone familiar with IPFS will recognize the similarities with these steps. Much like ipfs init , textile init creates an IPFS node repository on disk.","title":"Initialize an account peer"},{"location":"install/the-daemon/#initialize-a-cafe-peer","text":"Anyone can run a cafe peer and offer services to the network. You do not need to rely on Textile's cafe network, or anyone else's network for that matter! Cafe peers are initialized by adding some additional flags to textile init : textile init &lt;account-seed&gt; --server --cafe-open --server : This flag applies the IPFS server profile and is highly recommended for cafe peers. --cafe-open : This flag \"opens\" the cafe, meaning that it will expose an additional \"service\" API over libp2p and HTTP. --cafe-url : Optional, http://<SWARM_IP>:40601 by default. Set this value if your peer is behind a DNS-based load balancer and/or requires HTTPS. For example, Textile's federated cafes run behind EC2 load balancers with HTTPS listeners, which route traffic to the cafe API port ( --cafe-bind-addr ). See Cafe.CafeHost.URL for details on how the default value of SWARM_IP is determined. Info Cafe service clients are issued JWT sessions used for authentication. These sessions contain the public URL of the cafe peer's service API so that it can be leveraged over HTTP. Later, when the peer is started, it's service info will be visible at the cafe URL, e.g., https://us-west-1c.textile.cafe . { \"peer\": \"12D3KooWQue2dSRqnZTVvikoxorZQ5Qyyug3hV65rYnWYpYsNMRE\", \"address\": \"P6th8SM6V3uSVQWgQz8AkFos3rwYzky2K7Bt6vx4h1jZGZne\", \"api\": \"v0\", \"protocol\": \"/textile/cafe/1.0.0\", \"node\": \"0.1.11\", \"url\": \"https://us-west-1c.textile.cafe\", \"swarm\": [ \"/ip4/13.57.23.210/tcp/4001\", \"/ip6/2600:1f1c:522:b00:2725:b0b3:f39d:c401/tcp/4001\" ] } You can modify the init settings anytime but editing the config file and restarting the peer. Read more about the cafe host config settings here .","title":"Initialize a cafe peer"},{"location":"install/the-daemon/#run-the-daemon","text":"Now that you have initialized as either an account peer or a cafe peer, you can finally start the daemon: textile daemon See textile daemon --help for more options.","title":"Run the daemon"},{"location":"install/the-daemon/#run-the-daemon-with-docker","text":"The docker images have internal logic that will fist initialize a peer if needed before starting the daemon, enabling a single run command:","title":"Run the daemon with Docker"},{"location":"install/the-daemon/#run-an-account-peer-with-docker","text":"docker run -it --name textile-peer \\ -p 4001:4001 -p 8081:8081 -p 5050:5050 -p 127.0.0.1:40600:40600 \\ -v /tmp/textile:/data/textile textile/go-textile:latest","title":"Run an account peer with docker"},{"location":"install/the-daemon/#run-a-cafe-peer-with-docker","text":"docker run -it --name textile-cafe-peer \\ -p 4001:4001 -p 8081:8081 -p 5050:5050 -p 127.0.0.1:40600:40600 -p 40601:40601 \\ -v /tmp/textile:/data/textile textile/go-textile:latest-cafe You may need to include -e CAFE_HOST_URL=\"https://mycafe.com\" or similar if the cafe peer will behind a DNS-based load balancer or required HTTPS. See the init section above for more. Success At last, your Textile peer is online. Now you're ready to start the tour !","title":"Run a cafe peer with docker"},{"location":"policies/code-of-conduct/","text":"Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Code of Conduct"},{"location":"policies/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"policies/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"policies/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"policies/code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"policies/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"policies/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Attribution"},{"location":"policies/license/","text":"Unless otherwise explicitly stated, all Textile code and software products are licensed under the following license: MIT License \u00b6 Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"policies/license/#mit-license","text":"Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"policies/privacy-policy/","text":"Textile provides exchange and storage of encrypted personal data. We cannot decrypt or otherwise access the data you privately store or share with your contacts. You can choose to share your data such as photos in public forums whereby anyone can view the data contents. Textile provides remote data storage for users on the IPFS network (see https://ipfs.io/ ). The IPFS protocol has no mechanisms for deletion of data once added, so instead, we allow users to 'revoke' their data, such that all servers in the IPFS network run through Textile (including those in the mobile app) will discontinue the hosting and displaying of said data. When you share photos in group forums (\"Threads\"), the encryption keys for the data (full resolution photo, lower resolution copies, and basic metadata) are shared with Thread members and are visible to anyone with the keys to that Thread. Keys are distributed whenever you, or another Thread member, invite new members to the Thread. The encrypted data shared in Threads are distributed over a network of voluntary IPFS servers that no single member, or the Textile organization, controls. Read more about public-key cryptography and the IPFS protocol if you are interested in how this works. Information We Have \u00b6 Certain information (e.g. a user identifier, group identifiers, encrypted data, etc.) is transmitted to us solely for the purpose of transmitting messages. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any new user you invite to the network. Encrypted contents of Threads may be cached or hosted on voluntary IPFS hosts. By opt-in, you may request Textile to manage the hosting of your encrypted data on remote IPFS peers. Textile will store and mange the encrypted data, plus an index to each entry you create in order to provide an account quota. By opt-in, you may request Textile to maintain an encrypted copy of your private wallet, including your private data index. Your private wallet includes metadata about photos in your account, Threads you participate in, and Contacts you have. If a user decides to opt-in, only a privately encrypted copy of the wallet will be stored by Textile, all contents will only be readable by the user with access to their private keys. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year. In the future, we will allow users to opt-out of this behavior. This data is collected using a third party service, Crashlytics . Information We May Share \u00b6 We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io Changelog \u00b6 09.12.18: Clarified the introduction, specifically what information is passing through IPFS and where it may be hosted. Clarified the collection of crash and bug reporting. Clarified the future opt-in for backup services. Minor typo fixes.","title":"Privacy Policy"},{"location":"policies/privacy-policy/#information-we-have","text":"Certain information (e.g. a user identifier, group identifiers, encrypted data, etc.) is transmitted to us solely for the purpose of transmitting messages. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any new user you invite to the network. Encrypted contents of Threads may be cached or hosted on voluntary IPFS hosts. By opt-in, you may request Textile to manage the hosting of your encrypted data on remote IPFS peers. Textile will store and mange the encrypted data, plus an index to each entry you create in order to provide an account quota. By opt-in, you may request Textile to maintain an encrypted copy of your private wallet, including your private data index. Your private wallet includes metadata about photos in your account, Threads you participate in, and Contacts you have. If a user decides to opt-in, only a privately encrypted copy of the wallet will be stored by Textile, all contents will only be readable by the user with access to their private keys. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year. In the future, we will allow users to opt-out of this behavior. This data is collected using a third party service, Crashlytics .","title":"Information We Have"},{"location":"policies/privacy-policy/#information-we-may-share","text":"We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io","title":"Information We May Share"},{"location":"policies/privacy-policy/#changelog","text":"09.12.18: Clarified the introduction, specifically what information is passing through IPFS and where it may be hosted. Clarified the collection of crash and bug reporting. Clarified the future opt-in for backup services. Minor typo fixes.","title":"Changelog"},{"location":"policies/terms-of-service/","text":"Last updated: 09/12/18 Welcome to Textile. Please read these terms of service (these \u201c Terms \u201d) carefully as they form a contract between you and We Are Set, Inc, a Delaware corporation ( Textile , \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), that governs your access and use of (i) the web verification and encryption solution software provided by Textile (the \u201c Software \u201d); (ii) the Textile websites at textile.io and textile.photos (the \u201c Site \u201d); and (iii) any written or electronic use or features guides or other documentation provided or made available by Textile (the \u201c User Guides \u201d) (collectively the \u201c Service(s) \u201d). By registering or using any of the Services you agree to be bound by these Terms. If you are using the Services on behalf of an organization, you are agreeing to these Terms for that organization and promising to Textile that you have the authority to bind that organization to these Terms (in which event, \u201cyou\u201d and \u201cyour\u201d will refer to that organization). You may use the Services only in compliance with these Terms and only if you have the power to form a contract with Textile and are not barred under any applicable laws from doing so. IF YOU DO NOT AGREE TO BE BOUND BY THESE TERMS, YOU MUST NOT USE THE SERVICES . Should you have any questions concerning this Agreement, please contact privacy@textile.io . Please note that Textile does not provide warranties for the Services. This contract also limits our liability to you and contains an arbitration provision and a class action waiver. See Sections 14 (NO WARRANTY), 16 (LIMITATION OF LIABILITY) and 19 (ARBITRATION) of these Terms for details. 1. ABOUT THE SERVICE \u00b6 The Service offers verification and authentication services and encryption services for users of photos and other personally collected data. The Service provides a private data storage system (\" Storage \") for users to maintain remote copies of their privately encrypted data. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device. The Service allows users to sync encrypted copies of their data privately with other devices. The service also allows users to create groups of multiple people who all use a shared encryption key to post, comment, and interact with encrypted photos and other data shared by group members (\" Sharing \" and \" Threads \"). Copies of data will be cached, on voluntary IPFS peers on the network including peers hosted by Textile, whenever a user shares data in a group Thread. Cached copies of shared data will be encrypted with keys only available to Thread members and so not readable by anyone else on the network. 2. CHANGES TO THESE TERMS \u00b6 We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service. 3. ACCESS TO THE SERVICE \u00b6 You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws. 4. YOUR ACCOUNT \u00b6 To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d), by completing a registration form and designating a user ID and password. Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT When providing Textile or the Service with content, such as your name, username, photos, social media names, location, data or files, or causing content to be posted, stored or transmitted using or through the Service (\u201c Your Content \u201d), including but not limited to the Registration Data and any other personal identification information that you provide, you hereby grant to us a non-exclusive, worldwide, perpetual, irrevocable, royalty-free, transferable (in whole or in part), fully-paid and sublicensable right, subject to the Privacy Policy, to use, reproduce, modify, transmit, display and distribute Your Content in any media known now or developed in the future, in connection with our provision of the Service. Further, to the fullest extent permitted under applicable law, you waive your moral rights and promise not to assert such rights or any other intellectual property or publicity rights against us, our sublicensees, or our assignees. You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms. 6. CONSENT TO ELECTRONIC COMMUNICATIONS AND SOLICITATION \u00b6 By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message. 8. SUSPENSION AND TERMINATION OF USE OF THE SERVICE \u00b6 We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service. 9. ACCEPTABLE USE \u00b6 You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I. reproduce, modify, alter, tamper with, repair or create derivative works of any Software, unless that permission is granted in a license. Further, unless expressly prohibited under applicable law, you may not use the Service to develop, test, validate and/or improve any service that is a substitute for, or substantially similar to, the Service (including any portion thereof); II. reverse engineer, disassemble or decompile the Software used to provide or access the Service, including the Software, or attempt to discover or recreate the source code used to provide or access the Service, except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so; III. use the Service in any manner or for any purpose other than as expressly permitted by these Terms, the Privacy Policy, any User Guides or any other policy, instruction or terms applicable to the Service that are available on the Service (\u201cPolicies\u201d); IV. sell, lend, rent, resell, lease, sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party; V. remove, obscure or alter any proprietary rights notice pertaining to the Service; VI. use the Service in connection with the operation of nuclear facilities, aircraft navigation, communication systems, medical devices, air traffic control devices, real time control systems or other situations in which the failure of the Service could lead to death, personal injury, or physical property or environmental damage; VII. use the Service to: (i) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data; (ii) send unsolicited or unauthorized junk mail, spam, chain letters, pyramid schemes or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii) store or transmit any inappropriate content, such as content: (1) containing unlawful, defamatory, threatening, abusive, libelous or otherwise objectionable material of any kind or nature, (2) containing any material that encourages conduct that could constitute a criminal offense, or (3) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability; (iv) store or transmit any content that contains or is used to initiate a denial of service attack, software viruses or other harmful or deleterious computer code, files or programs such as Trojan horses, worms, time bombs, cancelbots, or spyware; or (v) abuse, harass, stalk or otherwise violate the legal rights of a third party; VIII. interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users\u2019 to access the Service, or violate any third party regulations, policies or procedures of such servers or networks or harass or interfere with another user\u2019s full use and enjoyment of any Software or the Service; IX. access or attempt to access Textile\u2019s other accounts, computer systems or networks not covered by these Terms, through password mining or any other means; X. cause, in Textile\u2019s sole discretion, inordinate burden on the Service or Textile\u2019s system resources or capacity; or XI. share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service. Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content. 9. UPDATES TO THE SERVICE \u00b6 Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether. 10. SOFTWARE \u00b6 If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above. 11. THIRD PARTY SERVICES AND CONTENT \u00b6 All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services. 12. TEXTILE PROPRIETARY RIGHTS \u00b6 As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service. 13. PRIVACY \u00b6 In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://github.com/textileio/textile-mobile/blob/master/PRIVACY.md (\u201c Privacy Policy \u201d). 14. NO WARRANTY \u00b6 TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers. 15. INDEMNIFICATION \u00b6 You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation. 16. LIMITATION OF LIABILITY \u00b6 TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different. 17. ARBITRATION; CLASS ACTION WAIVER \u00b6 17.1 \u00b6 Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below. 17.2 \u00b6 Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action. 17.3 Arbitration Agreement \u00b6 After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California. 18. NOTICES \u00b6 We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms. 19. MISCELLANEOUS \u00b6 19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service. 19.2. \u00b6 Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service. 19.3. \u00b6 Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors. 19.4. \u00b6 Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred. 19.5. \u00b6 Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect. 19.6. \u00b6 Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212. 20. COPYRIGHT COMPLAINTS AND REMOVAL POLICY \u00b6 We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders. DMCA Take-Down Notices \u00b6 If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications. Counter-Notices \u00b6 If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice. 21. INTELLECTUAL PROPERTY NOTICES \u00b6 All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"Terms of Service"},{"location":"policies/terms-of-service/#1-about-the-service","text":"The Service offers verification and authentication services and encryption services for users of photos and other personally collected data. The Service provides a private data storage system (\" Storage \") for users to maintain remote copies of their privately encrypted data. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device. The Service allows users to sync encrypted copies of their data privately with other devices. The service also allows users to create groups of multiple people who all use a shared encryption key to post, comment, and interact with encrypted photos and other data shared by group members (\" Sharing \" and \" Threads \"). Copies of data will be cached, on voluntary IPFS peers on the network including peers hosted by Textile, whenever a user shares data in a group Thread. Cached copies of shared data will be encrypted with keys only available to Thread members and so not readable by anyone else on the network.","title":"1. ABOUT THE SERVICE"},{"location":"policies/terms-of-service/#2-changes-to-these-terms","text":"We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service.","title":"2. CHANGES TO THESE TERMS"},{"location":"policies/terms-of-service/#3-access-to-the-service","text":"You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws.","title":"3. ACCESS TO THE SERVICE"},{"location":"policies/terms-of-service/#4-your-account","text":"To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d), by completing a registration form and designating a user ID and password. Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT When providing Textile or the Service with content, such as your name, username, photos, social media names, location, data or files, or causing content to be posted, stored or transmitted using or through the Service (\u201c Your Content \u201d), including but not limited to the Registration Data and any other personal identification information that you provide, you hereby grant to us a non-exclusive, worldwide, perpetual, irrevocable, royalty-free, transferable (in whole or in part), fully-paid and sublicensable right, subject to the Privacy Policy, to use, reproduce, modify, transmit, display and distribute Your Content in any media known now or developed in the future, in connection with our provision of the Service. Further, to the fullest extent permitted under applicable law, you waive your moral rights and promise not to assert such rights or any other intellectual property or publicity rights against us, our sublicensees, or our assignees. You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms.","title":"4. YOUR ACCOUNT"},{"location":"policies/terms-of-service/#6-consent-to-electronic-communications-and-solicitation","text":"By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message.","title":"6. CONSENT TO ELECTRONIC COMMUNICATIONS AND SOLICITATION"},{"location":"policies/terms-of-service/#8-suspension-and-termination-of-use-of-the-service","text":"We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service.","title":"8. SUSPENSION AND TERMINATION OF USE OF THE SERVICE"},{"location":"policies/terms-of-service/#9-acceptable-use","text":"You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I. reproduce, modify, alter, tamper with, repair or create derivative works of any Software, unless that permission is granted in a license. Further, unless expressly prohibited under applicable law, you may not use the Service to develop, test, validate and/or improve any service that is a substitute for, or substantially similar to, the Service (including any portion thereof); II. reverse engineer, disassemble or decompile the Software used to provide or access the Service, including the Software, or attempt to discover or recreate the source code used to provide or access the Service, except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so; III. use the Service in any manner or for any purpose other than as expressly permitted by these Terms, the Privacy Policy, any User Guides or any other policy, instruction or terms applicable to the Service that are available on the Service (\u201cPolicies\u201d); IV. sell, lend, rent, resell, lease, sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party; V. remove, obscure or alter any proprietary rights notice pertaining to the Service; VI. use the Service in connection with the operation of nuclear facilities, aircraft navigation, communication systems, medical devices, air traffic control devices, real time control systems or other situations in which the failure of the Service could lead to death, personal injury, or physical property or environmental damage; VII. use the Service to: (i) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data; (ii) send unsolicited or unauthorized junk mail, spam, chain letters, pyramid schemes or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii) store or transmit any inappropriate content, such as content: (1) containing unlawful, defamatory, threatening, abusive, libelous or otherwise objectionable material of any kind or nature, (2) containing any material that encourages conduct that could constitute a criminal offense, or (3) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability; (iv) store or transmit any content that contains or is used to initiate a denial of service attack, software viruses or other harmful or deleterious computer code, files or programs such as Trojan horses, worms, time bombs, cancelbots, or spyware; or (v) abuse, harass, stalk or otherwise violate the legal rights of a third party; VIII. interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users\u2019 to access the Service, or violate any third party regulations, policies or procedures of such servers or networks or harass or interfere with another user\u2019s full use and enjoyment of any Software or the Service; IX. access or attempt to access Textile\u2019s other accounts, computer systems or networks not covered by these Terms, through password mining or any other means; X. cause, in Textile\u2019s sole discretion, inordinate burden on the Service or Textile\u2019s system resources or capacity; or XI. share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service. Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content.","title":"9. ACCEPTABLE USE"},{"location":"policies/terms-of-service/#9-updates-to-the-service","text":"Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether.","title":"9. UPDATES TO THE SERVICE"},{"location":"policies/terms-of-service/#10-software","text":"If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above.","title":"10. SOFTWARE"},{"location":"policies/terms-of-service/#11-third-party-services-and-content","text":"All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services.","title":"11. THIRD PARTY SERVICES AND CONTENT"},{"location":"policies/terms-of-service/#12-textile-proprietary-rights","text":"As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service.","title":"12. TEXTILE PROPRIETARY RIGHTS"},{"location":"policies/terms-of-service/#13-privacy","text":"In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://github.com/textileio/textile-mobile/blob/master/PRIVACY.md (\u201c Privacy Policy \u201d).","title":"13. PRIVACY"},{"location":"policies/terms-of-service/#14-no-warranty","text":"TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers.","title":"14. NO WARRANTY"},{"location":"policies/terms-of-service/#15-indemnification","text":"You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation.","title":"15. INDEMNIFICATION"},{"location":"policies/terms-of-service/#16-limitation-of-liability","text":"TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different.","title":"16. LIMITATION OF LIABILITY"},{"location":"policies/terms-of-service/#17-arbitration-class-action-waiver","text":"","title":"17. ARBITRATION; CLASS ACTION WAIVER"},{"location":"policies/terms-of-service/#171","text":"Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below.","title":"17.1"},{"location":"policies/terms-of-service/#172","text":"Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action.","title":"17.2"},{"location":"policies/terms-of-service/#173-arbitration-agreement","text":"After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California.","title":"17.3 Arbitration Agreement"},{"location":"policies/terms-of-service/#18-notices","text":"We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms.","title":"18. NOTICES"},{"location":"policies/terms-of-service/#19-miscellaneous","text":"19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service.","title":"19. MISCELLANEOUS"},{"location":"policies/terms-of-service/#192","text":"Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service.","title":"19.2."},{"location":"policies/terms-of-service/#193","text":"Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors.","title":"19.3."},{"location":"policies/terms-of-service/#194","text":"Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred.","title":"19.4."},{"location":"policies/terms-of-service/#195","text":"Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect.","title":"19.5."},{"location":"policies/terms-of-service/#196","text":"Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212.","title":"19.6."},{"location":"policies/terms-of-service/#20-copyright-complaints-and-removal-policy","text":"We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders.","title":"20. COPYRIGHT COMPLAINTS AND REMOVAL POLICY"},{"location":"policies/terms-of-service/#dmca-take-down-notices","text":"If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications.","title":"DMCA Take-Down Notices"},{"location":"policies/terms-of-service/#counter-notices","text":"If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice.","title":"Counter-Notices"},{"location":"policies/terms-of-service/#21-intellectual-property-notices","text":"All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"21. INTELLECTUAL PROPERTY NOTICES"}]}