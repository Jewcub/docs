{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Textile? \u00b6 Textile provides encrypted, recoverable, schema-based, and cross-application data storage built on IPFS and libp2p . We like to think of it as a decentralized data wallet with built-in protocols for sharing and recovery, or more simply, an open and programmable iCloud . We believe that future technology can be built around a new model of data ownership where individuals have total agency over the information they create. Textile aims to standardize the use of secure, cross-application user-owed data storage and communication by providing a set of easy-to-use developer tools and UX primitives. Let's build technology that can be loved while not worrying about censorship and privacy. With Textile, you can use or build applications... where users are able to utilize their data across applications and devices. where users are able to leverage their own storage backend. that run on mobile, web, and desktop. that can traverse the IPFS network on any device. by designing data structures (schemas) for user and app data, which can control encoding and encryption, and are also understandable by other applications (programmability). What can you do with it? \u00b6 Developers \u00b6 Build decentralized storage and sharing applications. See Textile Photos . Build better ways for users to manage their private information. See AirSecure . Build chat apps, website publishing services, health apps, family tools, and more. Got an idea, get in touch . Everyone \u00b6 Choose or federate your own backup and service nodes ( cafes ) and still participate in the whole network. Hint Head over to Get Started when you're ready! Textile libraries and apps \u00b6 The underlying Textile libraries and tools are already being used in production. SDKs, APIs, and apps are available for most major platforms (e.g., Android, iOS, Mac, Linux, Windows, etc), with more being developed on a regular basis. Feel free to poke around the various projects below to get a feel for what Textile is working on. Interested in building on top of the Textile platform? Get in touch ! Platform \u00b6 Core lib: https://github.com/textileio/go-textile iOS SDK: https://github.com/textileio/ios-textile Android SDK: https://github.com/textileio/android-textile React Native SDK: https://github.com/textileio/react-native-sdk JS HTTP Client: https://github.com/textileio/js-http-client/ The Tray: (desktop textile app installer) https://github.com/textileio/go-textile/tree/master/tray Apps \u00b6 Textile Photos: https://github.com/textileio/textile-mobile/ Textile Photos Desktop: https://github.com/textileio/photos-desktop Textile Notes: https://github.com/textileio/notes Other Resources \u00b6 Slack GitHub Twitter Blog","title":"Home"},{"location":"#what-is-textile","text":"Textile provides encrypted, recoverable, schema-based, and cross-application data storage built on IPFS and libp2p . We like to think of it as a decentralized data wallet with built-in protocols for sharing and recovery, or more simply, an open and programmable iCloud . We believe that future technology can be built around a new model of data ownership where individuals have total agency over the information they create. Textile aims to standardize the use of secure, cross-application user-owed data storage and communication by providing a set of easy-to-use developer tools and UX primitives. Let's build technology that can be loved while not worrying about censorship and privacy. With Textile, you can use or build applications... where users are able to utilize their data across applications and devices. where users are able to leverage their own storage backend. that run on mobile, web, and desktop. that can traverse the IPFS network on any device. by designing data structures (schemas) for user and app data, which can control encoding and encryption, and are also understandable by other applications (programmability).","title":"What is Textile?"},{"location":"#what-can-you-do-with-it","text":"","title":"What can you do with it?"},{"location":"#developers","text":"Build decentralized storage and sharing applications. See Textile Photos . Build better ways for users to manage their private information. See AirSecure . Build chat apps, website publishing services, health apps, family tools, and more. Got an idea, get in touch .","title":"Developers"},{"location":"#everyone","text":"Choose or federate your own backup and service nodes ( cafes ) and still participate in the whole network. Hint Head over to Get Started when you're ready!","title":"Everyone"},{"location":"#textile-libraries-and-apps","text":"The underlying Textile libraries and tools are already being used in production. SDKs, APIs, and apps are available for most major platforms (e.g., Android, iOS, Mac, Linux, Windows, etc), with more being developed on a regular basis. Feel free to poke around the various projects below to get a feel for what Textile is working on. Interested in building on top of the Textile platform? Get in touch !","title":"Textile libraries and apps"},{"location":"#platform","text":"Core lib: https://github.com/textileio/go-textile iOS SDK: https://github.com/textileio/ios-textile Android SDK: https://github.com/textileio/android-textile React Native SDK: https://github.com/textileio/react-native-sdk JS HTTP Client: https://github.com/textileio/js-http-client/ The Tray: (desktop textile app installer) https://github.com/textileio/go-textile/tree/master/tray","title":"Platform"},{"location":"#apps","text":"Textile Photos: https://github.com/textileio/textile-mobile/ Textile Photos Desktop: https://github.com/textileio/photos-desktop Textile Notes: https://github.com/textileio/notes","title":"Apps"},{"location":"#other-resources","text":"Slack GitHub Twitter Blog","title":"Other Resources"},{"location":"how/","text":"How it works \u00b6 Textile is a collection of technologies that allow nodes to run on mobile devices, laptops & desktops, and servers. The network is broken up into users with data wallets, apps permissioned to create or access a user's data, and services that do off-device work on the behalf of a user or the network. Textile can be run in client mode (i.e. in a mobile app or desktop app) or in cafe mode. While running in client mode, Textile nodes serve all the necessarly APIs to connect apps to the network. When running as cafes, Textile can provide services to the network. A good example of a cafe service service is the contact registry and search endpoint, where cafes can coordinate to help new users find each other on the network. Textile node (application framework) \u00b6 Run in Textile clients Use IPFS protocols (content-addressed data and networking) Example capabilities Generate new wallets Generate new accounts Create and join threads Data encryption store and retrieve data Textile cafes (anonymous services for apps) \u00b6 Deployed and managed as servers (single executable, Docker) Use IPFS protocols (content-addressed data and networking) Example capabilities Contact search Backup & recovery Message inboxing","title":"How it works"},{"location":"how/#how-it-works","text":"Textile is a collection of technologies that allow nodes to run on mobile devices, laptops & desktops, and servers. The network is broken up into users with data wallets, apps permissioned to create or access a user's data, and services that do off-device work on the behalf of a user or the network. Textile can be run in client mode (i.e. in a mobile app or desktop app) or in cafe mode. While running in client mode, Textile nodes serve all the necessarly APIs to connect apps to the network. When running as cafes, Textile can provide services to the network. A good example of a cafe service service is the contact registry and search endpoint, where cafes can coordinate to help new users find each other on the network.","title":"How it works"},{"location":"how/#textile-node-application-framework","text":"Run in Textile clients Use IPFS protocols (content-addressed data and networking) Example capabilities Generate new wallets Generate new accounts Create and join threads Data encryption store and retrieve data","title":"Textile node (application framework)"},{"location":"how/#textile-cafes-anonymous-services-for-apps","text":"Deployed and managed as servers (single executable, Docker) Use IPFS protocols (content-addressed data and networking) Example capabilities Contact search Backup & recovery Message inboxing","title":"Textile cafes (anonymous services for apps)"},{"location":"rest-api/","text":"","title":"REST API"},{"location":"start/","text":"Get Started \u00b6 Learn more \u00b6 Start here to learn more about the concepts and design behind Textile. Run a Textile node \u00b6 You can use Textile in a few different ways. Run the desktop app, run a local daemon , or setup your own cafe . Finally, you can run a Textile node by installing any one of mobile apps . Build with Textile \u00b6 If you want to start building an app using Textile, check out the client libraries","title":"Get started"},{"location":"start/#get-started","text":"","title":"Get Started"},{"location":"start/#learn-more","text":"Start here to learn more about the concepts and design behind Textile.","title":"Learn more"},{"location":"start/#run-a-textile-node","text":"You can use Textile in a few different ways. Run the desktop app, run a local daemon , or setup your own cafe . Finally, you can run a Textile node by installing any one of mobile apps .","title":"Run a Textile node"},{"location":"start/#build-with-textile","text":"If you want to start building an app using Textile, check out the client libraries","title":"Build with Textile"},{"location":"clients/","text":"Learn more \u00b6 There are various ways to get started with Textile, from running your own Textile node at home, to building a full-blown application. Run a node \u00b6 Fist things first. You may just want to play on the network, add some files, or send some chat messages. Daemon \u00b6 TODO: Install go-textile release Desktop \u00b6 TODO: Install desktop TODO: Now that the node is running, use the command-line client to create threads, schemas, files, messages, etc. Build apps \u00b6 Mobile applications can use one of the SDKs below, which contain the Textile node and a client. Desktop applications should utilize Textile Desktop , which provides an HTTP REST API for other applications to interact with on localhost . JavaScript/Typescript developers can use the JS HTTP Client . Let us know if you need or would like to help with a client in another language. Mobile \u00b6 Choose your preferred SDK: React Native SDK Android SDK iOS SDK Electron \u00b6 Textile Desktop + JS HTTP Client Web \u00b6 Textile Desktop + JS HTTP Client We plan to write a full JavaScript implementation of the Textile node, allowing apps to run without a desktop peer. This library will be started in Q3 2019. Go \u00b6 You can use the Core Library to leverage Textile in any Go project.","title":"Home"},{"location":"clients/#learn-more","text":"There are various ways to get started with Textile, from running your own Textile node at home, to building a full-blown application.","title":"Learn more"},{"location":"clients/#run-a-node","text":"Fist things first. You may just want to play on the network, add some files, or send some chat messages.","title":"Run a node"},{"location":"clients/#daemon","text":"TODO: Install go-textile release","title":"Daemon"},{"location":"clients/#desktop","text":"TODO: Install desktop TODO: Now that the node is running, use the command-line client to create threads, schemas, files, messages, etc.","title":"Desktop"},{"location":"clients/#build-apps","text":"Mobile applications can use one of the SDKs below, which contain the Textile node and a client. Desktop applications should utilize Textile Desktop , which provides an HTTP REST API for other applications to interact with on localhost . JavaScript/Typescript developers can use the JS HTTP Client . Let us know if you need or would like to help with a client in another language.","title":"Build apps"},{"location":"clients/#mobile","text":"Choose your preferred SDK: React Native SDK Android SDK iOS SDK","title":"Mobile"},{"location":"clients/#electron","text":"Textile Desktop + JS HTTP Client","title":"Electron"},{"location":"clients/#web","text":"Textile Desktop + JS HTTP Client We plan to write a full JavaScript implementation of the Textile node, allowing apps to run without a desktop peer. This library will be started in Q3 2019.","title":"Web"},{"location":"clients/#go","text":"You can use the Core Library to leverage Textile in any Go project.","title":"Go"},{"location":"clients/android/","text":"","title":"Android"},{"location":"clients/cmd/","text":"","title":"Command-line"},{"location":"clients/ios/","text":"","title":"iOS"},{"location":"clients/js/","text":"","title":"JavaScript"},{"location":"learn/","text":"Overview \u00b6 Textile is a collection of technologies that allow nodes to run on mobile devices, laptops & desktops, and servers. The network is broken up into users with data wallets, apps permissioned to create or access a user's data, and services that do off-device work on the behalf of a user or the network. Textile can be run in client mode (i.e. in a mobile app or desktop app) or in cafe mode. While running in client mode, Textile nodes serve the APIs needed to connect apps to the network. When running as cafes, Textile can provide services to the network. A good example of a cafe service service is the contact registry and search endpoint, where cafes can coordinate to help new users find each other on the network. Textile node (application framework) \u00b6 Run in Textile clients Use IPFS protocols (content-addressed data and networking) Example capabilities Generate new wallets Generate new accounts Create and join threads Data encryption store and retrieve data Textile cafes (anonymous services for apps) \u00b6 Deployed and managed as servers (single executable, Docker) Use IPFS protocols (content-addressed data and networking) Example capabilities Contact search Backup & recovery Message inboxing","title":"Overview"},{"location":"learn/#overview","text":"Textile is a collection of technologies that allow nodes to run on mobile devices, laptops & desktops, and servers. The network is broken up into users with data wallets, apps permissioned to create or access a user's data, and services that do off-device work on the behalf of a user or the network. Textile can be run in client mode (i.e. in a mobile app or desktop app) or in cafe mode. While running in client mode, Textile nodes serve the APIs needed to connect apps to the network. When running as cafes, Textile can provide services to the network. A good example of a cafe service service is the contact registry and search endpoint, where cafes can coordinate to help new users find each other on the network.","title":"Overview"},{"location":"learn/#textile-node-application-framework","text":"Run in Textile clients Use IPFS protocols (content-addressed data and networking) Example capabilities Generate new wallets Generate new accounts Create and join threads Data encryption store and retrieve data","title":"Textile node (application framework)"},{"location":"learn/#textile-cafes-anonymous-services-for-apps","text":"Deployed and managed as servers (single executable, Docker) Use IPFS protocols (content-addressed data and networking) Example capabilities Contact search Backup & recovery Message inboxing","title":"Textile cafes (anonymous services for apps)"},{"location":"learn/cafes/","text":"Cafes \u00b6 A cafe is a Textile peer that offers additional services to the peer network Access to cafe services is granted via JWT-based sessions, and initial registration with a cafe requires an access token. Any peer can operate as a cafe, though they work best for always-on peers. cafes run an 'extra' network API that handles client and host requests over libp2p or HTTP. Services \u00b6 Backup \u00b6 The primary function of a cafe is to provide a recovery mechanism for its clients . Once registered with a cafe, clients' data (which is, by default, encrypted) is automatically synced. This involves a combination of authenticated IPFS pinning and thread snapshots. A Thread snapshot contains only the metadata and latest known update hash (HEAD) needed to reconstruct the entire Thread from scratch, and is encrypted with the client's account key. This means that cafes only issue encrypted backups and are not able to read their clients' Threads. This also means that the snapshots are useless if a client loses their account key. Offline Inbox-ing \u00b6 Very often, a peer is not online or is otherwise unreachable and therefore unable to receive a message (usually a thread update message). In this failed state, the sender can send the message to the recipient's always-online cafe(s), ensuring the message is delivered when the recipient returns online. In practice, this means that, when available, cafe \"inbox\" addresses are attached to Textile peer contacts , which get published to the network. This is sort of like your phone's voicemail service, but here you're in control of where the message is actually delivered (ideally a computer you control or trust). User Search Indexing \u00b6 Textile provides tooling for certain types of network-wide queries, like user search. Changes to a peer's public-facing contact is indexed and made query-able by its cafes. So, while you do not need to be registered with a cafe in order to leverage these queries, doing so may increase your chances of being discovered by others, assuming you local peer is periodically offline.","title":"Cafes"},{"location":"learn/cafes/#cafes","text":"A cafe is a Textile peer that offers additional services to the peer network Access to cafe services is granted via JWT-based sessions, and initial registration with a cafe requires an access token. Any peer can operate as a cafe, though they work best for always-on peers. cafes run an 'extra' network API that handles client and host requests over libp2p or HTTP.","title":"Cafes"},{"location":"learn/cafes/#services","text":"","title":"Services"},{"location":"learn/cafes/#backup","text":"The primary function of a cafe is to provide a recovery mechanism for its clients . Once registered with a cafe, clients' data (which is, by default, encrypted) is automatically synced. This involves a combination of authenticated IPFS pinning and thread snapshots. A Thread snapshot contains only the metadata and latest known update hash (HEAD) needed to reconstruct the entire Thread from scratch, and is encrypted with the client's account key. This means that cafes only issue encrypted backups and are not able to read their clients' Threads. This also means that the snapshots are useless if a client loses their account key.","title":"Backup"},{"location":"learn/cafes/#offline-inbox-ing","text":"Very often, a peer is not online or is otherwise unreachable and therefore unable to receive a message (usually a thread update message). In this failed state, the sender can send the message to the recipient's always-online cafe(s), ensuring the message is delivered when the recipient returns online. In practice, this means that, when available, cafe \"inbox\" addresses are attached to Textile peer contacts , which get published to the network. This is sort of like your phone's voicemail service, but here you're in control of where the message is actually delivered (ideally a computer you control or trust).","title":"Offline Inbox-ing"},{"location":"learn/cafes/#user-search-indexing","text":"Textile provides tooling for certain types of network-wide queries, like user search. Changes to a peer's public-facing contact is indexed and made query-able by its cafes. So, while you do not need to be registered with a cafe in order to leverage these queries, doing so may increase your chances of being discovered by others, assuming you local peer is periodically offline.","title":"User Search Indexing"},{"location":"learn/config/","text":"Config \u00b6 The Textile config file is similar in structure and usage to the IPFS config file. It is a JSON document located at <repo-dir>/textile . It is read once at node instantiation, either for an offline command, or when starting the daemon. Commands that execute on a running daemon do not read the config file at runtime. The various settings control different aspects of a Textile node, from public account information, to API access and functionality, to activity logging and everything in between. Here, we cover each config section in detail, though users are encouraged to explore the Textile command-line tools for further details and information (try textile config --help to get started). Account \u00b6 Stores public account information. These values are populated upon repository initialization, and are not currently configurable. * Address is the public key, whose seed is stored in the possibly encrypted datastore. * Thread is the thread id of the default account thread used for syncing information between account peers. Default : \"Account\": { \"Address\": \"\", \"Thread\": \"\" } Addresses \u00b6 Stores the bind addresses for the various node HTTP APIs. API is the address of the local node REST API (RPC). CafeAPI is the address of the cafe REST API. Gateway is the address to listen on for the IPFS HTTP gateway. The API address is the address that the daemon will serve the HTTP API from. This API is used to control the daemon through the command line (or via curl or some other client). Unlike the Gateway address, you should ensure that the API address is not dial-able from outside of your machine, or potentially malicious parties may be able to send commands to your Textile daemon. Having said that, see the [ API ] config entry for details on further controlling the API HTTP server. The CafeAPI address is the address that the Textile peer will serve the cafe REST API. This API is used to enable other peers on the network to request pinning, backup, and inbox services. Normally, a only a designated cafe peer would enable this API, though any peer may operate as a cafe if they want. See [[Cafes|Cafes]] wiki page for details. The Gateway address is the address that the daemon will serve the gateway interface from. The gateway may be used to view files through Textile, and serve static content. This port may or may not be dial-able from outside you machine, that's entirely up to you. The Gateway address is on by default, but if you leave it blank, the gateway server will not start. The Addresses config settings can be specified at node initialization via the Textile init subcommand's address options (see textile init --help for details). Alternatively, they can be modified individually via the config subcommand (e.g., textile config Addresses.API '\"127.0.0.1:40600\"' ). Default : \"Addresses\": { \"API\": \"127.0.0.1:40600\", \"CafeAPI\": \"127.0.0.1:40601\", \"Gateway\": \"127.0.0.1:5050\" } API \u00b6 Stores settings specific to the local node REST API. HTTPHeaders is a map of the HTTP headers to set on responses from the API HTTP server. The API config entry contains information (settings) to be used by the node REST API. Essentially, your daemon is running a lightweight HTTP server that will respond to client (e.g., IPFS commands, curl) requests. The HTTPHeaders sub-entry (currently the only entry under the API config option) is a map of HTTP headers to set on responses from your API HTTP server. You might want to edit these settings if you need to allow additional access control methods, or require authorization headers , etc. For example, you may want to enable CORS for your API; this can be done by modifying your \"Access-Control-Allow-Origin\" header. See this blog post for a discussion of similar IPFS gateway settings. These settings can be modified via the config subcommand. For example, to allow CORS from all origins, you can do textile config API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' . Default : \"API\": { \"HTTPHeaders\": { \"Access-Control-Allow-Headers\": [ \"Content-Type\", \"Method\", \"X-Textile-Args\", \"X-Textile-Opts\", \"X-Requested-With\" ], \"Access-Control-Allow-Methods\": [ \"GET\", \"POST\", \"DELETE\", \"OPTIONS\" ], \"Access-Control-Allow-Origin\": [], \"Server\": [ \"textile-go/<version>\" ] } } Logs \u00b6 Stores settings relevant to logging node activities and services. LogToDisk is a boolean indicating whether to send all logs to rolling files on disk (true) or Stdout (false). The LogToDisk config entry controls how a node handles subsystem logging. By default, when LogToDisk is true , logs are written to <repo-dir>/logs/textile.log . These can be monitored via tail -f <repo-dir>/logs/textile.log or similar. The verbosity of these logs can be controlled at run-time via the Textile logs subcommand (see textile logs --help for details), or at node instantiation ( textile daemon ) via the --logs flag (see textile daemon --help for details). This config entry they can be modified directly via the config subcommand (e.g., textile config Logs.LogToDisk 'true' ). Default : \"Logs\": { \"LogToDisk\": true, } Threads \u00b6 Stores settings controlling defaults for threads. Defaults.ID is the default thread ID for reads/writes. A node can have a default thread ID that is used when a thread ID is not supplied to a given command or API call. This can simplify thread access on a peer with a singular thread, when testing command line tools, or in mobile-specific apps where a default thread is useful (for example, a user's backup thread). This setting can be accessed via the Textile threads default subcommand (or via the config subcommand), and can be set directly via the config subcommand (e.g., textile config Threads.Defaults.ID '\"<thread-id>\"' ). Default : \"Threads\": { \"Defaults\": { \"ID\": \"\" } } Cafe \u00b6 Stores settings controlling whether a node is running in cafe mode, and how it should be accessed by clients. Host is a JSON object where... Open is a boolean controlling whether other peers can register with this node for cafe services. PublicIP is a string specifying the public IP address for the Cafe. URL is a string specifying the public-facing URL of the host machine. This is needed in order to issue sessions to mobile clients, which need to communicate with the cafe over HTTP for background upload tasks. Client is a JSON object where... Mobile is a JSON object where... P2PWireLimit is an integer cutoff/limit for determining how a message will be transmitted to peers. The Cafe config entry is broken up into two sections, one for controlling how a cafe Host behaves, and one for controlling how a Client interacts with a host peer. Currently, only a Mobile client entry is used. Cafes can be controlled to some degree via the Textile cafes subcommand (see textile cafes --help for details), and via the config subcommand (see textile config --help for details). See also the [[Cafes|Cafes]] wiki page. For the Host config entries, Open is used to control if a Textile node is running in cafe mode or not. If not, then the Addresses.CafeAPI settings are not used, and the node will only operate as a potential client node. If a node is running in cafe mode , then the PublicIP config entry can be used to specify the public IP address of a cafe node in instances where IPFS' NAT traversal is unable to discover the public IP. This may, for example, happen when running a cafe on an Amazon EC2 instance or similar. Both of these settings can be modified via the config subcommand (e.g., textile config Cafe.Host.Open true ), though they will require the daemon to be restarted before taking effect. Clients normally register with one or more cafes. The Client will then remote pin/upload files/messages to a single cafe address provided by a cafe session object. Messages with size less than P2PWireLimit will be handled by the p2p cafe service, whereas messages with size greater than P2PWireLimit will be handled by the mobile OS's background upload service and the cafe's HTTP API. Clients can register with a cafe (see textile cafes register --help ), and check cafe messages (see textile cafes messages --help ) via the command line using the cafes subcommands. Again, the P2PWireLimit setting can be modified via the config subcommand (e.g., textile config Cafe.Client.Mobile.P2PWireLimit 20000 ). Default : \"Cafe\": { \"Host\": { \"Open\": false, \"PublicIP\": \"\", \"URL\": \"\" }, \"Client\": { \"Mobile\": { \"P2PWireLimit\": 20000 } } } Additional Settings \u00b6 Stores settings specific to how a local node is set up; for example, for running on a mobile device, or as a server with a public IP address. IsMobile is a boolean indicating whether the local node is setup for mobile. IsServer is a boolean indicating whether the local node is setup as a server with a public IP. These settings are only modified when initializing a new nod. For example, when accessing Textile on a mobile device, the IsMobile config entry will automatically be set to true . Conversely, when initializing a desktop or server node, the --server flag may be specified, which will set IsServer to true, and apply the IPFS server profile to the underlying IPFS node. See textile init --help and this blog post for details. Alternatively, they can be modified individually via the config subcommand (e.g., textile config IsServer true ). Default : \"IsMobile\": false, \"IsServer\": false","title":"Config"},{"location":"learn/config/#config","text":"The Textile config file is similar in structure and usage to the IPFS config file. It is a JSON document located at <repo-dir>/textile . It is read once at node instantiation, either for an offline command, or when starting the daemon. Commands that execute on a running daemon do not read the config file at runtime. The various settings control different aspects of a Textile node, from public account information, to API access and functionality, to activity logging and everything in between. Here, we cover each config section in detail, though users are encouraged to explore the Textile command-line tools for further details and information (try textile config --help to get started).","title":"Config"},{"location":"learn/config/#account","text":"Stores public account information. These values are populated upon repository initialization, and are not currently configurable. * Address is the public key, whose seed is stored in the possibly encrypted datastore. * Thread is the thread id of the default account thread used for syncing information between account peers. Default : \"Account\": { \"Address\": \"\", \"Thread\": \"\" }","title":"Account"},{"location":"learn/config/#addresses","text":"Stores the bind addresses for the various node HTTP APIs. API is the address of the local node REST API (RPC). CafeAPI is the address of the cafe REST API. Gateway is the address to listen on for the IPFS HTTP gateway. The API address is the address that the daemon will serve the HTTP API from. This API is used to control the daemon through the command line (or via curl or some other client). Unlike the Gateway address, you should ensure that the API address is not dial-able from outside of your machine, or potentially malicious parties may be able to send commands to your Textile daemon. Having said that, see the [ API ] config entry for details on further controlling the API HTTP server. The CafeAPI address is the address that the Textile peer will serve the cafe REST API. This API is used to enable other peers on the network to request pinning, backup, and inbox services. Normally, a only a designated cafe peer would enable this API, though any peer may operate as a cafe if they want. See [[Cafes|Cafes]] wiki page for details. The Gateway address is the address that the daemon will serve the gateway interface from. The gateway may be used to view files through Textile, and serve static content. This port may or may not be dial-able from outside you machine, that's entirely up to you. The Gateway address is on by default, but if you leave it blank, the gateway server will not start. The Addresses config settings can be specified at node initialization via the Textile init subcommand's address options (see textile init --help for details). Alternatively, they can be modified individually via the config subcommand (e.g., textile config Addresses.API '\"127.0.0.1:40600\"' ). Default : \"Addresses\": { \"API\": \"127.0.0.1:40600\", \"CafeAPI\": \"127.0.0.1:40601\", \"Gateway\": \"127.0.0.1:5050\" }","title":"Addresses"},{"location":"learn/config/#api","text":"Stores settings specific to the local node REST API. HTTPHeaders is a map of the HTTP headers to set on responses from the API HTTP server. The API config entry contains information (settings) to be used by the node REST API. Essentially, your daemon is running a lightweight HTTP server that will respond to client (e.g., IPFS commands, curl) requests. The HTTPHeaders sub-entry (currently the only entry under the API config option) is a map of HTTP headers to set on responses from your API HTTP server. You might want to edit these settings if you need to allow additional access control methods, or require authorization headers , etc. For example, you may want to enable CORS for your API; this can be done by modifying your \"Access-Control-Allow-Origin\" header. See this blog post for a discussion of similar IPFS gateway settings. These settings can be modified via the config subcommand. For example, to allow CORS from all origins, you can do textile config API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' . Default : \"API\": { \"HTTPHeaders\": { \"Access-Control-Allow-Headers\": [ \"Content-Type\", \"Method\", \"X-Textile-Args\", \"X-Textile-Opts\", \"X-Requested-With\" ], \"Access-Control-Allow-Methods\": [ \"GET\", \"POST\", \"DELETE\", \"OPTIONS\" ], \"Access-Control-Allow-Origin\": [], \"Server\": [ \"textile-go/<version>\" ] } }","title":"API"},{"location":"learn/config/#logs","text":"Stores settings relevant to logging node activities and services. LogToDisk is a boolean indicating whether to send all logs to rolling files on disk (true) or Stdout (false). The LogToDisk config entry controls how a node handles subsystem logging. By default, when LogToDisk is true , logs are written to <repo-dir>/logs/textile.log . These can be monitored via tail -f <repo-dir>/logs/textile.log or similar. The verbosity of these logs can be controlled at run-time via the Textile logs subcommand (see textile logs --help for details), or at node instantiation ( textile daemon ) via the --logs flag (see textile daemon --help for details). This config entry they can be modified directly via the config subcommand (e.g., textile config Logs.LogToDisk 'true' ). Default : \"Logs\": { \"LogToDisk\": true, }","title":"Logs"},{"location":"learn/config/#threads","text":"Stores settings controlling defaults for threads. Defaults.ID is the default thread ID for reads/writes. A node can have a default thread ID that is used when a thread ID is not supplied to a given command or API call. This can simplify thread access on a peer with a singular thread, when testing command line tools, or in mobile-specific apps where a default thread is useful (for example, a user's backup thread). This setting can be accessed via the Textile threads default subcommand (or via the config subcommand), and can be set directly via the config subcommand (e.g., textile config Threads.Defaults.ID '\"<thread-id>\"' ). Default : \"Threads\": { \"Defaults\": { \"ID\": \"\" } }","title":"Threads"},{"location":"learn/config/#cafe","text":"Stores settings controlling whether a node is running in cafe mode, and how it should be accessed by clients. Host is a JSON object where... Open is a boolean controlling whether other peers can register with this node for cafe services. PublicIP is a string specifying the public IP address for the Cafe. URL is a string specifying the public-facing URL of the host machine. This is needed in order to issue sessions to mobile clients, which need to communicate with the cafe over HTTP for background upload tasks. Client is a JSON object where... Mobile is a JSON object where... P2PWireLimit is an integer cutoff/limit for determining how a message will be transmitted to peers. The Cafe config entry is broken up into two sections, one for controlling how a cafe Host behaves, and one for controlling how a Client interacts with a host peer. Currently, only a Mobile client entry is used. Cafes can be controlled to some degree via the Textile cafes subcommand (see textile cafes --help for details), and via the config subcommand (see textile config --help for details). See also the [[Cafes|Cafes]] wiki page. For the Host config entries, Open is used to control if a Textile node is running in cafe mode or not. If not, then the Addresses.CafeAPI settings are not used, and the node will only operate as a potential client node. If a node is running in cafe mode , then the PublicIP config entry can be used to specify the public IP address of a cafe node in instances where IPFS' NAT traversal is unable to discover the public IP. This may, for example, happen when running a cafe on an Amazon EC2 instance or similar. Both of these settings can be modified via the config subcommand (e.g., textile config Cafe.Host.Open true ), though they will require the daemon to be restarted before taking effect. Clients normally register with one or more cafes. The Client will then remote pin/upload files/messages to a single cafe address provided by a cafe session object. Messages with size less than P2PWireLimit will be handled by the p2p cafe service, whereas messages with size greater than P2PWireLimit will be handled by the mobile OS's background upload service and the cafe's HTTP API. Clients can register with a cafe (see textile cafes register --help ), and check cafe messages (see textile cafes messages --help ) via the command line using the cafes subcommands. Again, the P2PWireLimit setting can be modified via the config subcommand (e.g., textile config Cafe.Client.Mobile.P2PWireLimit 20000 ). Default : \"Cafe\": { \"Host\": { \"Open\": false, \"PublicIP\": \"\", \"URL\": \"\" }, \"Client\": { \"Mobile\": { \"P2PWireLimit\": 20000 } } }","title":"Cafe"},{"location":"learn/config/#additional-settings","text":"Stores settings specific to how a local node is set up; for example, for running on a mobile device, or as a server with a public IP address. IsMobile is a boolean indicating whether the local node is setup for mobile. IsServer is a boolean indicating whether the local node is setup as a server with a public IP. These settings are only modified when initializing a new nod. For example, when accessing Textile on a mobile device, the IsMobile config entry will automatically be set to true . Conversely, when initializing a desktop or server node, the --server flag may be specified, which will set IsServer to true, and apply the IPFS server profile to the underlying IPFS node. See textile init --help and this blog post for details. Alternatively, they can be modified individually via the config subcommand (e.g., textile config IsServer true ). Default : \"IsMobile\": false, \"IsServer\": false","title":"Additional Settings"},{"location":"learn/contacts/","text":"","title":"Contacts"},{"location":"learn/network/","text":"Network \u00b6 TODO: Diagram of the IPFS network + Textile clients and cafes.","title":"Network"},{"location":"learn/network/#network","text":"TODO: Diagram of the IPFS network + Textile clients and cafes.","title":"Network"},{"location":"learn/wallet/","text":"Wallet \u00b6 TODO: Expand? A Textile 'wallet' is a core component of the Textile system. A wallet is represented by mnemonic phrase, and in practice is a BIP32 Hierarchical Deterministic Wallet based on Stellar's implementation of SLIP-0010 . You can learn more about BIP39 mnemonics and more in this really nice interactive webpage . You can think of a wallet as a master key, and the account (see accounts ) represent keys specific to a given application or use-case. Any given wallet may create an arbitrary number of accounts. For example, you may use a wallet to provision multiple Textile Photos 'accounts', each with a completely different persona if you so choose. This provides a powerful framework 'partitioning' use cases. It is also the backbone for enabling account backup and recovery. From the command-line, a new wallet can be generated with the textile wallet init command. The output produces a simple, multi-word 'phrase' (of varying levels of entropy) useful for the generation of deterministic binary seeds. Textile currently supports 12, 15, 18, 21, or 24 'words'. $textile wallet init ----------------------------------------------------------------------- | blah blah blah blade blah blah blah blah blah blah blah blah | ----------------------------------------------------------------------- WARNING! Store these words above in a safe place! WARNING! If you lose your words, you will lose access to data in all derived accounts! WARNING! Anyone who has access to these words can access your wallet accounts! Use: `wallet accounts` command to inspect more accounts. --- ACCOUNT 0 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah Accounts \u00b6 Accounts are generated via the wallet pass-phrase (as above) and are an Ed25519 public/private keypair used to sign backups, provision libp2p identities, etc. Textile uses Ed25519 here because it's fast, compact, secure, and widely used. See the EdDSA Wikipedia page for more details. From the command-line, a new account can be generated with the textile wallet accounts command. The output produces a new account address and key (see textile wallet accounts --help for details). Multiple accounts can be provisioned at once, to any arbitrary depth. An offset can also be supplied. $textile wallet accounts \"blah blah ... blah blah -d 2 -o 1 --- ACCOUNT 1 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah --- ACCOUNT 2 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah","title":"Wallet"},{"location":"learn/wallet/#wallet","text":"TODO: Expand? A Textile 'wallet' is a core component of the Textile system. A wallet is represented by mnemonic phrase, and in practice is a BIP32 Hierarchical Deterministic Wallet based on Stellar's implementation of SLIP-0010 . You can learn more about BIP39 mnemonics and more in this really nice interactive webpage . You can think of a wallet as a master key, and the account (see accounts ) represent keys specific to a given application or use-case. Any given wallet may create an arbitrary number of accounts. For example, you may use a wallet to provision multiple Textile Photos 'accounts', each with a completely different persona if you so choose. This provides a powerful framework 'partitioning' use cases. It is also the backbone for enabling account backup and recovery. From the command-line, a new wallet can be generated with the textile wallet init command. The output produces a simple, multi-word 'phrase' (of varying levels of entropy) useful for the generation of deterministic binary seeds. Textile currently supports 12, 15, 18, 21, or 24 'words'. $textile wallet init ----------------------------------------------------------------------- | blah blah blah blade blah blah blah blah blah blah blah blah | ----------------------------------------------------------------------- WARNING! Store these words above in a safe place! WARNING! If you lose your words, you will lose access to data in all derived accounts! WARNING! Anyone who has access to these words can access your wallet accounts! Use: `wallet accounts` command to inspect more accounts. --- ACCOUNT 0 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah","title":"Wallet"},{"location":"learn/wallet/#accounts","text":"Accounts are generated via the wallet pass-phrase (as above) and are an Ed25519 public/private keypair used to sign backups, provision libp2p identities, etc. Textile uses Ed25519 here because it's fast, compact, secure, and widely used. See the EdDSA Wikipedia page for more details. From the command-line, a new account can be generated with the textile wallet accounts command. The output produces a new account address and key (see textile wallet accounts --help for details). Multiple accounts can be provisioned at once, to any arbitrary depth. An offset can also be supplied. $textile wallet accounts \"blah blah ... blah blah -d 2 -o 1 --- ACCOUNT 1 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah --- ACCOUNT 2 --- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah","title":"Accounts"},{"location":"learn/threads/","text":"Threads \u00b6 TODO: Replace diagrams with xmind to match files diagrams, add top-level design constraints, roadmap Threads are built into the fabric of Textile as a way to allow group members to keep a record of who shared what data, and when. This simple concept is actually quite powerful \u2014 and on the surface, you can think of a Thread like a decentralized database, shared between specific participants. Threads are defined by schemas and contain blocks of information (or updates). They are specifically designed to work well in mobile, offline-first scenarios, where peers are constantly making updates, coming online, and going offline. This means avoiding state conflicts is a central focus of their operation. This issue comes up frequently when working collaboratively on documents, updating shared databases, etc. Conflict Avoidance/Resolution \u00b6 For the purposes of updating a shared Thread of photos or similar data, it turns out that an operation-based CRDT that supports append-only operations is pretty much all you need to get going. You can think of Textile's Threads CRDT (which shares some ideas with ipfs-log ) setup as an immutable, append-only tree that can be used to model a mutable, shared state between peers. Every entry in the tree is saved on IPFS, and each points to a hash of previous entry(ies) forming a graph. These trees can be 3-way and fast-forward merged . For those familiar with git and other similar system, you might be thinking this sounds a lot like a git hash tree , Merkle DAG , or even a blockchain . And you\u2019d be right! The concepts are very similar, and this buys us some really nice properties for building and maintaining a shared state. By modeling our shared Thread state in this way, we benefit from tried and tested methods for allowing a peer to incorporate other peers' updates into their state while maintaining history (via fast-forwards and three-way merging for example). Each Thread is essentially a chain of updates, where each update represents some specific action or event (see [[Blocks|Blocks]] for details). For instance, when you create a new Thread, under-the-hood you are actually creating a JOIN update on a new Thread chain. Similarly, when you update the Thread via a new photo ( FILES update), or message ( MESSAGE update), you're actually updating that Thread chain. After each modification, the HEAD of the Thread will point to the latest update. Example \u00b6 To give you a better idea of what exactly we're talking about, consider the following set of operations: User A creates a new Thread, and adds a Photo. They then externally invite User B (sent via some other secure communication channel), who eventually joins the Thread. But before User B is able to join the Thread, User A adds another Photo, moving the Thread\u2019s HEAD forward. By the time User B joins the Thread, they'd end up with a Thread sequence that looks something like this: Thread join example. Solid arrows point towards the 'parent' of a given update, over-the-wire communications are indicated with a \ud83d\udcf6-style arrow, and messages that are rebroadcast (e.g., via the welcome message) are indicated with a dashed arrow. Similarly, merges point to both their parent updates. Here, we see the merge happening at the end of the sequence because the bottom peer is joining via an external invite that is no longer HEAD , forcing them to merge the most recent DATA update with their own JOIN update. But since merge results are deterministic (given the same parents), both peers create the MERGE update locally, and do not broadcast them to avoid trading merges back and forth. A more complete sequence is given in the following figure. Suppose User A goes 'offline' (e.g., their phone goes to sleep, they shut down the app, they lose their data connection, etc), and in the mean time, both Users A and B update the Thread, with User A adding an ANNOTATION update, and User B adding a new Photo ( FILES update). Now, when User A comes back online, there is a conflict, and both Users create a MERGE update to remedy this. A MERGE update has two parents, in this case, the FILES and ANNOTATION update from the different users. As always, the HEAD continues to point to the latest update (which in the example below eventually becomes an ANNOTATION from User B). Once both peers are online again, the more straightforward update and transmit mode of operation can continue. More complex Thread interaction where one or more peers are temporarily offline. Note that an external invite is the same as a normal invite, but the invite details are encrypted with a single use key, which is sharable with the invite update location. The same properties that make hash trees or blockchains useful for developing a shared, consistent (consensus-driven) state, also makes it possible to recover the full state of a Thread from the network as a whole. Because each Thread update references its parent(s), given a single point on the Thread chain, we can trace back all the way to the beginning of the Thread. For example, at any point along the sequence in the above figures, a peer can trace back the history of the Thread, as indicated by the solid arrows. This works particularly nicely when a peer JOIN s a thread, even at a point prior to the current HEAD . They can simply JOIN , and any existing Thread member can send them the latest HEAD (even via offline messages if needed). From here, they can explore the entire history of the Thread with ease. This is all really similar to git commit speak, in which one only needs to know about a single commit to be able to trace back the entire history of a code project; it\u2019s also essentially how blockchains work. Thread Types \u00b6 Currently, Textile supports four types of Threads, 'private', 'read_only', 'public', or 'open' to support different levels of Access Control . As you might have guessed, private Threads are only accessible via the account that created them, and may be used for internal or app-based applications such as tracking different account devices, or user -specific applications such as a private camera-roll. Similarly, read_only Threads are accessible to any peer that has been invited to the Thread, but only the initiator can actually modify the Thread in any way, whereas public Threads support annotations by non-initiators . These types of Threads are useful for public, one-way consumable feeds. Conversely, an open Thread is one in which any peer that has been invited to join the Thread can modify it, invite others, etc. These are the most common type of Thread. They can support things like multi-way chat, community-curated feeds, and are currently used in Textile Photos for private groups to share photos. In addition to Thread Types for Access Control, Textile supports Thread Sharing for Sharing Control. When configuring a Thread, a Type field specifies the Thread type as specified above ('private', 'read_only', 'public', or 'open'.), and a Sharing field specifies if sharing is allowed and by whom. Options include 'not-shared', 'invite-only', and 'shared'. For 'not-shared', the Thread is pinned to a given set of \"members\", whereas 'invite-only' means only the initiator can invite additional peers. The least restrictive option ('shared') means that any existing member of the Thread may share/invite the Thread with others. Finally, an additional Members field, can be used to control which peers are able to join a given Thread. If this field is left empty, then all peers are potential members, and invites are governed entirely by the Sharing field. If this field contains one or more peers, then only those peers are permitted to interact with the given Thread. It is important to note that an invite-only Thread with a fixed members list means that invites can only be sent to the member list by the initiator, whereas an invite-only Thread with an empty member list means that invites can be sent to anyone by the initiator. This is important because all members of a Thread should expect that the member list is either fixed or not. For example, imagine a 1-1 conversation where the other peer invites a stranger in. If you had joined with the notion that the initiator could invite others (not fixed member list) then you might expect that could happen and behave slightly differently? To help illustrate the restrictions these fields provide, here is a table to give a rough idea of the available options: Access Control & Sharing Control \u00b6 Thread Type controls read (R), annotate (A), and write (W) access: private --> initiator: RAW, members: read-only --> initiator: RAW, members: R public --> initiator: RAW, members: RA open --> initiator: RAW, members: RAW Thread Sharing style controls if (Y/N) a thread can be shared: not-shared --> initiator: N, members: N invite-only --> initiator: Y, members: N shared --> initiator: Y, members: Y For example, a personal camera roll backup might be private and not-shared, whereas an open group (default in Textile Photos app) would be open and shared. Alternatively, you could support a 'closed' group by using an open, but invite-only Thread. With three 'knobs' to adjust, the combination of Thread types is quite extensive, and may facilitate new and interesting types of interactions. We do not pretend to have uses for all combinations, and some combinations may be redundant, or even contradicting in some cases (for example, an 'open', 'shared' Thread with a 'members' list of 1 is essentially just a private Thread, because membership trumps the other options). From the Command-line \u00b6 From the command-line, Threads can be added, listed, accessed, removed, and their members can be queried. See textile theads --help for details. The most basic operation, adding a new Thread, takes multiple (mostly optional) inputs, and produces a new, empty Thread. Inputs can include a key , which is a locally unique key used by an app to identify this thread on recovery, a type , which sets the thread type as discussed above, a sharing option, which controls the sharing control as discussed above, and a member option to control Thread membership. This one can be used multiple times to include multiple peers, or left blank to include any/all peers. The additional options, schema , media , and camera-roll are used to control the [[Schema|Schemas]] used for the Thread, and are discussed elsewhere. $ textile threads add --type 'open' --sharing 'shared' --media \"My Open+Shared+Media Thread\" { \"id\" : \"blahblahblahblahblahblahblahblah\" , \"key\" : \"somelongalphanumerickey\" , \"name\" : \"My Open+Shared+Media Thread\" , \"schema\" : { \"name\" : \"media\" , \"pin\" : true, \"plaintext\" : false, \"links\" : { \"large\" : { \"use\" : \":file\" , \"pin\" : false, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"800\" } } , \"small\" : { \"use\" : \":file\" , \"pin\" : false, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"320\" } } , \"thumb\" : { \"use\" : \"large\" , \"pin\" : true, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"100\" } } } } , \"schema_id\" : \"Qmblahblablablahbnlajbnlajlk\" , \"initiator\" : \"P4blahblahblahblahbla\" , \"type\" : \"OPEN\" , \"sharing\" : \"SHARED\" , \"state\" : \"LOADED\" , \"peer_cnt\" : 1 , \"block_cnt\" : 1 , \"file_cnt\" : 0 }","title":"Overview"},{"location":"learn/threads/#threads","text":"TODO: Replace diagrams with xmind to match files diagrams, add top-level design constraints, roadmap Threads are built into the fabric of Textile as a way to allow group members to keep a record of who shared what data, and when. This simple concept is actually quite powerful \u2014 and on the surface, you can think of a Thread like a decentralized database, shared between specific participants. Threads are defined by schemas and contain blocks of information (or updates). They are specifically designed to work well in mobile, offline-first scenarios, where peers are constantly making updates, coming online, and going offline. This means avoiding state conflicts is a central focus of their operation. This issue comes up frequently when working collaboratively on documents, updating shared databases, etc.","title":"Threads"},{"location":"learn/threads/#conflict-avoidanceresolution","text":"For the purposes of updating a shared Thread of photos or similar data, it turns out that an operation-based CRDT that supports append-only operations is pretty much all you need to get going. You can think of Textile's Threads CRDT (which shares some ideas with ipfs-log ) setup as an immutable, append-only tree that can be used to model a mutable, shared state between peers. Every entry in the tree is saved on IPFS, and each points to a hash of previous entry(ies) forming a graph. These trees can be 3-way and fast-forward merged . For those familiar with git and other similar system, you might be thinking this sounds a lot like a git hash tree , Merkle DAG , or even a blockchain . And you\u2019d be right! The concepts are very similar, and this buys us some really nice properties for building and maintaining a shared state. By modeling our shared Thread state in this way, we benefit from tried and tested methods for allowing a peer to incorporate other peers' updates into their state while maintaining history (via fast-forwards and three-way merging for example). Each Thread is essentially a chain of updates, where each update represents some specific action or event (see [[Blocks|Blocks]] for details). For instance, when you create a new Thread, under-the-hood you are actually creating a JOIN update on a new Thread chain. Similarly, when you update the Thread via a new photo ( FILES update), or message ( MESSAGE update), you're actually updating that Thread chain. After each modification, the HEAD of the Thread will point to the latest update.","title":"Conflict Avoidance/Resolution"},{"location":"learn/threads/#example","text":"To give you a better idea of what exactly we're talking about, consider the following set of operations: User A creates a new Thread, and adds a Photo. They then externally invite User B (sent via some other secure communication channel), who eventually joins the Thread. But before User B is able to join the Thread, User A adds another Photo, moving the Thread\u2019s HEAD forward. By the time User B joins the Thread, they'd end up with a Thread sequence that looks something like this: Thread join example. Solid arrows point towards the 'parent' of a given update, over-the-wire communications are indicated with a \ud83d\udcf6-style arrow, and messages that are rebroadcast (e.g., via the welcome message) are indicated with a dashed arrow. Similarly, merges point to both their parent updates. Here, we see the merge happening at the end of the sequence because the bottom peer is joining via an external invite that is no longer HEAD , forcing them to merge the most recent DATA update with their own JOIN update. But since merge results are deterministic (given the same parents), both peers create the MERGE update locally, and do not broadcast them to avoid trading merges back and forth. A more complete sequence is given in the following figure. Suppose User A goes 'offline' (e.g., their phone goes to sleep, they shut down the app, they lose their data connection, etc), and in the mean time, both Users A and B update the Thread, with User A adding an ANNOTATION update, and User B adding a new Photo ( FILES update). Now, when User A comes back online, there is a conflict, and both Users create a MERGE update to remedy this. A MERGE update has two parents, in this case, the FILES and ANNOTATION update from the different users. As always, the HEAD continues to point to the latest update (which in the example below eventually becomes an ANNOTATION from User B). Once both peers are online again, the more straightforward update and transmit mode of operation can continue. More complex Thread interaction where one or more peers are temporarily offline. Note that an external invite is the same as a normal invite, but the invite details are encrypted with a single use key, which is sharable with the invite update location. The same properties that make hash trees or blockchains useful for developing a shared, consistent (consensus-driven) state, also makes it possible to recover the full state of a Thread from the network as a whole. Because each Thread update references its parent(s), given a single point on the Thread chain, we can trace back all the way to the beginning of the Thread. For example, at any point along the sequence in the above figures, a peer can trace back the history of the Thread, as indicated by the solid arrows. This works particularly nicely when a peer JOIN s a thread, even at a point prior to the current HEAD . They can simply JOIN , and any existing Thread member can send them the latest HEAD (even via offline messages if needed). From here, they can explore the entire history of the Thread with ease. This is all really similar to git commit speak, in which one only needs to know about a single commit to be able to trace back the entire history of a code project; it\u2019s also essentially how blockchains work.","title":"Example"},{"location":"learn/threads/#thread-types","text":"Currently, Textile supports four types of Threads, 'private', 'read_only', 'public', or 'open' to support different levels of Access Control . As you might have guessed, private Threads are only accessible via the account that created them, and may be used for internal or app-based applications such as tracking different account devices, or user -specific applications such as a private camera-roll. Similarly, read_only Threads are accessible to any peer that has been invited to the Thread, but only the initiator can actually modify the Thread in any way, whereas public Threads support annotations by non-initiators . These types of Threads are useful for public, one-way consumable feeds. Conversely, an open Thread is one in which any peer that has been invited to join the Thread can modify it, invite others, etc. These are the most common type of Thread. They can support things like multi-way chat, community-curated feeds, and are currently used in Textile Photos for private groups to share photos. In addition to Thread Types for Access Control, Textile supports Thread Sharing for Sharing Control. When configuring a Thread, a Type field specifies the Thread type as specified above ('private', 'read_only', 'public', or 'open'.), and a Sharing field specifies if sharing is allowed and by whom. Options include 'not-shared', 'invite-only', and 'shared'. For 'not-shared', the Thread is pinned to a given set of \"members\", whereas 'invite-only' means only the initiator can invite additional peers. The least restrictive option ('shared') means that any existing member of the Thread may share/invite the Thread with others. Finally, an additional Members field, can be used to control which peers are able to join a given Thread. If this field is left empty, then all peers are potential members, and invites are governed entirely by the Sharing field. If this field contains one or more peers, then only those peers are permitted to interact with the given Thread. It is important to note that an invite-only Thread with a fixed members list means that invites can only be sent to the member list by the initiator, whereas an invite-only Thread with an empty member list means that invites can be sent to anyone by the initiator. This is important because all members of a Thread should expect that the member list is either fixed or not. For example, imagine a 1-1 conversation where the other peer invites a stranger in. If you had joined with the notion that the initiator could invite others (not fixed member list) then you might expect that could happen and behave slightly differently? To help illustrate the restrictions these fields provide, here is a table to give a rough idea of the available options:","title":"Thread Types"},{"location":"learn/threads/#access-control-sharing-control","text":"Thread Type controls read (R), annotate (A), and write (W) access: private --> initiator: RAW, members: read-only --> initiator: RAW, members: R public --> initiator: RAW, members: RA open --> initiator: RAW, members: RAW Thread Sharing style controls if (Y/N) a thread can be shared: not-shared --> initiator: N, members: N invite-only --> initiator: Y, members: N shared --> initiator: Y, members: Y For example, a personal camera roll backup might be private and not-shared, whereas an open group (default in Textile Photos app) would be open and shared. Alternatively, you could support a 'closed' group by using an open, but invite-only Thread. With three 'knobs' to adjust, the combination of Thread types is quite extensive, and may facilitate new and interesting types of interactions. We do not pretend to have uses for all combinations, and some combinations may be redundant, or even contradicting in some cases (for example, an 'open', 'shared' Thread with a 'members' list of 1 is essentially just a private Thread, because membership trumps the other options).","title":"Access Control &amp; Sharing Control"},{"location":"learn/threads/#from-the-command-line","text":"From the command-line, Threads can be added, listed, accessed, removed, and their members can be queried. See textile theads --help for details. The most basic operation, adding a new Thread, takes multiple (mostly optional) inputs, and produces a new, empty Thread. Inputs can include a key , which is a locally unique key used by an app to identify this thread on recovery, a type , which sets the thread type as discussed above, a sharing option, which controls the sharing control as discussed above, and a member option to control Thread membership. This one can be used multiple times to include multiple peers, or left blank to include any/all peers. The additional options, schema , media , and camera-roll are used to control the [[Schema|Schemas]] used for the Thread, and are discussed elsewhere. $ textile threads add --type 'open' --sharing 'shared' --media \"My Open+Shared+Media Thread\" { \"id\" : \"blahblahblahblahblahblahblahblah\" , \"key\" : \"somelongalphanumerickey\" , \"name\" : \"My Open+Shared+Media Thread\" , \"schema\" : { \"name\" : \"media\" , \"pin\" : true, \"plaintext\" : false, \"links\" : { \"large\" : { \"use\" : \":file\" , \"pin\" : false, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"800\" } } , \"small\" : { \"use\" : \":file\" , \"pin\" : false, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"320\" } } , \"thumb\" : { \"use\" : \"large\" , \"pin\" : true, \"plaintext\" : false, \"mill\" : \"/image/resize\" , \"opts\" : { \"quality\" : \"80\" , \"width\" : \"100\" } } } } , \"schema_id\" : \"Qmblahblablablahbnlajbnlajlk\" , \"initiator\" : \"P4blahblahblahblahbla\" , \"type\" : \"OPEN\" , \"sharing\" : \"SHARED\" , \"state\" : \"LOADED\" , \"peer_cnt\" : 1 , \"block_cnt\" : 1 , \"file_cnt\" : 0 }","title":"From the Command-line"},{"location":"learn/threads/blocks/","text":"Blocks \u00b6 TODO: Break out types into link-able sections, expand Blocks are the literal building blocks of Textile's [[Threads|Threads]] infrastructure. They are the basic components for all interactions between Textile peers, from messaging, to sharing photos, to commenting and 'likeing' content\u2014each update to a Thread is backed by a Block, and each Block is hash-linked to its parent, forming a traversable tree or chain of block updates\u2014a blockchain if you will. Structure \u00b6 In practice, Textile Blocks are relatively small (encrypted) Protobuf messages , linked together by their IPFS CID (content id or hash). You can explore their proto definitions in our GitHub repo . Essentially, a ThreadBlock (or Block for short) is made up of a BlockHeader , a Type , and an optional Payload . The BlockHeader contains information such as the event timestamp ( Date ), an array of Parent Blocks (this is usually an array of length one), the original Block Author (Peer Id), and an Address , which is the [[Account address|Wallet#Accounts]] of the Block's original author. The Type field represents the kind of update the block represents and can be one of the eleven block types outline in the table below. After the header and type comes the block's Payload . For some block types, this can be left null or empty. For example, Merge blocks are only ever generated locally, and so do not need to contain a payload (additionally, these can be stored as plaintext, as they carry no identifiable information). Similarly, a Leave block requires no payload information, just the header and type. Conversely, mostly other block types require at least a Target field (the target block to which that update refers), and often also requires a Contact and/or Body field. Contacts are used to represent another Peer (say for an Invite block) and Body is generally used for textual information (say the body of a Comment block). The most complex block type is a Files block. In this case, the 'target' is actually the top-level CID/hash of a directory (DAG Node) that contains one or more outputs from a [[Schema|Schemas]], and the block update itself includes the keys required to decrypt the ciphertext. See [[Files|Files]] for details on the structure of the Files objects. Types \u00b6 Textile Threads support eleven different Block Types . Each type describes a specific event or update to a Thread. From the most basic events such as a Thread Join or Leave , to more complex interactions such as a Comment or Like of a previous block update (such as a Files block). Type Description Merge Used for conflict resolution, and always has two parents. See Threads for details. Ignore Used to 'delete' or otherwise request that peers ignore or remove a previous Block from the Thread (currently not used in Textile Photos) Flag Used to 'highlight' a given previous Block. It is currently not used in Textile Photos, but could be used by an application developer to 'star' an item, flag it as inappropriate, or even mark it for removal or some other 'state'. Join Used when a peer joins a Thread. Leave Used when a peer leaves a Thread. Leaves have no payload. Announce Used to announce information to all members of a Thread, such as when a user updates their avatar, or changes their username. Message Represents and 'standalone' message or piece of text. This might be a message in a chat application, or a specific text-based update. Files Used to add data to a Thread. In Textile Photos, this is generally a new Photo. However, and File object can be used. See Files for details. Comment Used to annotate a previous block with textual information. This is commonly used to allow peers to 'comment' on a given Photo or post. Any other type of Block could be a target for a Comment Block (including another Comment block). Like Used to annotate a previous block with a 'like' flag. This is commonly used to allow peers to 'like' a given Photo or post. Any other type of Block could be a target for a Like Block (including another Like block). Invite Used to indicate an invite to the Thread has been created. The type of invite will depend on how it was created, and could be a 'direct' or 'open' invite.","title":"Blocks"},{"location":"learn/threads/blocks/#blocks","text":"TODO: Break out types into link-able sections, expand Blocks are the literal building blocks of Textile's [[Threads|Threads]] infrastructure. They are the basic components for all interactions between Textile peers, from messaging, to sharing photos, to commenting and 'likeing' content\u2014each update to a Thread is backed by a Block, and each Block is hash-linked to its parent, forming a traversable tree or chain of block updates\u2014a blockchain if you will.","title":"Blocks"},{"location":"learn/threads/blocks/#structure","text":"In practice, Textile Blocks are relatively small (encrypted) Protobuf messages , linked together by their IPFS CID (content id or hash). You can explore their proto definitions in our GitHub repo . Essentially, a ThreadBlock (or Block for short) is made up of a BlockHeader , a Type , and an optional Payload . The BlockHeader contains information such as the event timestamp ( Date ), an array of Parent Blocks (this is usually an array of length one), the original Block Author (Peer Id), and an Address , which is the [[Account address|Wallet#Accounts]] of the Block's original author. The Type field represents the kind of update the block represents and can be one of the eleven block types outline in the table below. After the header and type comes the block's Payload . For some block types, this can be left null or empty. For example, Merge blocks are only ever generated locally, and so do not need to contain a payload (additionally, these can be stored as plaintext, as they carry no identifiable information). Similarly, a Leave block requires no payload information, just the header and type. Conversely, mostly other block types require at least a Target field (the target block to which that update refers), and often also requires a Contact and/or Body field. Contacts are used to represent another Peer (say for an Invite block) and Body is generally used for textual information (say the body of a Comment block). The most complex block type is a Files block. In this case, the 'target' is actually the top-level CID/hash of a directory (DAG Node) that contains one or more outputs from a [[Schema|Schemas]], and the block update itself includes the keys required to decrypt the ciphertext. See [[Files|Files]] for details on the structure of the Files objects.","title":"Structure"},{"location":"learn/threads/blocks/#types","text":"Textile Threads support eleven different Block Types . Each type describes a specific event or update to a Thread. From the most basic events such as a Thread Join or Leave , to more complex interactions such as a Comment or Like of a previous block update (such as a Files block). Type Description Merge Used for conflict resolution, and always has two parents. See Threads for details. Ignore Used to 'delete' or otherwise request that peers ignore or remove a previous Block from the Thread (currently not used in Textile Photos) Flag Used to 'highlight' a given previous Block. It is currently not used in Textile Photos, but could be used by an application developer to 'star' an item, flag it as inappropriate, or even mark it for removal or some other 'state'. Join Used when a peer joins a Thread. Leave Used when a peer leaves a Thread. Leaves have no payload. Announce Used to announce information to all members of a Thread, such as when a user updates their avatar, or changes their username. Message Represents and 'standalone' message or piece of text. This might be a message in a chat application, or a specific text-based update. Files Used to add data to a Thread. In Textile Photos, this is generally a new Photo. However, and File object can be used. See Files for details. Comment Used to annotate a previous block with textual information. This is commonly used to allow peers to 'comment' on a given Photo or post. Any other type of Block could be a target for a Comment Block (including another Comment block). Like Used to annotate a previous block with a 'like' flag. This is commonly used to allow peers to 'like' a given Photo or post. Any other type of Block could be a target for a Like Block (including another Like block). Invite Used to indicate an invite to the Thread has been created. The type of invite will depend on how it was created, and could be a 'direct' or 'open' invite.","title":"Types"},{"location":"learn/threads/messages/","text":"Messages \u00b6 TODO: Expand, cleanup In addition to [[Files|Files]] and the various [[Thread|Threads]] annotation [[Blocks|Blocks]], Textile supports adding arbitrary textual messages to Threads. These Messages are a specify type of Block update, and are not required to meet [[Schema|Schemas]] requirements. This means it is possible to mix content types in a Textile Thread, thereby facilitating complex 'conversations' between interacting peers. With this mix of thread Block Types, it is possible to post a Photo, comment and like a photo, and have an unstructured conversation related to the photo topic. This could facilitate new forms of Thread-based interactions, a prospect Textile is currently exploring. You can play around with Textile Messages already using the [[Command-Line|Command-Line]] tooling provided with Textile. To start a chat conversation, simply create a new (maybe make it 'open') Thread via textile threads add , send a Thread invite to your peer via textile invites create , and then start up the textile chat sub-command. The workflow to get this working looks something like this: textile daemon Then in a separate terminal: textile threads add -t open -s invite_only -m <peer-account-address> \"Open Chat\" textile invites create -t <new-thread-id> -p <peer-account-address> textile chat -t <new-thread-id> Then have your peer start their daemon and then: textile invites accept <invite-id> textile chat -t <new-thread-id> and start chatting!","title":"Messages"},{"location":"learn/threads/messages/#messages","text":"TODO: Expand, cleanup In addition to [[Files|Files]] and the various [[Thread|Threads]] annotation [[Blocks|Blocks]], Textile supports adding arbitrary textual messages to Threads. These Messages are a specify type of Block update, and are not required to meet [[Schema|Schemas]] requirements. This means it is possible to mix content types in a Textile Thread, thereby facilitating complex 'conversations' between interacting peers. With this mix of thread Block Types, it is possible to post a Photo, comment and like a photo, and have an unstructured conversation related to the photo topic. This could facilitate new forms of Thread-based interactions, a prospect Textile is currently exploring. You can play around with Textile Messages already using the [[Command-Line|Command-Line]] tooling provided with Textile. To start a chat conversation, simply create a new (maybe make it 'open') Thread via textile threads add , send a Thread invite to your peer via textile invites create , and then start up the textile chat sub-command. The workflow to get this working looks something like this: textile daemon Then in a separate terminal: textile threads add -t open -s invite_only -m <peer-account-address> \"Open Chat\" textile invites create -t <new-thread-id> -p <peer-account-address> textile chat -t <new-thread-id> Then have your peer start their daemon and then: textile invites accept <invite-id> textile chat -t <new-thread-id> and start chatting!","title":"Messages"},{"location":"learn/threads/files/","text":"Files \u00b6 In addition to messages and the various thread annotation blocks , Textile supports adding arbitrary files/data to threads via the Files block. Additionally, input data can be transformed (or milled in Textile speak) and validated in order to provide programmable structure to your thread data. Currently, the following input types are available: Raw data blobs, images, exif data, and JSON documents. Thread data is built into an IPLD merkle DAG structure (similar to a merkle tree ) and stored separately from the block on IPFS. A Files block points to it's \"data DAG\"'s top-level hash. The structure of the data DAG is determined by, and validated against, a DAG [[schema|Schemas]]. A thread can have only one schema . It has two main functions: Define a Thread's data DAG structure Define the order of mills (transforms) needed to produce this structure from the input To illustrate these functions, take a look at the builtin media schema. Each link ( large , small , thumb ) produces a resized and encrypted image by leveraging the image/resize mill. Notice that the thumb link uses the large as input. This means that large will need to milled before thumb . Once you understand how schemas and mills work, you can design complex workflows and structures for your applications. In addition to the transformed bytes, a mill will produce a file index object for every input: message FileIndex { string mill = 1; // Mill used to process the file (e.g., `/image/resize`, `/json`) string checksum = 2; // Pre-milled (md5) checksum of the input file string source = 3; // Source file CID string opts = 4; // md5 checksum of input mill options string hash = 5; // CID hash of milled file string key = 6; // AES encryption key string media = 7; // Media type (e.g., `'application/json'`, `'image/jpeg'`) string name = 8; // Name of the input file int64 size = 9; // Size of the milled file in bytes google.protobuf.Timestamp added = 10; // Date the file was added to the thread google.protobuf.Struct meta = 11; // Additional metadata repeated string targets = 12; // DAG targets the file belongs to (kept only by the local peer) } File indexes are what most applications will interact with. They are the objects listed by the Files and Feed APIs. These objects are also used internally for various functions. For example, because good encryption is not deterministic, an input's checksum is used to de-duplicate encrypted data. At this point, it should be clear that adding data to a thread results in a DAG defined by a schema. But how exactly is the data stored so as to be programmatically accessible to thread consumers? Let's take a closer look at the DAG produced by the builtin media schema... Note that a files target is by default a directory of indexes ( 0 , 1 , etc.). This mean that you can add an entire folder of images (or whatever your data is) with a single update. Also, each link ( large , small , etc.) will always have the special f and d sub-links, which correspond to the (usually encrypted) file index and raw data. Below is a JSON representation of file indexes from a single image corresponding to say, file 0 above. { \"links\": { \"large\": { \"mill\": \"/image/resize\", \"checksum\": \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\", \"source\": \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\", \"opts\": \"21uBAuSeQUdw5aDu5CYPxEfeiLVeuvku1T26nWtJC84C\", \"hash\": \"QmcvoHe333KRf3tfNKrtrM7aMUVnrB4b1JyzhSFybepvqQ\", \"key\": \"6cCnusZVHwp6udnKv3eYhurHK6ArJyFxCYRWTUFG8ZuMwSDwVbis9FUX3GRs\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"84222\", \"added\": \"2019-03-17T01:20:17.061749Z\", \"meta\": { \"height\": 600, \"width\": 800 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"small\": { \"mill\": \"/image/resize\", \"checksum\": \"7Gu5s6sZkwU8UQWwJNnJSrVY75ZkQG4bpQSwQPwkk8aX\", \"source\": \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\", \"opts\": \"CassDcqf192MnceweJKGJvhZfrV9kB3GJRbvNPWm6raa\", \"hash\": \"QmZuD522rQiFE2GdbNXvzcQ3Ci6aLvvJtWz52a97iEDy9G\", \"key\": \"29ce4pg64Lj78GuTauQDxeqpfdNCF7fNsJauS552wfpkEjegq8kQgwiNAzJQZ\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"18145\", \"added\": \"2019-03-17T01:20:14.739531Z\", \"meta\": { \"height\": 240, \"width\": 320 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"thumb\": { \"mill\": \"/image/resize\", \"checksum\": \"GzB1CWKkKQ5sWS8qQXDoBZxsfFgsgZwD9Z51qX5d7LGW\", \"source\": \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\", \"opts\": \"7aGVJ7nGgmHdqv8oiEKZ2ZbrNBv1zVP3ADSuT2sW3MwT\", \"hash\": \"QmUuXPhrtLJUzfuoJu7BkfiB2mGfKwq4ExTTF8gVUvAh2U\", \"key\": \"KfW8nTEZqh1NbAcmB51DMaooe34ujucx2DMqBwiz4xs9sDVhNDYNPratgtbf\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"2979\", \"added\": \"2019-03-17T01:20:17.133863Z\", \"meta\": { \"height\": 75, \"width\": 100 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] } } }","title":"Overview"},{"location":"learn/threads/files/#files","text":"In addition to messages and the various thread annotation blocks , Textile supports adding arbitrary files/data to threads via the Files block. Additionally, input data can be transformed (or milled in Textile speak) and validated in order to provide programmable structure to your thread data. Currently, the following input types are available: Raw data blobs, images, exif data, and JSON documents. Thread data is built into an IPLD merkle DAG structure (similar to a merkle tree ) and stored separately from the block on IPFS. A Files block points to it's \"data DAG\"'s top-level hash. The structure of the data DAG is determined by, and validated against, a DAG [[schema|Schemas]]. A thread can have only one schema . It has two main functions: Define a Thread's data DAG structure Define the order of mills (transforms) needed to produce this structure from the input To illustrate these functions, take a look at the builtin media schema. Each link ( large , small , thumb ) produces a resized and encrypted image by leveraging the image/resize mill. Notice that the thumb link uses the large as input. This means that large will need to milled before thumb . Once you understand how schemas and mills work, you can design complex workflows and structures for your applications. In addition to the transformed bytes, a mill will produce a file index object for every input: message FileIndex { string mill = 1; // Mill used to process the file (e.g., `/image/resize`, `/json`) string checksum = 2; // Pre-milled (md5) checksum of the input file string source = 3; // Source file CID string opts = 4; // md5 checksum of input mill options string hash = 5; // CID hash of milled file string key = 6; // AES encryption key string media = 7; // Media type (e.g., `'application/json'`, `'image/jpeg'`) string name = 8; // Name of the input file int64 size = 9; // Size of the milled file in bytes google.protobuf.Timestamp added = 10; // Date the file was added to the thread google.protobuf.Struct meta = 11; // Additional metadata repeated string targets = 12; // DAG targets the file belongs to (kept only by the local peer) } File indexes are what most applications will interact with. They are the objects listed by the Files and Feed APIs. These objects are also used internally for various functions. For example, because good encryption is not deterministic, an input's checksum is used to de-duplicate encrypted data. At this point, it should be clear that adding data to a thread results in a DAG defined by a schema. But how exactly is the data stored so as to be programmatically accessible to thread consumers? Let's take a closer look at the DAG produced by the builtin media schema... Note that a files target is by default a directory of indexes ( 0 , 1 , etc.). This mean that you can add an entire folder of images (or whatever your data is) with a single update. Also, each link ( large , small , etc.) will always have the special f and d sub-links, which correspond to the (usually encrypted) file index and raw data. Below is a JSON representation of file indexes from a single image corresponding to say, file 0 above. { \"links\": { \"large\": { \"mill\": \"/image/resize\", \"checksum\": \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\", \"source\": \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\", \"opts\": \"21uBAuSeQUdw5aDu5CYPxEfeiLVeuvku1T26nWtJC84C\", \"hash\": \"QmcvoHe333KRf3tfNKrtrM7aMUVnrB4b1JyzhSFybepvqQ\", \"key\": \"6cCnusZVHwp6udnKv3eYhurHK6ArJyFxCYRWTUFG8ZuMwSDwVbis9FUX3GRs\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"84222\", \"added\": \"2019-03-17T01:20:17.061749Z\", \"meta\": { \"height\": 600, \"width\": 800 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"small\": { \"mill\": \"/image/resize\", \"checksum\": \"7Gu5s6sZkwU8UQWwJNnJSrVY75ZkQG4bpQSwQPwkk8aX\", \"source\": \"D4QdxGCAFnGwCHAQxrros1V6zEf78N4ugK3GwZyT5dTJ\", \"opts\": \"CassDcqf192MnceweJKGJvhZfrV9kB3GJRbvNPWm6raa\", \"hash\": \"QmZuD522rQiFE2GdbNXvzcQ3Ci6aLvvJtWz52a97iEDy9G\", \"key\": \"29ce4pg64Lj78GuTauQDxeqpfdNCF7fNsJauS552wfpkEjegq8kQgwiNAzJQZ\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"18145\", \"added\": \"2019-03-17T01:20:14.739531Z\", \"meta\": { \"height\": 240, \"width\": 320 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] }, \"thumb\": { \"mill\": \"/image/resize\", \"checksum\": \"GzB1CWKkKQ5sWS8qQXDoBZxsfFgsgZwD9Z51qX5d7LGW\", \"source\": \"EqkWwbMQoSosYnu85XHpdTsM3NDKTRPk5j4RQjN6c4FZ\", \"opts\": \"7aGVJ7nGgmHdqv8oiEKZ2ZbrNBv1zVP3ADSuT2sW3MwT\", \"hash\": \"QmUuXPhrtLJUzfuoJu7BkfiB2mGfKwq4ExTTF8gVUvAh2U\", \"key\": \"KfW8nTEZqh1NbAcmB51DMaooe34ujucx2DMqBwiz4xs9sDVhNDYNPratgtbf\", \"media\": \"image/jpeg\", \"name\": \"clyde.jpg\", \"size\": \"2979\", \"added\": \"2019-03-17T01:20:17.133863Z\", \"meta\": { \"height\": 75, \"width\": 100 }, \"targets\": [ \"QmPngweFQ9VUhjtyy8nfJRZ8us9UFbS6Y2trwmAswfJ2yk\" ] } } }","title":"Files"},{"location":"learn/threads/files/mills/","text":"Mills \u00b6 TODO: Make endpoints link-able sections, expand, cleanup In order to fulfill a Textile Schema, input data will likely have to be processed by a Mill . A Textile Mill is simply an interface that provides a unique endpoint id, whether it supports encryption (most do/should), whether it will 'pin' its outputs by default, and the type of 'media' that it supports. For things like image processing mills (resize, extract EXIF) this would be \"image/*\" mime-types, whereas for a generic 'blob' type Mill, this might be nil (accepts anything). Additionally, a Mill will have a specific set of options that it supports, and of course, implement the actual function that performs the 'milling' or processing. This should take in 'raw' bytes, and return a Result object, which is simply a wrapper around a file byte array and its metadata (see below). Depending on how the Schema is structured, Mills may be combined, run in series (i.e., one run on the output of a another) or parallel, etc. It is generally up to the client to satisfy the Schema via the requested Mills. For developers, adding new Mills is relatively straightforward, and only requires that they satisfy the specified Iinterface. This makes Schemas and Mills extremely powerful and flexible. For instance, Textile supports a generic JSON Mill, which is not currently used in Textile Photos, but provides a useful example for extending Textile with new Mills. Mill Interface \u00b6 type Mill interface { ID() string Encrypt() bool Pin() bool AcceptMedia(media string) error Options(add map[string]interface{}) (string, error) Mill(input []byte, name string) (*Result, error) } Results Object \u00b6 type Result struct { File []byte Meta map[string]interface{} } Endpoints \u00b6 Currently, Textile supports five Mill 'endpoints' or methods: * blob : Takes a binary data blob, and optionally encrypts it, before adding to IPFS, and returns a file object * schema : Takes a JSON-based Schema, validates it, adds it to IPFS, and returns a file object * json : Takes an input JSON document, validates it according to its schema.org definition, optionally encrypts the output before adding to IPFS, and returns a file object * image/resize : Takes an input image, and resizes/resamples it (optionally encrypting output), before adding to IPFS, and returns a file object * image/exif : Takes an input image, and extracts its EXIF data (optionally encrypting output), before adding to IPFS, and returns a file object See [[REST-API]] wiki entry for additional details and API parameters. It is also relatively easy to add new Mill endpoints. If you'd like to contribute new endpoints, or require a specific endpoint for your application or idea, please get in touch!","title":"Mills"},{"location":"learn/threads/files/mills/#mills","text":"TODO: Make endpoints link-able sections, expand, cleanup In order to fulfill a Textile Schema, input data will likely have to be processed by a Mill . A Textile Mill is simply an interface that provides a unique endpoint id, whether it supports encryption (most do/should), whether it will 'pin' its outputs by default, and the type of 'media' that it supports. For things like image processing mills (resize, extract EXIF) this would be \"image/*\" mime-types, whereas for a generic 'blob' type Mill, this might be nil (accepts anything). Additionally, a Mill will have a specific set of options that it supports, and of course, implement the actual function that performs the 'milling' or processing. This should take in 'raw' bytes, and return a Result object, which is simply a wrapper around a file byte array and its metadata (see below). Depending on how the Schema is structured, Mills may be combined, run in series (i.e., one run on the output of a another) or parallel, etc. It is generally up to the client to satisfy the Schema via the requested Mills. For developers, adding new Mills is relatively straightforward, and only requires that they satisfy the specified Iinterface. This makes Schemas and Mills extremely powerful and flexible. For instance, Textile supports a generic JSON Mill, which is not currently used in Textile Photos, but provides a useful example for extending Textile with new Mills.","title":"Mills"},{"location":"learn/threads/files/mills/#mill-interface","text":"type Mill interface { ID() string Encrypt() bool Pin() bool AcceptMedia(media string) error Options(add map[string]interface{}) (string, error) Mill(input []byte, name string) (*Result, error) }","title":"Mill Interface"},{"location":"learn/threads/files/mills/#results-object","text":"type Result struct { File []byte Meta map[string]interface{} }","title":"Results Object"},{"location":"learn/threads/files/mills/#endpoints","text":"Currently, Textile supports five Mill 'endpoints' or methods: * blob : Takes a binary data blob, and optionally encrypts it, before adding to IPFS, and returns a file object * schema : Takes a JSON-based Schema, validates it, adds it to IPFS, and returns a file object * json : Takes an input JSON document, validates it according to its schema.org definition, optionally encrypts the output before adding to IPFS, and returns a file object * image/resize : Takes an input image, and resizes/resamples it (optionally encrypting output), before adding to IPFS, and returns a file object * image/exif : Takes an input image, and extracts its EXIF data (optionally encrypting output), before adding to IPFS, and returns a file object See [[REST-API]] wiki entry for additional details and API parameters. It is also relatively easy to add new Mill endpoints. If you'd like to contribute new endpoints, or require a specific endpoint for your application or idea, please get in touch!","title":"Endpoints"},{"location":"learn/threads/files/schemas/","text":"Schemas \u00b6 TODO: Expand, cleanup Another more component of the Textile system is the concept of Schemas. Schemas are used to define how data is processed and its storage structure. You can think of Textile Schemas as something akin to Transloadit Robots . Essentially, Textile uses these well-defined Schemas to describe what the Textile Peer should do with incoming Files. For example, the [[default Schema|Default-Schemas]] used in Textile Photos defines how images should be transformed and shared over IPFS. When developing with Textile, developers can define or reuse any number of custom schemas. Schemas describe how a File or image is processed as a series of 'steps'. Using the default Textile [[camera roll schema|Default-Schemas#camera-roll]] as an example, it tells the Textile Peer to resample and encrypt an image to thumb nail size, extract and encrypt the exif data into a JSON document using the raw input image, encrypt the raw image data (blob), and then store ( pin : true ) all of these output files on IPFS in a single 'folder' or DAG structure. It is possible to specify highly complex file/object structures in this way, with dependencies between Schema Nodes (a Node describes a DAG node) and Links (a Link is a sub-node which can \"use\" input from other sub-nodes). The Textile Peer will automatically sort this 'graph' of dependencies (using topological sorting ) and process the Mill steps in the correct order. Each Node or Link contains keys controlling whether its output (or child outputs) should be pinned, encrypted, and how it should be milled (Mill function and Options). message Node { string name = 1; bool pin = 2; bool plaintext = 3; string mill = 4; map<string, string> opts = 5; google.protobuf.Struct json_schema = 6; map<string, Link> links = 8; } message Link { string use = 1; bool pin = 2; bool plaintext = 3; string mill = 4; map<string, string> opts = 5; google.protobuf.Struct json_schema = 6; } Presets \u00b6 Textile includes several schema \"presets\". These are used in the Textile Photos app, but also provide useful examples of real-world schema use. These are listed below, along with some examples of JSON-type schemas for reference/demo purposes. Media \u00b6 Used for media posting and sharing { \"name\": \"media\", \"pin\": true, \"links\": { \"large\": { \"use\": \":file\", \"mill\": \"/image/resize\", \"opts\": { \"width\": \"800\", \"quality\": \"80\" } }, \"small\": { \"use\": \":file\", \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"80\" } }, \"thumb\": { \"use\": \"large\", \"pin\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"100\", \"quality\": \"80\" } } } } Camera Roll \u00b6 Used for backing up a user's mobile phone camera roll { \"name\": \"camera_roll\", \"pin\": true, \"links\": { \"raw\": { \"use\": \":file\", \"mill\": \"/blob\" }, \"exif\": { \"use\": \"raw\", \"mill\": \"/image/exif\" }, \"thumb\": { \"use\": \"raw\", \"pin\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"80\" } } } } Avatars \u00b6 Used for creating and storing a user's avatar image { \"name\": \"avatar\", \"pin\": true, \"links\": { \"large\": { \"use\": \":file\", \"pin\": true, \"plaintext\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"75\" } }, \"small\": { \"use\": \":file\", \"pin\": true, \"plaintext\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"100\", \"quality\": \"75\" } } } } JSON-based \u00b6 It is also possible to create a new Schema that supports JSON data. This is pretty simple to setup, requiring only that we use the pre-existing /json Mill, and a few other minor keys for controlling pinning, encryption (we'll keep things in plaintext for now), and the json_schema definition. As always, Schemas start with a few basic keys: { \"pin\": true, \"plaintext\": true, \"mill\": \"/json\", \"json_schema\": ... } Unlike in the above examples however, notice the (currently empty) json_schema entry. This is where/how we define the actual expected JSON structure for our Schema. It is based on the JSON Schema vocabulary for annotating and validating JSON documents. So, our Textile Schema will actually contain the JSON schema that we can use to validate the input JSON data before processing it via Mill(s). This is really nice, because it ensures that Textile's Thread data stays structured, making it easier for application developers to trust that the data added to a Thread conforms to their expected data model. Examples \u00b6 For example, a very simple 'person' Schema would look something like this: { \"pin\": true, \"mill\": \"/json\", \"json_schema\": { \"$id\": \"https://example.com/person.schema.json\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"title\": \"Person\", \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"description\": \"The person's first name.\" }, \"lastName\": { \"type\": \"string\", \"description\": \"The person's last name.\" }, \"age\": { \"description\": \"Age in years which must be equal to or greater than zero.\", \"type\": \"integer\", \"minimum\": 0 } } } } A slightly more advanced example might be for adding basic log data as specified in the BSD syslog Protocol to a Thead, the whole Textile Schema would look something like this: { \"pin\": true, \"plaintext\": false, \"mill\": \"/json\", \"json_schema\": { \"$ref\": \"#/definitions/Log\", \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"definitions\": { \"Log\": { \"additionalProperties\": false, \"properties\": { \"application\": { \"type\": \"string\" }, \"hostname\": { \"type\": \"string\" }, \"message\": { \"type\": \"string\" }, \"pid\": { \"type\": \"integer\" }, \"priority\": { \"type\": \"integer\" }, \"timestamp\": { \"type\": \"string\" } }, \"required\": [ \"priority\", \"timestamp\", \"hostname\", \"application\", \"pid\", \"message\" ], \"type\": \"object\" } } } } Alternatively, if a developer wanted to send document updates via a Thread, they'd need a JSON Schema that supports modifying JSON documents. The JSON Patch specification, as outline in RFC 6902 , is one such specification: \"JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document...\" You can obtain a JSON Schema representation of the JSON Patch spec from the JSON schema 'store' . Combining the JSON Patch schema.org spec with a Textile Schema spec gives: { \"pin\": true, \"plaintext\": true, \"mill\": \"/json\", \"json_schema\": { \"title\": \"JSON schema for JSONPatch files\", \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"array\", \"items\": { \"$ref\": \"#/definitions/operation\" }, \"definitions\": { \"operation\": { \"type\": \"object\", \"required\": [ \"op\", \"path\" ], \"allOf\": [ { \"$ref\": \"#/definitions/path\" } ], \"oneOf\": [ { \"required\": [ \"value\" ], \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"add\", \"replace\", \"test\" ] }, \"value\": { \"description\": \"The value to add, replace or test.\" } } }, { \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"remove\" ] } } }, { \"required\": [ \"from\" ], \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"move\", \"copy\" ] }, \"from\": { \"description\": \"A JSON Pointer path pointing to the location to move/copy from.\", \"type\": \"string\" } } } ] }, \"path\": { \"properties\": { \"path\": { \"description\": \"A JSON Pointer path.\", \"type\": \"string\" } } } } } } You can imagine even more complex scenarios, including a stream of forecasts from Dark Sky weather data : { \"pin\": true, \"mill\": \"/json\", \"json_schema\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Forecast\", \"definitions\": { \"Alert\": { \"required\": [ \"description\", \"expires\", \"time\", \"title\", \"uri\" ], \"properties\": { \"description\": { \"type\": \"string\" }, \"expires\": { \"type\": \"integer\" }, \"time\": { \"type\": \"integer\" }, \"title\": { \"type\": \"string\" }, \"uri\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Flags\": { \"required\": [ \"units\" ], \"properties\": { \"units\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Forecast\": { \"required\": [ \"currently\", \"code\", \"flags\", \"latitude\", \"longitude\", \"offset\", \"timezone\" ], \"properties\": { \"alerts\": { \"items\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Alert\" }, \"type\": \"array\" }, \"code\": { \"type\": \"integer\" }, \"currently\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Weather\" }, \"error\": { \"type\": \"string\" }, \"flags\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Flags\" }, \"latitude\": { \"type\": \"number\" }, \"longitude\": { \"type\": \"number\" }, \"offset\": { \"type\": \"number\" }, \"timezone\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Weather\": { \"required\": [ \"apparentTemperature\", \"apparentTemperatureMax\", \"apparentTemperatureMaxTime\", \"apparentTemperatureMin\", \"apparentTemperatureMinTime\", \"cloudCover\", \"dewPoint\", \"humidity\", \"icon\", \"nearestStormDistance\", \"nearestStormBearing\", \"ozone\", \"precipIntensity\", \"precipIntensityMax\", \"precipIntensityMaxTime\", \"precipProbability\", \"precipType\", \"pressure\", \"summary\", \"sunriseTime\", \"sunsetTime\", \"temperature\", \"temperatureMax\", \"temperatureMaxTime\", \"temperatureMin\", \"temperatureMinTime\", \"time\", \"visibility\", \"windBearing\", \"windSpeed\" ], \"properties\": { \"apparentTemperature\": { \"type\": \"number\" }, \"apparentTemperatureMax\": { \"type\": \"number\" }, \"apparentTemperatureMaxTime\": { \"type\": \"integer\" }, \"apparentTemperatureMin\": { \"type\": \"number\" }, \"apparentTemperatureMinTime\": { \"type\": \"integer\" }, \"cloudCover\": { \"type\": \"number\" }, \"dewPoint\": { \"type\": \"number\" }, \"humidity\": { \"type\": \"number\" }, \"icon\": { \"type\": \"string\" }, \"nearestStormBearing\": { \"type\": \"number\" }, \"nearestStormDistance\": { \"type\": \"number\" }, \"ozone\": { \"type\": \"number\" }, \"precipIntensity\": { \"type\": \"number\" }, \"precipIntensityMax\": { \"type\": \"number\" }, \"precipIntensityMaxTime\": { \"type\": \"integer\" }, \"precipProbability\": { \"type\": \"number\" }, \"precipType\": { \"type\": \"string\" }, \"pressure\": { \"type\": \"number\" }, \"summary\": { \"type\": \"string\" }, \"sunriseTime\": { \"type\": \"integer\" }, \"sunsetTime\": { \"type\": \"integer\" }, \"temperature\": { \"type\": \"number\" }, \"temperatureMax\": { \"type\": \"number\" }, \"temperatureMaxTime\": { \"type\": \"integer\" }, \"temperatureMin\": { \"type\": \"number\" }, \"temperatureMinTime\": { \"type\": \"integer\" }, \"time\": { \"type\": \"integer\" }, \"visibility\": { \"type\": \"number\" }, \"windBearing\": { \"type\": \"number\" }, \"windSpeed\": { \"type\": \"number\" } }, \"additionalProperties\": false, \"type\": \"object\" } } } }","title":"Schemas"},{"location":"learn/threads/files/schemas/#schemas","text":"TODO: Expand, cleanup Another more component of the Textile system is the concept of Schemas. Schemas are used to define how data is processed and its storage structure. You can think of Textile Schemas as something akin to Transloadit Robots . Essentially, Textile uses these well-defined Schemas to describe what the Textile Peer should do with incoming Files. For example, the [[default Schema|Default-Schemas]] used in Textile Photos defines how images should be transformed and shared over IPFS. When developing with Textile, developers can define or reuse any number of custom schemas. Schemas describe how a File or image is processed as a series of 'steps'. Using the default Textile [[camera roll schema|Default-Schemas#camera-roll]] as an example, it tells the Textile Peer to resample and encrypt an image to thumb nail size, extract and encrypt the exif data into a JSON document using the raw input image, encrypt the raw image data (blob), and then store ( pin : true ) all of these output files on IPFS in a single 'folder' or DAG structure. It is possible to specify highly complex file/object structures in this way, with dependencies between Schema Nodes (a Node describes a DAG node) and Links (a Link is a sub-node which can \"use\" input from other sub-nodes). The Textile Peer will automatically sort this 'graph' of dependencies (using topological sorting ) and process the Mill steps in the correct order. Each Node or Link contains keys controlling whether its output (or child outputs) should be pinned, encrypted, and how it should be milled (Mill function and Options). message Node { string name = 1; bool pin = 2; bool plaintext = 3; string mill = 4; map<string, string> opts = 5; google.protobuf.Struct json_schema = 6; map<string, Link> links = 8; } message Link { string use = 1; bool pin = 2; bool plaintext = 3; string mill = 4; map<string, string> opts = 5; google.protobuf.Struct json_schema = 6; }","title":"Schemas"},{"location":"learn/threads/files/schemas/#presets","text":"Textile includes several schema \"presets\". These are used in the Textile Photos app, but also provide useful examples of real-world schema use. These are listed below, along with some examples of JSON-type schemas for reference/demo purposes.","title":"Presets"},{"location":"learn/threads/files/schemas/#media","text":"Used for media posting and sharing { \"name\": \"media\", \"pin\": true, \"links\": { \"large\": { \"use\": \":file\", \"mill\": \"/image/resize\", \"opts\": { \"width\": \"800\", \"quality\": \"80\" } }, \"small\": { \"use\": \":file\", \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"80\" } }, \"thumb\": { \"use\": \"large\", \"pin\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"100\", \"quality\": \"80\" } } } }","title":"Media"},{"location":"learn/threads/files/schemas/#camera-roll","text":"Used for backing up a user's mobile phone camera roll { \"name\": \"camera_roll\", \"pin\": true, \"links\": { \"raw\": { \"use\": \":file\", \"mill\": \"/blob\" }, \"exif\": { \"use\": \"raw\", \"mill\": \"/image/exif\" }, \"thumb\": { \"use\": \"raw\", \"pin\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"80\" } } } }","title":"Camera Roll"},{"location":"learn/threads/files/schemas/#avatars","text":"Used for creating and storing a user's avatar image { \"name\": \"avatar\", \"pin\": true, \"links\": { \"large\": { \"use\": \":file\", \"pin\": true, \"plaintext\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"320\", \"quality\": \"75\" } }, \"small\": { \"use\": \":file\", \"pin\": true, \"plaintext\": true, \"mill\": \"/image/resize\", \"opts\": { \"width\": \"100\", \"quality\": \"75\" } } } }","title":"Avatars"},{"location":"learn/threads/files/schemas/#json-based","text":"It is also possible to create a new Schema that supports JSON data. This is pretty simple to setup, requiring only that we use the pre-existing /json Mill, and a few other minor keys for controlling pinning, encryption (we'll keep things in plaintext for now), and the json_schema definition. As always, Schemas start with a few basic keys: { \"pin\": true, \"plaintext\": true, \"mill\": \"/json\", \"json_schema\": ... } Unlike in the above examples however, notice the (currently empty) json_schema entry. This is where/how we define the actual expected JSON structure for our Schema. It is based on the JSON Schema vocabulary for annotating and validating JSON documents. So, our Textile Schema will actually contain the JSON schema that we can use to validate the input JSON data before processing it via Mill(s). This is really nice, because it ensures that Textile's Thread data stays structured, making it easier for application developers to trust that the data added to a Thread conforms to their expected data model.","title":"JSON-based"},{"location":"learn/threads/files/schemas/#examples","text":"For example, a very simple 'person' Schema would look something like this: { \"pin\": true, \"mill\": \"/json\", \"json_schema\": { \"$id\": \"https://example.com/person.schema.json\", \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"title\": \"Person\", \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"description\": \"The person's first name.\" }, \"lastName\": { \"type\": \"string\", \"description\": \"The person's last name.\" }, \"age\": { \"description\": \"Age in years which must be equal to or greater than zero.\", \"type\": \"integer\", \"minimum\": 0 } } } } A slightly more advanced example might be for adding basic log data as specified in the BSD syslog Protocol to a Thead, the whole Textile Schema would look something like this: { \"pin\": true, \"plaintext\": false, \"mill\": \"/json\", \"json_schema\": { \"$ref\": \"#/definitions/Log\", \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"definitions\": { \"Log\": { \"additionalProperties\": false, \"properties\": { \"application\": { \"type\": \"string\" }, \"hostname\": { \"type\": \"string\" }, \"message\": { \"type\": \"string\" }, \"pid\": { \"type\": \"integer\" }, \"priority\": { \"type\": \"integer\" }, \"timestamp\": { \"type\": \"string\" } }, \"required\": [ \"priority\", \"timestamp\", \"hostname\", \"application\", \"pid\", \"message\" ], \"type\": \"object\" } } } } Alternatively, if a developer wanted to send document updates via a Thread, they'd need a JSON Schema that supports modifying JSON documents. The JSON Patch specification, as outline in RFC 6902 , is one such specification: \"JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document...\" You can obtain a JSON Schema representation of the JSON Patch spec from the JSON schema 'store' . Combining the JSON Patch schema.org spec with a Textile Schema spec gives: { \"pin\": true, \"plaintext\": true, \"mill\": \"/json\", \"json_schema\": { \"title\": \"JSON schema for JSONPatch files\", \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"array\", \"items\": { \"$ref\": \"#/definitions/operation\" }, \"definitions\": { \"operation\": { \"type\": \"object\", \"required\": [ \"op\", \"path\" ], \"allOf\": [ { \"$ref\": \"#/definitions/path\" } ], \"oneOf\": [ { \"required\": [ \"value\" ], \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"add\", \"replace\", \"test\" ] }, \"value\": { \"description\": \"The value to add, replace or test.\" } } }, { \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"remove\" ] } } }, { \"required\": [ \"from\" ], \"properties\": { \"op\": { \"description\": \"The operation to perform.\", \"type\": \"string\", \"enum\": [ \"move\", \"copy\" ] }, \"from\": { \"description\": \"A JSON Pointer path pointing to the location to move/copy from.\", \"type\": \"string\" } } } ] }, \"path\": { \"properties\": { \"path\": { \"description\": \"A JSON Pointer path.\", \"type\": \"string\" } } } } } } You can imagine even more complex scenarios, including a stream of forecasts from Dark Sky weather data : { \"pin\": true, \"mill\": \"/json\", \"json_schema\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Forecast\", \"definitions\": { \"Alert\": { \"required\": [ \"description\", \"expires\", \"time\", \"title\", \"uri\" ], \"properties\": { \"description\": { \"type\": \"string\" }, \"expires\": { \"type\": \"integer\" }, \"time\": { \"type\": \"integer\" }, \"title\": { \"type\": \"string\" }, \"uri\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Flags\": { \"required\": [ \"units\" ], \"properties\": { \"units\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Forecast\": { \"required\": [ \"currently\", \"code\", \"flags\", \"latitude\", \"longitude\", \"offset\", \"timezone\" ], \"properties\": { \"alerts\": { \"items\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Alert\" }, \"type\": \"array\" }, \"code\": { \"type\": \"integer\" }, \"currently\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Weather\" }, \"error\": { \"type\": \"string\" }, \"flags\": { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"$ref\": \"#/definitions/Flags\" }, \"latitude\": { \"type\": \"number\" }, \"longitude\": { \"type\": \"number\" }, \"offset\": { \"type\": \"number\" }, \"timezone\": { \"type\": \"string\" } }, \"additionalProperties\": false, \"type\": \"object\" }, \"Weather\": { \"required\": [ \"apparentTemperature\", \"apparentTemperatureMax\", \"apparentTemperatureMaxTime\", \"apparentTemperatureMin\", \"apparentTemperatureMinTime\", \"cloudCover\", \"dewPoint\", \"humidity\", \"icon\", \"nearestStormDistance\", \"nearestStormBearing\", \"ozone\", \"precipIntensity\", \"precipIntensityMax\", \"precipIntensityMaxTime\", \"precipProbability\", \"precipType\", \"pressure\", \"summary\", \"sunriseTime\", \"sunsetTime\", \"temperature\", \"temperatureMax\", \"temperatureMaxTime\", \"temperatureMin\", \"temperatureMinTime\", \"time\", \"visibility\", \"windBearing\", \"windSpeed\" ], \"properties\": { \"apparentTemperature\": { \"type\": \"number\" }, \"apparentTemperatureMax\": { \"type\": \"number\" }, \"apparentTemperatureMaxTime\": { \"type\": \"integer\" }, \"apparentTemperatureMin\": { \"type\": \"number\" }, \"apparentTemperatureMinTime\": { \"type\": \"integer\" }, \"cloudCover\": { \"type\": \"number\" }, \"dewPoint\": { \"type\": \"number\" }, \"humidity\": { \"type\": \"number\" }, \"icon\": { \"type\": \"string\" }, \"nearestStormBearing\": { \"type\": \"number\" }, \"nearestStormDistance\": { \"type\": \"number\" }, \"ozone\": { \"type\": \"number\" }, \"precipIntensity\": { \"type\": \"number\" }, \"precipIntensityMax\": { \"type\": \"number\" }, \"precipIntensityMaxTime\": { \"type\": \"integer\" }, \"precipProbability\": { \"type\": \"number\" }, \"precipType\": { \"type\": \"string\" }, \"pressure\": { \"type\": \"number\" }, \"summary\": { \"type\": \"string\" }, \"sunriseTime\": { \"type\": \"integer\" }, \"sunsetTime\": { \"type\": \"integer\" }, \"temperature\": { \"type\": \"number\" }, \"temperatureMax\": { \"type\": \"number\" }, \"temperatureMaxTime\": { \"type\": \"integer\" }, \"temperatureMin\": { \"type\": \"number\" }, \"temperatureMinTime\": { \"type\": \"integer\" }, \"time\": { \"type\": \"integer\" }, \"visibility\": { \"type\": \"number\" }, \"windBearing\": { \"type\": \"number\" }, \"windSpeed\": { \"type\": \"number\" } }, \"additionalProperties\": false, \"type\": \"object\" } } } }","title":"Examples"},{"location":"policies/conduct/","text":"Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Code of conduct"},{"location":"policies/conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"policies/conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"policies/conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"policies/conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"policies/conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"policies/conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at contact@textile.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"policies/conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Attribution"},{"location":"policies/license/","text":"License \u00b6 Unless otherwise explicitly stated, all Textile code and software products are licensed under the following license: MIT License \u00b6 Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"policies/license/#license","text":"Unless otherwise explicitly stated, all Textile code and software products are licensed under the following license:","title":"License"},{"location":"policies/license/#mit-license","text":"Copyright \u00a9 2018, 2019 Textile Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"policies/privacy/","text":"Privacy Policy \u00b6 Textile provides exchange and storage of encrypted personal data. We cannot decrypt or otherwise access the data you privately store or share with your contacts. You can choose to share your data such as photos in public forums whereby anyone can view the data contents. Textile provides remote data storage for users on the IPFS network (see https://ipfs.io/ ). The IPFS protocol has no mechanisms for deletion of data once added, so instead, we allow users to 'revoke' their data, such that all servers in the IPFS network run through Textile (including those in the mobile app) will discontinue the hosting and displaying of said data. When you share photos in group forums (\"Threads\"), the encryption keys for the data (full resolution photo, lower resolution copies, and basic metadata) are shared with Thread members and are visible to anyone with the keys to that Thread. Keys are distributed whenever you, or another Thread member, invite new members to the Thread. The encrypted data shared in Threads are distributed over a network of voluntary IPFS servers that no single member, or the Textile organization, controls. Read more about public-key cryptography and the IPFS protocol if you are interested in how this works. Information We Have \u00b6 Certain information (e.g. a user identifier, group identifiers, encrypted data, etc.) is transmitted to us solely for the purpose of transmitting messages. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any new user you invite to the network. Encrypted contents of Threads may be cached or hosted on voluntary IPFS hosts. By opt-in, you may request Textile to manage the hosting of your encrypted data on remote IPFS peers. Textile will store and mange the encrypted data, plus an index to each entry you create in order to provide an account quota. By opt-in, you may request Textile to maintain an encrypted copy of your private wallet, including your private data index. Your private wallet includes metadata about photos in your account, Threads you participate in, and Contacts you have. If a user decides to opt-in, only a privately encrypted copy of the wallet will be stored by Textile, all contents will only be readable by the user with access to their private keys. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year. In the future, we will allow users to opt-out of this behavior. This data is collected using a third party service, Crashlytics . Information We May Share \u00b6 We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io Changelog \u00b6 09.12.18: Clarified the introduction, specifically what information is passing through IPFS and where it may be hosted. Clarified the collection of crash and bug reporting. Clarified the future opt-in for backup services. Minor typo fixes.","title":"Privacy policy"},{"location":"policies/privacy/#privacy-policy","text":"Textile provides exchange and storage of encrypted personal data. We cannot decrypt or otherwise access the data you privately store or share with your contacts. You can choose to share your data such as photos in public forums whereby anyone can view the data contents. Textile provides remote data storage for users on the IPFS network (see https://ipfs.io/ ). The IPFS protocol has no mechanisms for deletion of data once added, so instead, we allow users to 'revoke' their data, such that all servers in the IPFS network run through Textile (including those in the mobile app) will discontinue the hosting and displaying of said data. When you share photos in group forums (\"Threads\"), the encryption keys for the data (full resolution photo, lower resolution copies, and basic metadata) are shared with Thread members and are visible to anyone with the keys to that Thread. Keys are distributed whenever you, or another Thread member, invite new members to the Thread. The encrypted data shared in Threads are distributed over a network of voluntary IPFS servers that no single member, or the Textile organization, controls. Read more about public-key cryptography and the IPFS protocol if you are interested in how this works.","title":"Privacy Policy"},{"location":"policies/privacy/#information-we-have","text":"Certain information (e.g. a user identifier, group identifiers, encrypted data, etc.) is transmitted to us solely for the purpose of transmitting messages. Unless otherwise stated below, this information is only kept as long as necessary to place each call or transmit each message, and is not used for any other purpose. Information we store The identifier you register with. The email contact address of any new user you invite to the network. Encrypted contents of Threads may be cached or hosted on voluntary IPFS hosts. By opt-in, you may request Textile to manage the hosting of your encrypted data on remote IPFS peers. Textile will store and mange the encrypted data, plus an index to each entry you create in order to provide an account quota. By opt-in, you may request Textile to maintain an encrypted copy of your private wallet, including your private data index. Your private wallet includes metadata about photos in your account, Threads you participate in, and Contacts you have. If a user decides to opt-in, only a privately encrypted copy of the wallet will be stored by Textile, all contents will only be readable by the user with access to their private keys. Transient information IP addresses may be kept for up to 90 days for rate limiting and to prevent abuse. Textile is currently collecting performance metrics and critical issues detected in our software. This data may be kept for up to a year. In the future, we will allow users to opt-out of this behavior. This data is collected using a third party service, Crashlytics .","title":"Information We Have"},{"location":"policies/privacy/#information-we-may-share","text":"We do not share your information with companies, organizations, and individuals outside of Textile unless one of the following circumstances applies: With your consent. The data is encrypted and stored on IPFS hosts. When legally required. We will share the information we have with entities outside of Textile if we have a good faith belief that access, use, preservation, or disclosure of the information is necessary to: meet any applicable law, regulation, legal process or enforceable governmental request. enforce applicable Terms of Service, including investigation of potential violations. detect, prevent, or otherwise address fraud, security, or technical issues. protect against harm to the rights, property, or safety of Textile, our users, or the public as required or permitted by law. We will update this privacy policy as needed so that it is current, accurate, and as clear as possible. Please contact us with any questions at contact@textile.io","title":"Information We May Share"},{"location":"policies/privacy/#changelog","text":"09.12.18: Clarified the introduction, specifically what information is passing through IPFS and where it may be hosted. Clarified the collection of crash and bug reporting. Clarified the future opt-in for backup services. Minor typo fixes.","title":"Changelog"},{"location":"policies/tos/","text":"Terms of Service \u00b6 Last updated: 09/12/18 Welcome to Textile. Please read these terms of service (these \u201c Terms \u201d) carefully as they form a contract between you and We Are Set, Inc, a Delaware corporation ( Textile , \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), that governs your access and use of (i) the web verification and encryption solution software provided by Textile (the \u201c Software \u201d); (ii) the Textile websites at textile.io and textile.photos (the \u201c Site \u201d); and (iii) any written or electronic use or features guides or other documentation provided or made available by Textile (the \u201c User Guides \u201d) (collectively the \u201c Service(s) \u201d). By registering or using any of the Services you agree to be bound by these Terms. If you are using the Services on behalf of an organization, you are agreeing to these Terms for that organization and promising to Textile that you have the authority to bind that organization to these Terms (in which event, \u201cyou\u201d and \u201cyour\u201d will refer to that organization). You may use the Services only in compliance with these Terms and only if you have the power to form a contract with Textile and are not barred under any applicable laws from doing so. IF YOU DO NOT AGREE TO BE BOUND BY THESE TERMS, YOU MUST NOT USE THE SERVICES . Should you have any questions concerning this Agreement, please contact privacy@textile.io . Please note that Textile does not provide warranties for the Services. This contract also limits our liability to you and contains an arbitration provision and a class action waiver. See Sections 14 (NO WARRANTY), 16 (LIMITATION OF LIABILITY) and 19 (ARBITRATION) of these Terms for details. 1. ABOUT THE SERVICE \u00b6 The Service offers verification and authentication services and encryption services for users of photos and other personally collected data. The Service provides a private data storage system (\" Storage \") for users to maintain remote copies of their privately encrypted data. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device. The Service allows users to sync encrypted copies of their data privately with other devices. The service also allows users to create groups of multiple people who all use a shared encryption key to post, comment, and interact with encrypted photos and other data shared by group members (\" Sharing \" and \" Threads \"). Copies of data will be cached, on voluntary IPFS peers on the network including peers hosted by Textile, whenever a user shares data in a group Thread. Cached copies of shared data will be encrypted with keys only available to Thread members and so not readable by anyone else on the network. 2. CHANGES TO THESE TERMS \u00b6 We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service. 3. ACCESS TO THE SERVICE \u00b6 You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws. 4. YOUR ACCOUNT \u00b6 To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d), by completing a registration form and designating a user ID and password. Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT When providing Textile or the Service with content, such as your name, username, photos, social media names, location, data or files, or causing content to be posted, stored or transmitted using or through the Service (\u201c Your Content \u201d), including but not limited to the Registration Data and any other personal identification information that you provide, you hereby grant to us a non-exclusive, worldwide, perpetual, irrevocable, royalty-free, transferable (in whole or in part), fully-paid and sublicensable right, subject to the Privacy Policy, to use, reproduce, modify, transmit, display and distribute Your Content in any media known now or developed in the future, in connection with our provision of the Service. Further, to the fullest extent permitted under applicable law, you waive your moral rights and promise not to assert such rights or any other intellectual property or publicity rights against us, our sublicensees, or our assignees. You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms. 6. CONSENT TO ELECTRONIC COMMUNICATIONS AND SOLICITATION \u00b6 By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message. 8. SUSPENSION AND TERMINATION OF USE OF THE SERVICE \u00b6 We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service. 9. ACCEPTABLE USE \u00b6 You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I . reproduce , modify , alter , tamper with , repair or create derivative works of any Software , unless that permission is granted in a license . Further , unless expressly prohibited under applicable law , you may not use the Service to develop , test , validate and / or improve any service that is a substitute for , or substantially similar to , the Service ( including any portion thereof ); II . reverse engineer , disassemble or decompile the Software used to provide or access the Service , including the Software , or attempt to discover or recreate the source code used to provide or access the Service , except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so ; III . use the Service in any manner or for any purpose other than as expressly permitted by these Terms , the Privacy Policy , any User Guides or any other policy , instruction or terms applicable to the Service that are available on the Service ( \u201c Policies \u201d ); IV . sell , lend , rent , resell , lease , sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party ; V . remove , obscure or alter any proprietary rights notice pertaining to the Service ; VI . use the Service in connection with the operation of nuclear facilities , aircraft navigation , communication systems , medical devices , air traffic control devices , real time control systems or other situations in which the failure of the Service could lead to death , personal injury , or physical property or environmental damage ; VII . use the Service to : ( i ) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data ; ( ii ) send unsolicited or unauthorized junk mail , spam , chain letters , pyramid schemes or any other form of duplicative or unsolicited messages , whether commercial or otherwise ; ( iii ) store or transmit any inappropriate content , such as content : ( 1 ) containing unlawful , defamatory , threatening , abusive , libelous or otherwise objectionable material of any kind or nature , ( 2 ) containing any material that encourages conduct that could constitute a criminal offense , or ( 3 ) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability ; ( iv ) store or transmit any content that contains or is used to initiate a denial of service attack , software viruses or other harmful or deleterious computer code , files or programs such as Trojan horses , worms , time bombs , cancelbots , or spyware ; or ( v ) abuse , harass , stalk or otherwise violate the legal rights of a third party ; VIII . interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users \u2019 to access the Service , or violate any third party regulations , policies or procedures of such servers or networks or harass or interfere with another user \u2019 s full use and enjoyment of any Software or the Service ; IX . access or attempt to access Textile \u2019 s other accounts , computer systems or networks not covered by these Terms , through password mining or any other means ; X . cause , in Textile \u2019 s sole discretion , inordinate burden on the Service or Textile \u2019 s system resources or capacity ; or XI . share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service . Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content. 9. UPDATES TO THE SERVICE \u00b6 Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether. 10. SOFTWARE \u00b6 If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above. 11. THIRD PARTY SERVICES AND CONTENT \u00b6 All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services. 12. TEXTILE PROPRIETARY RIGHTS \u00b6 As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service. 13. PRIVACY \u00b6 In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://github.com/textileio/textile-mobile/blob/master/PRIVACY.md (\u201c Privacy Policy \u201d). 14. NO WARRANTY \u00b6 TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers. 15. INDEMNIFICATION \u00b6 You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation. 16. LIMITATION OF LIABILITY \u00b6 TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different. 17. ARBITRATION; CLASS ACTION WAIVER \u00b6 17.1 \u00b6 Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below. 17.2 \u00b6 Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action. 17.3 Arbitration Agreement \u00b6 After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California. 18. NOTICES \u00b6 We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms. 19. MISCELLANEOUS \u00b6 19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service. 19.2. \u00b6 Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service. 19.3. \u00b6 Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors. 19.4. \u00b6 Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred. 19.5. \u00b6 Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect. 19.6. \u00b6 Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212. 20. COPYRIGHT COMPLAINTS AND REMOVAL POLICY \u00b6 We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders. DMCA Take-Down Notices \u00b6 If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications. Counter-Notices \u00b6 If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice. 21. INTELLECTUAL PROPERTY NOTICES \u00b6 All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"Terms of service"},{"location":"policies/tos/#terms-of-service","text":"Last updated: 09/12/18 Welcome to Textile. Please read these terms of service (these \u201c Terms \u201d) carefully as they form a contract between you and We Are Set, Inc, a Delaware corporation ( Textile , \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), that governs your access and use of (i) the web verification and encryption solution software provided by Textile (the \u201c Software \u201d); (ii) the Textile websites at textile.io and textile.photos (the \u201c Site \u201d); and (iii) any written or electronic use or features guides or other documentation provided or made available by Textile (the \u201c User Guides \u201d) (collectively the \u201c Service(s) \u201d). By registering or using any of the Services you agree to be bound by these Terms. If you are using the Services on behalf of an organization, you are agreeing to these Terms for that organization and promising to Textile that you have the authority to bind that organization to these Terms (in which event, \u201cyou\u201d and \u201cyour\u201d will refer to that organization). You may use the Services only in compliance with these Terms and only if you have the power to form a contract with Textile and are not barred under any applicable laws from doing so. IF YOU DO NOT AGREE TO BE BOUND BY THESE TERMS, YOU MUST NOT USE THE SERVICES . Should you have any questions concerning this Agreement, please contact privacy@textile.io . Please note that Textile does not provide warranties for the Services. This contract also limits our liability to you and contains an arbitration provision and a class action waiver. See Sections 14 (NO WARRANTY), 16 (LIMITATION OF LIABILITY) and 19 (ARBITRATION) of these Terms for details.","title":"Terms of Service"},{"location":"policies/tos/#1-about-the-service","text":"The Service offers verification and authentication services and encryption services for users of photos and other personally collected data. The Service provides a private data storage system (\" Storage \") for users to maintain remote copies of their privately encrypted data. Storage is managed on IPFS ( https://www.ipfs.io/ ) nodes running on a user's personal device. The Service allows users to sync encrypted copies of their data privately with other devices. The service also allows users to create groups of multiple people who all use a shared encryption key to post, comment, and interact with encrypted photos and other data shared by group members (\" Sharing \" and \" Threads \"). Copies of data will be cached, on voluntary IPFS peers on the network including peers hosted by Textile, whenever a user shares data in a group Thread. Cached copies of shared data will be encrypted with keys only available to Thread members and so not readable by anyone else on the network.","title":"1. ABOUT THE SERVICE"},{"location":"policies/tos/#2-changes-to-these-terms","text":"We reserve the right to revise these Terms from time to time. We will date and post the most current version of these Terms on the Site. Any changes will be effective upon posting the revised version of these Terms (or such later effective date as may be indicated at the top of the revised Terms). If, in our sole discretion, we deem a revision to these Terms to be material, we will notify you via the Service and/or by email to the email address associated with your account. Notice of other changes may be provided via the Site. Therefore, we encourage you to check the date of these Terms whenever you visit the Site to see if these Terms have been updated. Your continued access or use of any portion of the Service constitutes your acceptance of such changes. If you don\u2019t agree to any of the changes, we\u2019re not obligated to keep providing the Service to you, and you must cancel and stop using the Service.","title":"2. CHANGES TO THESE TERMS"},{"location":"policies/tos/#3-access-to-the-service","text":"You may use the Service, on a non-exclusive basis, solely in strict compliance with these Terms and all applicable laws.","title":"3. ACCESS TO THE SERVICE"},{"location":"policies/tos/#4-your-account","text":"To obtain access to certain Services, you may be required to obtain an account with Textile (become a \u201c Registered User \u201d), by completing a registration form and designating a user ID and password. Until you apply for and are approved for an account your access to the Service will be limited to the areas of the Service, if any, that Textile makes available to the general public. When registering with Textile you must: (a) provide true, accurate, current and complete information about yourself as requested by the Service\u2019s registration form (such information being the \u201c Registration Data \u201d); and (b) maintain and promptly update the Registration Data to keep it true, accurate, current and complete. Textile may deny approval or withdraw such approval at any time in its sole discretion, with or without cause. Only you may use your Textile account. You must keep your account and passwords confidential and not authorize any third party to access or use the Service on your behalf, unless we provide an approved mechanism for such use. Textile will not be liable for any loss or damage arising from any unauthorized use of your accounts. CONTENT When providing Textile or the Service with content, such as your name, username, photos, social media names, location, data or files, or causing content to be posted, stored or transmitted using or through the Service (\u201c Your Content \u201d), including but not limited to the Registration Data and any other personal identification information that you provide, you hereby grant to us a non-exclusive, worldwide, perpetual, irrevocable, royalty-free, transferable (in whole or in part), fully-paid and sublicensable right, subject to the Privacy Policy, to use, reproduce, modify, transmit, display and distribute Your Content in any media known now or developed in the future, in connection with our provision of the Service. Further, to the fullest extent permitted under applicable law, you waive your moral rights and promise not to assert such rights or any other intellectual property or publicity rights against us, our sublicensees, or our assignees. You represent and warrant that none of the following infringe any intellectual property, publicity or other proprietary rights: your provision of Your Content to us, your causing Your Content to be posted using the Service, and use of any such content (including of works derived from it) by us, other users of the Service, or others in contract with us that is done in connection with the Service and in compliance with these Terms. You acknowledge and agree that we may access or disclose information about you or any other information or data collected, stored or processed on our servers, including Your Content, if required to do so by law or in the good-faith belief that such action is necessary to: (a) comply with any law, regulation, legal process or lawful governmental requests; (b) protect the rights or property of Textile or our customers, including the enforcement of our agreements or policies governing your use of the Service; or \u00a9 act on a good faith belief that such access or disclosure is necessary to protect the personal safety of Textile employees, customers, or the public. We retain the right to block or otherwise prevent delivery of any type of file, email or other communication to or from the Service as part of our efforts to protect the Service, protect our customers, or stop you from breaching these Terms.","title":"4. YOUR ACCOUNT"},{"location":"policies/tos/#6-consent-to-electronic-communications-and-solicitation","text":"By registering for the Service, you understand that we may send you communications or data regarding the Services, including but not limited to: (a) notices about your use of the Services, including any notices concerning violations of use; (b) updates; and \u00a9 promotional information and materials regarding Textile\u2019s products and services, via electronic mail. We give you the opportunity to opt-out of receiving promotional electronic mail from us by following the opt-out instructions provided in the message.","title":"6. CONSENT TO ELECTRONIC COMMUNICATIONS AND SOLICITATION"},{"location":"policies/tos/#8-suspension-and-termination-of-use-of-the-service","text":"We reserve the right, to temporarily suspend or terminate your access to the Service at any time in our sole discretion, with or without cause, with or without notice, and without incurring liability of any kind. For example, we may suspend or terminate your access to or use of the Service for: (a) the actual or suspected violation of these Terms; (b) the use of the Services in a manner that may cause Textile to have legal liability or disrupt others\u2019 use of the Services; \u00a9 the suspicion or detection of any malicious code, virus or other harmful code by you or in your account; (d) scheduled downtime and recurring downtime; (e) any actual or suspected effort by you to circumvent Textile\u2019s security or encryption; or (f) unplanned technical problems and outages. If, in Textile\u2019s determination, the suspension might be indefinite and/or Textile has elected to terminate your access to the Service, Textile will use commercially reasonable efforts to notify you through the Service and/or by email to the email address associated with your account. You acknowledge that if your access to the Service is suspended or terminated, you may no longer have access to Your Content that is stored with the Service.","title":"8. SUSPENSION AND TERMINATION OF USE OF THE SERVICE"},{"location":"policies/tos/#9-acceptable-use","text":"You must not use the Service to harm others or the Service. For example, you must not use the Service to harm, threaten, or harass another person, organization, or Textile. You must not: damage, disable, overburden, or impair the Service (or any network connected to the Service); resell or redistribute the Service or any part of it; use any unauthorized means to modify, reroute, or gain access to the Service or attempt to carry out these activities; or use any data mining, robots, or similar data gathering and extraction tools; or use any automated process or Service (such as a bot, a spider, or periodic caching of information stored by Textile) to access or use the Service;. In addition, you promise that you will not and will not encourage or assist any third party to: I . reproduce , modify , alter , tamper with , repair or create derivative works of any Software , unless that permission is granted in a license . Further , unless expressly prohibited under applicable law , you may not use the Service to develop , test , validate and / or improve any service that is a substitute for , or substantially similar to , the Service ( including any portion thereof ); II . reverse engineer , disassemble or decompile the Software used to provide or access the Service , including the Software , or attempt to discover or recreate the source code used to provide or access the Service , except and only to the extent that that permission is granted in a license or applicable law expressly permits doing so ; III . use the Service in any manner or for any purpose other than as expressly permitted by these Terms , the Privacy Policy , any User Guides or any other policy , instruction or terms applicable to the Service that are available on the Service ( \u201c Policies \u201d ); IV . sell , lend , rent , resell , lease , sublicense or otherwise transfer any of the rights granted to you with respect to the Services to any third party ; V . remove , obscure or alter any proprietary rights notice pertaining to the Service ; VI . use the Service in connection with the operation of nuclear facilities , aircraft navigation , communication systems , medical devices , air traffic control devices , real time control systems or other situations in which the failure of the Service could lead to death , personal injury , or physical property or environmental damage ; VII . use the Service to : ( i ) engage in any unlawful or fraudulent activity or perpetrate a hoax or engage in phishing schemes or forgery or other similar falsification or manipulation of data ; ( ii ) send unsolicited or unauthorized junk mail , spam , chain letters , pyramid schemes or any other form of duplicative or unsolicited messages , whether commercial or otherwise ; ( iii ) store or transmit any inappropriate content , such as content : ( 1 ) containing unlawful , defamatory , threatening , abusive , libelous or otherwise objectionable material of any kind or nature , ( 2 ) containing any material that encourages conduct that could constitute a criminal offense , or ( 3 ) in a way that violates or infringes upon the intellectual property rights or the privacy or publicity rights of any person or entity or that may otherwise be unlawful or give rise to civil or criminal liability ; ( iv ) store or transmit any content that contains or is used to initiate a denial of service attack , software viruses or other harmful or deleterious computer code , files or programs such as Trojan horses , worms , time bombs , cancelbots , or spyware ; or ( v ) abuse , harass , stalk or otherwise violate the legal rights of a third party ; VIII . interfere with or disrupt servers or networks used by Textile to provide the Service or used by other users \u2019 to access the Service , or violate any third party regulations , policies or procedures of such servers or networks or harass or interfere with another user \u2019 s full use and enjoyment of any Software or the Service ; IX . access or attempt to access Textile \u2019 s other accounts , computer systems or networks not covered by these Terms , through password mining or any other means ; X . cause , in Textile \u2019 s sole discretion , inordinate burden on the Service or Textile \u2019 s system resources or capacity ; or XI . share passwords or other access information or devices or otherwise authorize any third party to access or use the Software or the Service . Textile reserves the right, in its sole discretion, to deactivate, change and/or require you to change your Textile user ID and any custom or vanity URLs, custom links, or vanity domains you may obtain through the Services for any reason or for no reason. Textile may exercise such right at any time, with or without prior notice. We will make all judgments concerning the applicability of these guidelines in our sole and exclusive discretion. We reserve the right, in our sole discretion, to determine whether and what action to take in response to each such notification, and any action or inaction in a particular instance will not dictate or limit our response to a future complaint. We will not assume or have any liability for any action or inaction with respect to any Your Content.","title":"9. ACCEPTABLE USE"},{"location":"policies/tos/#9-updates-to-the-service","text":"Textile reserves the right, in its sole discretion, to make necessary unscheduled deployments of changes, updates or enhancements to the Service at any time. We may add or remove functionalities or features, and we may suspend or stop the Service altogether.","title":"9. UPDATES TO THE SERVICE"},{"location":"policies/tos/#10-software","text":"If you receive Software from us, its use is governed in one of two ways: If you\u2019re presented with license terms that you must accept in order to use the Software, those terms apply; if no license is presented to you, these Terms apply. We reserve all other rights to the Software. We may automatically check your version of the Software. We may also automatically download to your computer or device new versions of the Software. Any Software is licensed, not sold. Unless we notify you otherwise, the Software license ends when your Service ends. You must then promptly uninstall the Software, or we may disable it. You must not work around any technical limitations in the Software. The Software is subject to applicable U.S. export laws and regulations. You must comply with all domestic and international export laws and regulations that apply to the Software. These laws include restrictions on destinations, end users, and end use. Without limitation, you may not transfer the Software or Service without U.S. government permission to anyone on U.S. government exclusion lists (see the Commerce Department\u2019s compliance list at http://www.bis.doc.gov/index.php/policy-guidance/lists-of-parties-of-concern . You represent and warrant that you\u2019re not on any of those lists or under the control of or an agent for anyone on those lists or the entities listed above.","title":"10. SOFTWARE"},{"location":"policies/tos/#11-third-party-services-and-content","text":"All transactions using the Services are between the transacting parties only. The Services may contain features and functionalities linking you or providing you with certain functionality and access to third party content, including Web sites, directories, servers, networks, systems, information and databases, applications, software, programs, products or services, and the Internet as a whole; you acknowledge that we are not responsible for such content or services. We may also provide some content to you as part of the Services. However, Textile is not an agent of any transacting party, nor or we a direct party in any such transaction. Any such activities, and any terms associated with such activities, are solely between you and the applicable third-party. Similarly, we are not responsible for any third party content you access with the Services, and you irrevocably waive any claim against us with respect to such sites and third-party content. Textile shall have no liability, obligation or responsibility for any such correspondence, purchase or promotion between you and any such third-party. You should make whatever investigation you feel necessary or appropriate before proceeding with any online or offline transaction with any of these third parties. You are solely responsible for your dealings with any third party related to the Services, including the delivery of and payment for goods and services.","title":"11. THIRD PARTY SERVICES AND CONTENT"},{"location":"policies/tos/#12-textile-proprietary-rights","text":"As between Textile and you, Textile or its licensors own and reserve all right, title and interest in and to the Service and all hardware, software and other items used to provide the Service, other than the rights explicitly granted to you to use the Service in accordance with this Terms. No title to or ownership of any proprietary rights related to the Service is transferred to you pursuant to these Terms. All rights not explicitly granted to you are reserved by Textile. In the event that you provide comments, suggestions and recommendations to Textile with respect to the Service (including, without limitation, with respect to modifications, enhancements, improvements and other changes to the Service) (collectively, \u201cFeedback\u201d), you hereby grant to Textile a world-wide, royalty free, irrevocable, perpetual license to use and otherwise incorporate any Feedback in connection with the Service.","title":"12. TEXTILE PROPRIETARY RIGHTS"},{"location":"policies/tos/#13-privacy","text":"In order to operate and provide the Service, we collect certain information about you. We use that information as described in the privacy policy located at https://github.com/textileio/textile-mobile/blob/master/PRIVACY.md (\u201c Privacy Policy \u201d).","title":"13. PRIVACY"},{"location":"policies/tos/#14-no-warranty","text":"TEXTILE PROVIDES THE SERVICE \u201cAS IS\u201d, \u201cWITH ALL FAULTS\u201d AND \u201cAS AVAILABLE\u201d. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, TEXTILE MAKES NO (AND SPECIFICALLY DISCLAIMS ALL) REPRESENTATIONS OR WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY THAT THE SERVICE WILL BE UNINTERRUPTED, ERROR-FREE OR FREE OF HARMFUL COMPONENTS, THAT YOUR CONTENT WILL BE SECURE OR NOT OTHERWISE LOST OR DAMAGED, OR ANY IMPLIED WARRANTY OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, AND ANY WARRANTY ARISING OUT OF ANY COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE. SOME JURISDICTIONS DO NOT ALLOW THE FOREGOING EXCLUSIONS. IN SUCH AN EVENT SUCH EXCLUSION WILL NOT APPLY SOLELY TO THE EXTENT PROHIBITED BY APPLICABLE LAW. You hereby acknowledge and agree that this disclaimer of warranties is a fundamental part of the agreement between you and Textile contained in these Terms and that Textile would not agree to enter these Terms or allow you access or use the Service without such disclaimers.","title":"14. NO WARRANTY"},{"location":"policies/tos/#15-indemnification","text":"You will defend Textile against any cost, loss, damage, or other liability arising from any third party demand or claim that any Your Content, or your use of the Service, in breach of these Terms: (a) infringes a registered patent, registered trademark, or copyright of a third party, or misappropriates a trade secret (to the extent that such misappropriation is not the result of Textile\u2019s actions); or (b) violates applicable law or these Terms. Textile will reasonably notify you of any such claim or demand that is subject to your indemnification obligation.","title":"15. INDEMNIFICATION"},{"location":"policies/tos/#16-limitation-of-liability","text":"TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL TEXTILE, ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS BE LIABLE FOR: ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, COVER OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR LOST PROFITS, REVENUE, GOODWILL, USE OR CONTENT, HOWEVER CAUSED, UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, CONTRACT, TORT, WARRANTY, NEGLIGENCE OR OTHERWISE, EVEN IF TEXTILE HAS BEEN ADVISED AS TO THE POSSIBILITY OF SUCH DAMAGES. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THE AGGREGATE LIABILITY OF TEXTILE AND ITS AFFILIATES, OFFICERS, EMPLOYEES, AGENTS, SUPPLIERS OR LICENSORS, RELATING TO THE SERVICES WILL BE LIMITED TO FIFTY DOLLARS ($50.00). THE LIMITATIONS AND EXCLUSIONS ALSO APPLY IF THIS REMEDY DOES NOT FULLY COMPENSATE YOU FOR ANY LOSSES OR FAILS OF ITS ESSENTIAL PURPOSE. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES. IN SUCH AN EVENT THIS LIMITATION WILL NOT APPLY TO YOU TO THE EXTENT PROHIBITED BY LAW. You acknowledge that the foregoing limitations are an essential element of the agreement between you and Textile and that in the absence of such limitations the terms and conditions set forth in these Terms would be substantially different.","title":"16. LIMITATION OF LIABILITY"},{"location":"policies/tos/#17-arbitration-class-action-waiver","text":"","title":"17. ARBITRATION; CLASS ACTION WAIVER"},{"location":"policies/tos/#171","text":"Introduction. This Section 17 includes an arbitration agreement and an agreement that all claims will be brought only in an individual capacity (and not as a class action or other representative proceeding). Please read it carefully. You may opt out of the arbitration agreement by following the opt out procedure described below.","title":"17.1"},{"location":"policies/tos/#172","text":"Informal Process First You agree that in the event of any dispute between you and Textile, you will first contact Textile and make a good faith sustained effort to resolve the dispute before resorting to more formal means of resolution, including without limitation any court action.","title":"17.2"},{"location":"policies/tos/#173-arbitration-agreement","text":"After the informal dispute resolution process any remaining dispute, controversy, or claim (collectively, \u201cClaim\u201d) relating in any way to your use of Textile\u2019s services and/or products, including the Service, or relating in any way to the communications between you and Textile or any other user of the Service, will be finally resolved by binding arbitration. This mandatory arbitration agreement applies equally to you and Textile. However, this arbitration agreement does not (a) govern any Claim by Textile for infringement of its intellectual property or access to the Service that is unauthorized or exceeds authorization granted in these Terms or (b) bar you from making use of applicable small claims court procedures in appropriate cases. If you are an individual you may opt out of this arbitration agreement within thirty (30) days of the first date you access or use this Service by following the procedure described below. Arbitration is more informal than a lawsuit in court. There is no judge or jury in arbitration. Instead, the dispute is resolve by a neutral arbitrator. Court review of an arbitration award is limited. Except to the extent the parties agree otherwise, arbitrators can award the same damages and relief that a court can award. You agree that the U.S. Federal Arbitration Act governs the interpretation and enforcement of this provision, and that you and Textile are each waiving the right to a trial by jury or to participate in a class action. This arbitration provision will survive any termination of these Terms. If you wish to begin an arbitration proceeding, after following the informal dispute resolution procedure, you must send a letter requesting arbitration and describing your claim to Textile, Inc., Attn: President, 85 Broad St., 18 th Floor - NY, NY 10004. The arbitration will be administered by the American Arbitration Association (AAA) under its rules including, if you are an individual, the AAA's Supplementary Procedures for Consumer-Related Disputes. If you are not an individual or have used the Services on behalf of an entity, the AAA's Supplementary Procedures for Consumer-Related Disputes will not be used. The AAA's rules are available at www.adr.org or by calling 1-800-778-7879. The number of arbitrators will be one. You may choose to have the arbitration conducted by telephone, based on written submissions, or in person in the county where you live or at another mutually agreed location. The arbitration will be conducted in the English language and California law will apply. Judgment on the award rendered by the arbitrator may be entered in any court having jurisdiction thereof. Payment of all filing, administration and arbitrator fees will be governed by the AAA's rules. If you are an individual and have not accessed or used the Service on behalf of an entity, we will reimburse those fees for claims totaling less than $10,000, unless the arbitrator determines the claims are frivolous, and we will not seek attorneys\u2019 fees and costs in arbitration unless the arbitrator determines the claims are frivolous. The arbitrator, and not any federal, state, or local court, will have exclusive authority to resolve any dispute relating to the interpretation, applicability, unconscionability, arbitrability, enforceability, or formation of this arbitration agreement, including any claim that all or any part of this arbitration agreement is void or voidable. However, the preceding sentence will not apply to the \u201cClass Action Waiver\u201d section below. If you do not want to arbitrate disputes with Textile and you are an individual, you may opt out of this arbitration agreement by sending an email to [ legal@textile.io ] within thirty (30) days of the first date you access or use the Service. CLASS ACTION WAIVER Any Claim must be brought in the respective party\u2019s individual capacity, and not as a plaintiff or class member in any purported class, collective, representative, multiple plaintiff, or similar proceeding (\u201cClass Action\u201d). The parties expressly waive any ability to maintain any Class Action in any forum. If the Claim is subject to arbitration, the arbitrator will not have authority to combine or aggregate similar claims or conduct any Class Action nor make an award to any person or entity not a party to the arbitration. Any claim that all or part of this Class Action Waiver is unenforceable, unconscionable, void, or voidable may be determined only by a court of competent jurisdiction and not by an arbitrator. The parties understand that any right to litigate in court, to have a judge or jury decide their case, or to be a party to a class or representative action, is waived, and that any claims must be decided individually, through arbitration. If this class action waiver is found to be unenforceable, then the entirety of the Arbitration Agreement, if otherwise effective, will be null and void. The arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by that party's individual claim. If for any reason a claim proceeds in court rather than in arbitration, you and Textile each waive any right to a jury trial and each submit to the exclusive jurisdiction of the federal courts located in San Francisco, California.","title":"17.3 Arbitration Agreement"},{"location":"policies/tos/#18-notices","text":"We may send you, in electronic form, information about the Service, additional information, and information the law requires us to provide. We may provide required information to you by email at the address you specified when you signed up for the Service or by access to a website that we identify. Notices emailed to you will be deemed given and received when the email is sent. If you don\u2019t consent to receive notices electronically, you must stop using the Service. You may provide legal noticed to us via email to legal@textile.io , with a duplicate copy sent via registered mail, return receipt requested, to the following address: Textile, Attn: President, 206 Jackson Street. Sunnyvale, CA 94086, USA. Any such notice, in either case, must specifically reference that it is a notice given under these Terms.","title":"18. NOTICES"},{"location":"policies/tos/#19-miscellaneous","text":"19.1. Severability; Entire Agreement These Terms apply to the maximum extent permitted by relevant law. If a court holds that we cannot enforce a part of these Terms as written, you and we will replace those terms with similar terms to the extent enforceable under the relevant law, but the rest of these Terms will remain in effect. This is the entire contract between you and us regarding the Service. It supersedes any prior contract or oral or written statements regarding your use of the Service.","title":"19. MISCELLANEOUS"},{"location":"policies/tos/#192","text":"Assignment and transfer We may assign, transfer, or otherwise dispose our rights and obligations under these Terms, in whole or in part, at any time without notice. You may not assign these Terms or transfer any rights to use the Service.","title":"19.2."},{"location":"policies/tos/#193","text":"Independent Contractors; No third-party beneficiaries Textile and you are not legal partners or agents; instead, our relationship is that of independent contractors. These Terms are solely for your and our benefit. It is not for the benefit of any other person, except for permitted successors.","title":"19.3."},{"location":"policies/tos/#194","text":"Claims You must bring any claim related to these Terms or the Service within one year of the date you could first bring the claim, unless your local law requires a longer time to file claims. If it isn\u2019t filed in time, the claim is permanently barred.","title":"19.4."},{"location":"policies/tos/#195","text":"Waiver The failure of you or Textile to insist upon or enforce strict performance of any of the provisions of these Terms or to exercise any rights or remedies under these Terms will not be construed as a waiver or relinquishment to any extent of your right or Textile\u2019s right to assert or rely upon any such provision, right or remedy in that or any other instance; rather, the same will remain in full force and effect.","title":"19.5."},{"location":"policies/tos/#196","text":"Government Use If you are a U.S. government entity, you acknowledge that any Software and User Guides that are provided are \u201cCommercial Items\u201d as defined at 48 C.F.R. 2.101, and are being provided as commercial computer software subject to the restricted rights described in 48 C.F.R. 2.101 and 12.212.","title":"19.6."},{"location":"policies/tos/#20-copyright-complaints-and-removal-policy","text":"We reserve the right to delete or disable Content alleged to violate these Terms and to terminate repeat offenders.","title":"20. COPYRIGHT COMPLAINTS AND REMOVAL POLICY"},{"location":"policies/tos/#dmca-take-down-notices","text":"If you are a copyright owner or an agent thereof and believe, in good faith, that any materials on the Service infringe upon your copyrights, you may submit a notification pursuant to the Digital Millennium Copyright Act (see 17 U.S.C. 512) (the \u201cDMCA\u201d) by sending the following information in writing to Textile\u2019s designated copyright agent at [ legal@textile.io ]: (a) The date of your notification; (b) A physical or electronic signature of a person authorized to act on behalf of the owner of an exclusive right that is allegedly infringed; \u00a9 A description of the copyrighted work claimed to have been infringed, or, if multiple copyrighted works at a single online site are covered by a single notification, a representative list of such works at that site; (d) A description of the material that is claimed to be infringing or to be the subject of infringing activity and that is to be removed or access to which is to be disabled, and information reasonably sufficient to enable Textile to locate the material; (e) Information reasonably sufficient to permit Textile to contact you, such as an address, telephone number and/or email address; (f) A statement that you have a good faith belief that use of the material in the manner complained of is not authorized by the copyright owner, its agent or the law; and (g) A statement that the information in the notification is accurate, and under penalty of perjury, that you are authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. The failure to send proper notification pursuant to the DMCA may result in our taking incomplete or no action with respect to the allegedly infringing material described in such improper notification, and under some circumstances may even result in liability to the person(s) submitting such improper notifications.","title":"DMCA Take-Down Notices"},{"location":"policies/tos/#counter-notices","text":"If you believe that your content that has been removed from the Service is not infringing, or that you have authorization from the copyright owner, the copyright owner\u2019s agent or pursuant to the law, to post and use the content, you may send a counter-notice containing the following information to our copyright agent using the contact information set forth above: (i) Your physical or electronic signature; (ii) A description of the content that has been removed and the location at which the content appeared before it was removed; (iii) A statement that you have a good faith belief that the content was removed as a result of mistake or a misidentification of the content; and (iv) Your name, address, telephone number and email address, a statement that you consent to the jurisdiction of the federal court in the Northern District Court of California and a statement that you will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Textile copyright agent, Textile may send a copy of the counter-notice to the original complaining party informing such person that it may reinstate the removed content in 10 business days. Unless the copyright owner files an action seeking a court order against the content provider or user, the removed content may (in Textile\u2019s discretion) be reinstated on the Service within 10 to 14 business days after receipt of the counter-notice.","title":"Counter-Notices"},{"location":"policies/tos/#21-intellectual-property-notices","text":"All contents of the Site and Services including but not limited to design, text, software, technical drawings, configurations, graphics, other files, and their selection and arrangement are: Copyright \u00a9 Textile, and/or the proprietary property of its suppliers, affiliates, or licensors. All Rights Reserved. Textile and the Textile logo are including without limitation, either trademarks, service marks or registered trademarks of Textile, Inc., and may not be copied, imitated, or used, in whole or in part, without Textile\u2019s prior written permission or that of our suppliers or licensors. Other product and company names may be trade or service marks of their respective owners. Textile may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter that is part of the Service. Unless we have granted you licenses to our intellectual property in these Terms, our providing you with the Service does not give you any license to our intellectual property. Any rights not expressly granted herein are reserved.","title":"21. INTELLECTUAL PROPERTY NOTICES"},{"location":"run/cafe/","text":"Run a cafe \u00b6 Anyone can run a Textile peer as a cafe and start issuing backup and messaging services to the network. You do not need to rely on Textile's cafe network, or anyone else's network for that matter. To run your node in cafe mode you need to edit the config found at .textile / repo / textile , or use the built-in config (see Config ) commands, or specify custom cafe options on node init (see textile init --help and/or the daemon wiki entry). If you've already installed go-textile and used the default settings, your config file will be in your HOME directory. You'll need to edit the Cafe entry (see also the [ Cafe section of the config ). You'll just change the field \"Open\": false to \"Open\": true , restart your daemon and you are off to the races! More advanced cafe settings and setup allows developers to fine-tune how their cafe interacts with Textile peers, what services they provide, how those services are accessed (and where), and even setup access control and other tweaks. Textile uses several 'default' settings for our cafes, whose setup scripts are available from our textile-opts GitHub repository . For example, Textile cafes are all run using the server IPFS profile, with their cafe APIs bound to 0.0.0.0:40601 , their Gateway address bound to 0.0.0.0:5050 , and swarming on port 4001 . We also use a systemctl service to keep the peers running on reboot. For actual cafe instances, Textile uses a series of Amazon EC2 instances, each behind its own load balancer to facilitate SSL certificate setup and handling. Additionally, all of Textile's cafes' decrypting gateways are tied together via a different load balancer to provide a 'logically centralized' access point for Gateway services. This setup is by no means required, and while your particular use cases may differ, we provide this information for those looking to setup their own cafe arrangement in a 'production' environment. Docker \u00b6 Textile provides -cafe tagged Docker images with a Textile peer configured as a cafe. See all available tags here . $ docker run -it --name textile-cafe-node \\ -p 4001 :4001 -p 8081 :8081 -p 5050 :5050 -p 127 .0.0.1:40600:40600 -p 40601 :40601 \\ -e CAFE_HOST_URL = & lt ; public_URL & gt ; -e CAFE_HOST_PUBLIC_IP = & lt ; public_IP & gt ; \\ textile/go-textile:latest-cafe A cafe node can issue client sessions (JWTs) to other nodes. In order to issue valid sessions, the cafe must know its public IP address and the machine's public facing URL. The CAFE_HOST_PUBLIC_IP and CAFE_HOST_URL environment variable values are written to the textile config file. Read more about cafe host config settings here . Registering with a cafe \u00b6 To add a new cafe, you can use the textile cafes add command. This will register your local peer with the given cafe peer, and saves an expiring service session token. An access token is required for initial registration, and should be obtained separately from the target cafe. The command to add a new cafe looks something like this: textile cafes add --token=blahblahblahblahblahnlahblah https://textile.cafe where the token argument is a token, as generated by the textile tokens create command (again, you'll have to obtain this from a cafe administrator) and the URL is the public address of the running cafe (see Running a cafe for details). Once you have registered with a cafe, you can list them textile cafes ls , get information on a particular cafe ( textile cafes get ), and even remove them from your list ( textile cafes rm ). Additionally, you can manually check for offline messages using textile cafes messages . However, this is done automatically every 30 seconds or so. If you add multiple cafes, your content will be duplicated across each one.","title":"Cafe"},{"location":"run/cafe/#run-a-cafe","text":"Anyone can run a Textile peer as a cafe and start issuing backup and messaging services to the network. You do not need to rely on Textile's cafe network, or anyone else's network for that matter. To run your node in cafe mode you need to edit the config found at .textile / repo / textile , or use the built-in config (see Config ) commands, or specify custom cafe options on node init (see textile init --help and/or the daemon wiki entry). If you've already installed go-textile and used the default settings, your config file will be in your HOME directory. You'll need to edit the Cafe entry (see also the [ Cafe section of the config ). You'll just change the field \"Open\": false to \"Open\": true , restart your daemon and you are off to the races! More advanced cafe settings and setup allows developers to fine-tune how their cafe interacts with Textile peers, what services they provide, how those services are accessed (and where), and even setup access control and other tweaks. Textile uses several 'default' settings for our cafes, whose setup scripts are available from our textile-opts GitHub repository . For example, Textile cafes are all run using the server IPFS profile, with their cafe APIs bound to 0.0.0.0:40601 , their Gateway address bound to 0.0.0.0:5050 , and swarming on port 4001 . We also use a systemctl service to keep the peers running on reboot. For actual cafe instances, Textile uses a series of Amazon EC2 instances, each behind its own load balancer to facilitate SSL certificate setup and handling. Additionally, all of Textile's cafes' decrypting gateways are tied together via a different load balancer to provide a 'logically centralized' access point for Gateway services. This setup is by no means required, and while your particular use cases may differ, we provide this information for those looking to setup their own cafe arrangement in a 'production' environment.","title":"Run a cafe"},{"location":"run/cafe/#docker","text":"Textile provides -cafe tagged Docker images with a Textile peer configured as a cafe. See all available tags here . $ docker run -it --name textile-cafe-node \\ -p 4001 :4001 -p 8081 :8081 -p 5050 :5050 -p 127 .0.0.1:40600:40600 -p 40601 :40601 \\ -e CAFE_HOST_URL = & lt ; public_URL & gt ; -e CAFE_HOST_PUBLIC_IP = & lt ; public_IP & gt ; \\ textile/go-textile:latest-cafe A cafe node can issue client sessions (JWTs) to other nodes. In order to issue valid sessions, the cafe must know its public IP address and the machine's public facing URL. The CAFE_HOST_PUBLIC_IP and CAFE_HOST_URL environment variable values are written to the textile config file. Read more about cafe host config settings here .","title":"Docker"},{"location":"run/cafe/#registering-with-a-cafe","text":"To add a new cafe, you can use the textile cafes add command. This will register your local peer with the given cafe peer, and saves an expiring service session token. An access token is required for initial registration, and should be obtained separately from the target cafe. The command to add a new cafe looks something like this: textile cafes add --token=blahblahblahblahblahnlahblah https://textile.cafe where the token argument is a token, as generated by the textile tokens create command (again, you'll have to obtain this from a cafe administrator) and the URL is the public address of the running cafe (see Running a cafe for details). Once you have registered with a cafe, you can list them textile cafes ls , get information on a particular cafe ( textile cafes get ), and even remove them from your list ( textile cafes rm ). Additionally, you can manually check for offline messages using textile cafes messages . However, this is done automatically every 30 seconds or so. If you add multiple cafes, your content will be duplicated across each one.","title":"Registering with a cafe"},{"location":"run/daemon/","text":"Run the Daemon \u00b6 You can run a Textile node on any device by launching the daemon. The daemon will give you the ability to run the CLI against a local node, access the Textile gateway, and manage the embedded IPFS peer. Info The Textile daemon is a program that runs as a 'background' process (without a terminal or user interface), waiting for Textile events to occur and offering services. It can be accessed via a client (e.g., command-line client), and exposes a number of commands and APIs for interacting with the Textile network and its associated data. Among other services, it provides access to the local Textile datastore and the underlying IPFS peer. In desktop/server environments, Textile provides access to daemon functionality via its local REST_API (which in turn is accessible via a command-line interface). In mobile environments, the daemon is not run, opting instead for direct access to Textile code via the mobile framework. Setup \u00b6 Download \u00b6 First, download the Textile from GitHub. Textile bundles multiple pre-built binaries with each release, for the command-line tools you will be looking for the release named, go-textile_<version-number>_<platform>.tar.gz So for v0.1.11 you will download, For Mac OSX: go-textile_v0.1.11_darwin-amd64.tar.gz For Windows: go-textile_v0.1.11_windows-amd64.zip For Linux, be sure to choose your correct architecture: go-textile_v0.1.11_linux-<arch>.tar.gz View all the latest release builds on GitHub . Install on Mac OS X & Linux \u00b6 Untar the archive ('darwin' will be 'linux' in below examples if on Linux), tar xvfz go-textile_v0.1.11_darwin-amd64.tar.gz Change directory to the newly untarred folder and run the install script, cd go-textile_v0.1.11_darwin-amd64 ./install.sh Install on Windows \u00b6 Untar the archive, tar xvfz go-textile_v0.1.11_windows-amd64.tar.gz Move the Textile.exe anyplace in your PATH . Run \u00b6 Initial Setup \u00b6 Create a new Textile Wallet , initializing a new Peer with the default Wallet account, and then fire up the Textile daemon which will allow us to query and interact with our Peer. Create new wallet \u00b6 textile wallet init Copy the output to a safe/secure place (we recommend something like 1Password or your OS's keychain/keyring system). You\u2019ll need SECRET SEED to initialize a new wallet ID: Init new peer \u00b6 textile init --seed=blahblahblah This will create a new peer/repo in ~/.textile by default (you can specify a custom location with the --repo-dir= flag). We can take a look at the config file ( ~/.textile/repo/textile ) for that peer, and edit it if we need to (e.g., change ports etc), though for the purposes of this guide we can leave everything as their defaults. If you want to tail the logs during development so you can see what's going on, open up a new terminal, and do: tail -f ~/.textile/repo/logs/textile.log Info Before starting a Textile daemon, the Textile repo must be initialized. Once initialized, there are multiple options available for customizing how the daemon is configured, accessed, and run (see also textile daemon --help for details). By default, a Textile repo is initialized at a user's default home directory ( ~/.textile ). Once initialized, all that is required to start the daemon is textile daemon . If your repository was initialized in an alternative location, you may use the --repo-dir flag to specify where to find the repo. If you initialized your repo with a pin code for datastore encryption, you an specify this when starting your daemon with the --pin-code flag. Finally, if you would like to enable debug mode while running your daemon, all textile sub-systems can be set to output debug logs by specifying the --debug flag. All log settings may be additionally configured using the textile logs sub-command. Start daemon \u00b6 Now, we just fire up the daemon and you're ready to go: textile daemon If you ever get 'stuck' along the way, or want to learn more about a command or tool that Textile provides you can always call textile --help , and any of the textile sub-commands also have their own help entry. For example, to learn more about the init command, try textile init --help . Note that most additional daemon settings are managed by the Textile config file. This includes whether the local Textile API and Gateway are enabled, where logs are output, etc. See config for a comprehensive coverage of config options.","title":"Daemon"},{"location":"run/daemon/#run-the-daemon","text":"You can run a Textile node on any device by launching the daemon. The daemon will give you the ability to run the CLI against a local node, access the Textile gateway, and manage the embedded IPFS peer. Info The Textile daemon is a program that runs as a 'background' process (without a terminal or user interface), waiting for Textile events to occur and offering services. It can be accessed via a client (e.g., command-line client), and exposes a number of commands and APIs for interacting with the Textile network and its associated data. Among other services, it provides access to the local Textile datastore and the underlying IPFS peer. In desktop/server environments, Textile provides access to daemon functionality via its local REST_API (which in turn is accessible via a command-line interface). In mobile environments, the daemon is not run, opting instead for direct access to Textile code via the mobile framework.","title":"Run the Daemon"},{"location":"run/daemon/#setup","text":"","title":"Setup"},{"location":"run/daemon/#download","text":"First, download the Textile from GitHub. Textile bundles multiple pre-built binaries with each release, for the command-line tools you will be looking for the release named, go-textile_<version-number>_<platform>.tar.gz So for v0.1.11 you will download, For Mac OSX: go-textile_v0.1.11_darwin-amd64.tar.gz For Windows: go-textile_v0.1.11_windows-amd64.zip For Linux, be sure to choose your correct architecture: go-textile_v0.1.11_linux-<arch>.tar.gz View all the latest release builds on GitHub .","title":"Download"},{"location":"run/daemon/#install-on-mac-os-x-linux","text":"Untar the archive ('darwin' will be 'linux' in below examples if on Linux), tar xvfz go-textile_v0.1.11_darwin-amd64.tar.gz Change directory to the newly untarred folder and run the install script, cd go-textile_v0.1.11_darwin-amd64 ./install.sh","title":"Install on Mac OS X &amp; Linux"},{"location":"run/daemon/#install-on-windows","text":"Untar the archive, tar xvfz go-textile_v0.1.11_windows-amd64.tar.gz Move the Textile.exe anyplace in your PATH .","title":"Install on Windows"},{"location":"run/daemon/#run","text":"","title":"Run"},{"location":"run/daemon/#initial-setup","text":"Create a new Textile Wallet , initializing a new Peer with the default Wallet account, and then fire up the Textile daemon which will allow us to query and interact with our Peer.","title":"Initial Setup"},{"location":"run/daemon/#create-new-wallet","text":"textile wallet init Copy the output to a safe/secure place (we recommend something like 1Password or your OS's keychain/keyring system). You\u2019ll need SECRET SEED to initialize a new wallet ID:","title":"Create new wallet"},{"location":"run/daemon/#init-new-peer","text":"textile init --seed=blahblahblah This will create a new peer/repo in ~/.textile by default (you can specify a custom location with the --repo-dir= flag). We can take a look at the config file ( ~/.textile/repo/textile ) for that peer, and edit it if we need to (e.g., change ports etc), though for the purposes of this guide we can leave everything as their defaults. If you want to tail the logs during development so you can see what's going on, open up a new terminal, and do: tail -f ~/.textile/repo/logs/textile.log Info Before starting a Textile daemon, the Textile repo must be initialized. Once initialized, there are multiple options available for customizing how the daemon is configured, accessed, and run (see also textile daemon --help for details). By default, a Textile repo is initialized at a user's default home directory ( ~/.textile ). Once initialized, all that is required to start the daemon is textile daemon . If your repository was initialized in an alternative location, you may use the --repo-dir flag to specify where to find the repo. If you initialized your repo with a pin code for datastore encryption, you an specify this when starting your daemon with the --pin-code flag. Finally, if you would like to enable debug mode while running your daemon, all textile sub-systems can be set to output debug logs by specifying the --debug flag. All log settings may be additionally configured using the textile logs sub-command.","title":"Init new peer"},{"location":"run/daemon/#start-daemon","text":"Now, we just fire up the daemon and you're ready to go: textile daemon If you ever get 'stuck' along the way, or want to learn more about a command or tool that Textile provides you can always call textile --help , and any of the textile sub-commands also have their own help entry. For example, to learn more about the init command, try textile init --help . Note that most additional daemon settings are managed by the Textile config file. This includes whether the local Textile API and Gateway are enabled, where logs are output, etc. See config for a comprehensive coverage of config options.","title":"Start daemon"},{"location":"run/desktop/","text":"Run the Desktop \u00b6 Download \u00b6 First, download the Textile desktop app from GitHub. Textile bundles multiple pre-built binaries with each release, for the desktop app you will be looking for the release named, Textile_<version-number>_<platform>.tar.gz So for the v0.1.11 you will download, For Mac OSX: Textile_v0.1.11_darwin-amd64.tar.gz For Windows: Textile_v0.1.11_windows-amd64.zip For Linux, be sure to choose your correct architecture: Textile_v0.1.11_linux-<arch>.tar.gz View all the latest release builds on GitHub . Install on Mac OS X & Linux \u00b6 Untar the archive or double-click the download. tar xvfz Textile_v0.1.11_darwin-amd64.tar.gz This will unpack the Textile desktop as an app. You can move this file Textile to your applications folder. Install on Windows \u00b6 Untar the archive or double-click the download. tar xvfz Textile_v0.1.11_windows-amd64.tar.gz Move the Textile.exe file to your applications folder.","title":"Desktop"},{"location":"run/desktop/#run-the-desktop","text":"","title":"Run the Desktop"},{"location":"run/desktop/#download","text":"First, download the Textile desktop app from GitHub. Textile bundles multiple pre-built binaries with each release, for the desktop app you will be looking for the release named, Textile_<version-number>_<platform>.tar.gz So for the v0.1.11 you will download, For Mac OSX: Textile_v0.1.11_darwin-amd64.tar.gz For Windows: Textile_v0.1.11_windows-amd64.zip For Linux, be sure to choose your correct architecture: Textile_v0.1.11_linux-<arch>.tar.gz View all the latest release builds on GitHub .","title":"Download"},{"location":"run/desktop/#install-on-mac-os-x-linux","text":"Untar the archive or double-click the download. tar xvfz Textile_v0.1.11_darwin-amd64.tar.gz This will unpack the Textile desktop as an app. You can move this file Textile to your applications folder.","title":"Install on Mac OS X &amp; Linux"},{"location":"run/desktop/#install-on-windows","text":"Untar the archive or double-click the download. tar xvfz Textile_v0.1.11_windows-amd64.tar.gz Move the Textile.exe file to your applications folder.","title":"Install on Windows"}]}